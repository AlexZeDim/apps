{
    "name": "CSSF",
    "data": [
        {
            "Conditions": "true",
            "Value": "Div(content-wrapper){\r\n    SetTitle($accounts$)\r\n\r\n    If(#role_id#==0){\r\n       SetVar(v_Where, \"id=#key_id#\")\r\n    }\r\n    If(#role_id#==1){\r\n       SetVar(v_Where, \"id=#key_id#\")\r\n    }\r\n    If(#role_id#>1){\r\n       SetVar(v_Where, \"fin_inst=#role_id# or id=#key_id#\")\r\n    }\r\n\r\n    DBFind(Name: keys, Source: src_keys).Columns(\"id,multi,amount,deleted,blocked\").Custom(custom_id){\r\n        Span(Class: h5 text-muted, Body: #id#)\r\n    }.Custom(custom_member_id){\r\n        Span(Class: text-muted, Body: Address(#id#))\r\n    }.Custom(custom_username){\r\n        SetVar(Name: row_member_name, Value: \"\")\r\n        DBFind(Name: members, Source: src_member).Columns(\"id,member_name\").Where(\"id=#id#\").Vars(row)\r\n        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#id#\"){\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#row_member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }.Custom(custom_fin){\r\n        Span(Class: h4 text-bold, Body: #amount# APL)\r\n    }.Custom(custom_status){\r\n\t\tIf(#deleted#==1){\r\n\t\t\tSpan(Class: text-danger h4, Body: Deleted)\r\n\t\t}\r\n\t\tIf(And(#deleted#==0,#blocked#==1)){\r\n\t\t\tSpan(Class: text-warning h4, Body: Blocked)\r\n\t\t}\r\n\t\tIf(And(#deleted#==0,#blocked#==0)){\r\n\t\t\tSpan(Class: text-success h4, Body: Active)\r\n\t\t}\r\n    }.Where(#v_Where#).Order(\"id\")\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_keys, Columns: \"$username$=custom_username,$address$=custom_member_id,$amount$=custom_fin,Status=custom_status\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "accounts",
            "Type": "blocks"
        },
        {
            "Conditions": "true",
            "Value": "Div(content-wrapper){\r\n    SetTitle($user_info$)\r\n\r\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\r\n    }.Else{\r\n        SetVar(Name: v_member_id, Value: #key_id#)\r\n    }\r\n    DBFind(Name: members, Source: src_member).Where(\"id=#v_member_id#\").Vars(prefix)\r\n    DBFind(Name: keys, Source: src_keys).Where(\"id=#key_id#\").Vars(tokens)\r\n    \r\n    Form(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Div(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: LangRes(user_info))\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\r\n                                    If(#prefix_id# == #key_id#){\r\n                                        Button(Class: btn btn-link, Page: profile_edit, PageParams: \"v_member_id=#key_id#\"){\r\n                                            Span(Class: fa icon-user fa-5x)\r\n                                            Div(m0 h3 text-bold){#prefix_member_name#}\r\n                                        }\r\n                                    }.Else{\r\n                                        Div(){\r\n                                            Span(Class: fa icon-user fa-5x)\r\n                                            Div(m0 h3 text-bold){#prefix_member_name#}\r\n                                        }\r\n                                    }\r\n                                }.Else{\r\n                                    Span(Class: h3 text-bold, Body: \"No profile available\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    If(Or(#prefix_id#>0,#prefix_id#<0)){\r\n                        Div(list-group-item text-center){\r\n                            Div(text-muted m0 h5, Body: LangRes(address))\r\n                            Span(Class: h5, Body: Address(#prefix_id#))\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(roles))\r\n                        DBFind(Name: roles_participants, Source: src_check).Columns(\"id\").Where(\"member->member_id='#v_member_id#' and deleted=0\").Vars(check)\r\n                        If(#check_id#>0){\r\n                            DBFind(Name: roles_participants, Source: src_roles).Columns(\"role->id,role->name\").Where(\"member->member_id='#v_member_id#' and deleted=0\").Order(\"id\")\r\n                            ForList(src_roles){\r\n                                Span(){\r\n                                    LinkPage(Page: roles_view, PageParams: \"v_role_id=#role.id#\"){\r\n                                        Span(Class: h5 text-bold, Body: \"#role.name#\")\r\n                                    }\r\n                                }.Style(margin-right: 5px; margin-left: 5px;)\r\n                            }\r\n                        }.Else{\r\n                            Span(LangRes(no))\r\n                        }\r\n                    }\r\n                    If(Or(#prefix_id#>0,#prefix_id#<0)){\r\n                        If(#prefix_id# == #key_id#){ \r\n                            Div(list-group-item text-center){\r\n                                Div(text-muted m0 h5, Body: Tokens)\r\n                                    Span(Class:text-bold h4, Body: #tokens_amount# APL)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\t\t\t\t\tDBFind(Name: keys).Where(\"id=#v_member_id#\").Vars(check_b)\r\n                    If(And(#check_b_blocked#==1,#check_b_deleted#==0)){\r\n\t\t\t\t\t\tDiv(list-group-item text-center){\r\n\t\t\t\t\t\t\tDiv(text-warning text-bold m0 h3, Body: Member blocked)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                    If(#check_b_deleted#==1){\r\n\t\t\t\t\t\tDiv(list-group-item text-center){\r\n\t\t\t\t\t\t\tDiv(text-danger text-bold m0 h3, Body: Member removed)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n\r\n            If(Or(#prefix_id#>0,#prefix_id#<0)){\r\n                If(#prefix_id# == #key_id#){\r\n\t\t\t\t\tIf(And(#tokens_blocked#==0,#tokens_deleted#==0)){\r\n\t\t\t\t\t\tDiv(panel panel-default){\r\n\t\t\t\t\t\t\tDiv(panel-heading text-center){\r\n\t\t\t\t\t\t\t\tSpan(Class: h3, Body: Sending tokens)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(panel-body){\r\n\t\t\t\t\t\t\t\tDiv(list-group-item){\r\n\t\t\t\t\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\t\t\t\t\tDiv(col-md-3 mt-sm text-right){\r\n\t\t\t\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: Recipient)\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tDiv(col-md-9 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\t\tDBFind(Name: members, Source: source_members).Columns(\"id,member_name\").Where(\"fin_inst>0 and id != #key_id#\").Custom(custom_username){\r\n\t\t\t\t\t\t\t\t\t\t\t\tAddress(#id#)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tSelect(Name: Recipient, Source: source_members, NameColumn: custom_username, ValueColumn: id)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(list-group-item){\r\n\t\t\t\t\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\t\t\t\t\tDiv(col-md-3 mt-sm text-right){\r\n\t\t\t\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: Amount (APL))\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tDiv(col-md-9 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\t\tInput(Name: Amount, Type: Money)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\t\t\t\tDiv(col-md-12 mt-lg text-right){\r\n\t\t\t\t\t\t\t\t\t\tButton(Body: Send, Class: btn btn-primary, Contract: TokensTransfer, Page: transactions)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}",
            "Name": "profile_view",
            "Type": "blocks"
        },
        {
            "Conditions": "true",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    SetTitle($roles$)\r\n\r\n    If(GetVar(isSearch) == 1){\r\n        SetVar(Name: v_Where, Value: \"role_name='#v_Search#' and deleted=0\")\r\n    }.Else{\r\n        SetVar(Name: v_Where, Value: \"id>0 and deleted=0\")\r\n        SetVar(Name: v_Search, Value: \"\")\r\n    }\r\n    \r\n    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name,financial_institutions->max_amount,financial_institutions->daily_limit,date_created,date_deleted,deleted\").Custom(custom_id){\r\n        Span(Body: #id#)\r\n    }.Custom(custom_date){\r\n        Div(text-muted h5 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    }.Custom(custom_name){\r\n        LinkPage(Class: text-primary h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#id#\"){\r\n            Div(){\r\n                Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\r\n                Span(#role_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }.Custom(custom_amount){\r\n        SetVar(check_id, 0)\r\n\t\tIf(#financial_institutions.max_amount# > 0){\r\n\t\t\tDBFind(Name: roles_participants).Columns(\"id\").Where(\"role->id='#id#' and member->member_id='#key_id#' and deleted=0\").Vars(check)\r\n\t\t\tIf(#check_id#>0){\r\n\t\t\t\tLinkPage(Class: text-primary h5 text-bold, Page: roles_options, PageParams: \"v_role_id=#id#\"){\r\n\t\t\t\t\tSpan(Class: h4, Body: #financial_institutions.max_amount# APL)\r\n\t\t\t\t}\r\n\t\t\t}.Else{\r\n\t\t\t\tSpan(Class: h4, Body: #financial_institutions.max_amount# APL)\r\n\t\t\t}\r\n\t\t}\r\n\t}.Custom(custom_limit){\r\n        SetVar(check_id, 0)\r\n\t\tIf(#financial_institutions.daily_limit# > 0){\r\n\t\t\tDBFind(Name: roles_participants).Columns(\"id\").Where(\"role->id='#id#' and member->member_id='#key_id#' and deleted=0\").Vars(check)\r\n\t\t\tIf(#check_id#>0){\r\n\t\t\t\tLinkPage(Class: text-primary h5 text-bold, Page: roles_options, PageParams: \"v_role_id=#id#\"){\r\n\t\t\t\t\tSpan(Class: h4, Body: #financial_institutions.daily_limit# APL)\r\n\t\t\t\t}\r\n\t\t\t}.Else{\r\n\t\t\t\tSpan(Class: h4, Body: #financial_institutions.daily_limit# APL)\r\n\t\t\t}\r\n\t\t}\r\n    }.Custom(custom_status){\r\n        Span(Class: h4, Body: Active)\r\n    }.Where(#v_Where#).Order(\"deleted ASC, id ASC\")\r\n    \r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_roles, Columns: \"$id$=custom_id,$name$=custom_name,Date=custom_date,Max amount APL=custom_amount,Daily limit=custom_limit,$status$=custom_status\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "roles_list",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$profile$, Page:profile_view, Icon:\"fa icon-user\")\r\nMenuItem(Title:$members$, Page:members_list, Icon:\"fa icon-people\")\r\nMenuItem(Title:$roles$, Page:roles_list, Icon:\"fa fa-list-ul\")\r\nMenuItem(Title:$notifics$, Page:notifications_single, Icon:\"fa fa-bell-o\")\r\nMenuItem(Title:$accounts$, Page:accounts, Icon:\"fa icon-energy\")\r\nMenuItem(Title:Transactions, Page:transactions, Icon:\"fa icon-link\")\r\nIf(EcosysParam(\"founder_account\")==#key_id#){\r\n    MenuItem(Title:New Ecosystem, Page:ecosystem_new, Icon:\"fa icon-globe\")\r\n}",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "validated_transactions",
            "Columns": "[{\"name\":\"amount\",\"type\":\"money\",\"conditions\":\"true\"},{\"name\":\"sender\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"comment\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"tr_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"delegate\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"recipient\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"document_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"financial_institution_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"ContractConditions(\\\"MainCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Conditions": "true",
            "Value": "assigned_role,elective_role,system_role,company_role",
            "Name": "roles_types",
            "Type": "app_params"
        },
        {
            "Conditions": "true",
            "Value": "Include(accounts)",
            "Name": "accounts",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(content-wrapper){\r\n    If(EcosysParam(\"founder_account\")==#key_id#){\r\n        SetTitle(New Ecosystem)\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading){New Ecosystem}\r\n                    Div(panel-body){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(For: Name){$name$}\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name:Name)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: LangRes(create), Class: btn btn-primary, Contract: NewEcosystem)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "ecosystem_new",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($members$)\r\n\r\n    DBFind(Name: keys, Source: src_keys).Columns(\"id,multi,fin_inst,deleted,blocked\").Custom(custom_id){\r\n        Span(Class: h5 text-muted, Body: #id#)\r\n    }.Custom(custom_member_id){\r\n        Span(Class: h5, Body: Address(#id#))\r\n    }.Custom(custom_username){\r\n        SetVar(Name: row_member_name, Value: \"\")\r\n        DBFind(Name: members, Source: src_member).Columns(\"id,member_name\").Where(\"id=#id#\").Vars(row)\r\n        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#id#\"){\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#row_member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }.Custom(custom_fin){\r\n        If(#fin_inst#>0){\r\n            DBFind(Name: roles, Source: src_adfdf).Columns(\"id,role_name\").Where(\"id=#fin_inst#\").Vars(rosdfw)\r\n            LinkPage(Class: h5 text-primary, Page: roles_view, PageParams: \"v_role_id=#rosdfw_id#\"){\r\n                Div(){\r\n                    Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\r\n                    Span(#rosdfw_role_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(custom_action){\r\n        SetVar(check_id, 0)\r\n        DBFind(Name: roles_participants).Columns(\"id\").Where(\"role->id='#fin_inst#' and member->member_id='#key_id#' and deleted=0\").Vars(check)\r\n        If(#check_id#>0){\r\n\t\t\tIf(#deleted#==0){\r\n\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\tButton(Body: Em(Class: fa icon-trash) Remove, Class: btn btn-danger, Contract: Member_Removing, Params: \"member_id=#id#\", Page: members_list)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tIf(And(#blocked#==0,#deleted#==0)){\r\n\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\tButton(Body: Em(Class: fa icon-lock) Block, Class: btn btn-warning, Contract: Member_Blocking, Params: \"member_id=#id#\", Page: members_list)\r\n\t\t\t\t}.Style(padding-right:10px;)\r\n\t\t\t}\r\n\t\t\tIf(And(#blocked#==1,#deleted#==0)){\r\n\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\tButton(Body: Em(Class: fa icon-note) Restore, Class: btn btn-success, Contract: Member_UnBlocking, Params: \"member_id=#id#\", Page: members_list)\r\n\t\t\t\t}.Style(padding-right:10px;)\r\n\t\t\t}\r\n        }\r\n    }.Custom(custom_status){\r\n\t\tIf(#deleted#==1){\r\n\t\t\tSpan(Class: text-danger h4, Body: Deleted)\r\n\t\t}\r\n\t\tIf(And(#deleted#==0,#blocked#==1)){\r\n\t\t\tSpan(Class: text-warning h4, Body: Blocked)\r\n\t\t}\r\n\t\tIf(And(#deleted#==0,#blocked#==0)){\r\n\t\t\tSpan(Class: text-success h4, Body: Active)\r\n\t\t}\r\n    }.Where(\"multi=1 and fin_inst>0\")\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_keys, Columns: \"$address$=custom_member_id,Financial institution=custom_fin,Status=custom_status,=custom_action\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    DBFind(Name: roles_participants, Source: src_roles).Columns(\"id\").Where(\"role->type='4' and member->member_id='#key_id#' and deleted=0\").Vars(rl1)\r\n    If(#rl1_id#>0){\r\n        DBFind(Name: keys, Source: src_rec).Columns(\"id,multi\").Custom(custom_id){\r\n            Span(Class: h5 text-muted, Body: #id#)\r\n        }.Custom(custom_member_id){\r\n            Span(Class: text-bold h4, Body: Address(#id#))\r\n        }.Custom(action){\r\n            Div(Class: pull-right){\r\n                Button(Body: Em(Class: fa fa-thumbs-down) Reject, Class: btn btn-danger, Contract: Reject_Request, Params: \"member_id=#id#\", Page: members_list)\r\n            }\r\n            Div(Class: pull-right){\r\n                Button(Body: Em(Class: fa fa-thumbs-up) Accept, Class: btn btn-success, PageParams: \"v_member_id=#id#\", Page: profile_edit_member)\r\n            }.Style(padding-right:10px;)\r\n        }.Where(\"multi=0\")\r\n\r\n        Form(panel panel-default){\r\n            Div(panel-heading text-center){\r\n                Span(Class: h3, Body: Membership requests)\r\n            }\r\n            Div(panel-body){\r\n                Div(row){\r\n                    Div(col-md-12){\r\n                        Table(Source: src_rec, Columns: \"$address$=custom_member_id,$id$=custom_id,=action\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    DBFind(Name: roles_participants, Source: src_roles).Columns(\"id\").Where(\"role->type='3' and member->member_id='#key_id#' and deleted=0\").Vars(rl2)\r\n    If(#rl2_id#>0){\r\n        DBFind(Name: keys, Source: src_rec).Columns(\"id,multi\").Custom(custom_id){\r\n            Span(Class: h5 text-muted, Body: #id#)\r\n        }.Custom(custom_member_id){\r\n            Span(Class: text-bold h4, Body: Address(#id#))\r\n        }.Custom(action){\r\n            Div(Class: pull-right){\r\n                Button(Body: Em(Class: fa fa-thumbs-down) Reject, Class: btn btn-danger, Contract: Reject_Request, Params: \"member_id=#id#\", Page: members_list)   \r\n            }\r\n            Div(Class: pull-right){\r\n                Button(Body: Em(Class: fa fa-thumbs-up) Accept, Class: btn btn-success, PageParams: \"v_member_id=#id#\", Page: profile_edit_institution)\r\n            }.Style(padding-right:10px;)\r\n        }.Where(\"multi=0\")\r\n\r\n        Form(panel panel-default){\r\n            Div(panel-heading text-center){\r\n                Span(Class: h3, Body: Requests from financial institutions)\r\n            }\r\n            Div(panel-body){\r\n                Div(row){\r\n                    Div(col-md-12){\r\n                        Table(Source: src_rec, Columns: \"$address$=custom_member_id,$id$=custom_id,=action\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}",
            "Name": "members_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($notifics$)\r\n    \r\n    DBFind(Name: notifications, Source: src_notifications).Columns(\"id,recipient->member_id,recipient->member_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\r\n        If(#closed# == 0){\r\n            SetVar(Name: style_text, Value: \"text-normal\")\r\n            SetVar(Name: style_link, Value: \"text-primary\")\r\n        }.Else{\r\n            SetVar(Name: style_text, Value: \"text-muted\")\r\n            SetVar(Name: style_link, Value: \"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_recipient){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#recipient.member_id#\"){\r\n\t\t\tDiv(){\r\n\t\t\t\tSpan(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n\t\t\t\tSpan(#recipient.member_name#)\r\n\t\t\t}.Style(display:flex; align-items:center;)\r\n        }\r\n    }.Custom(custom_sender){\r\n        If(#sender.type#==1){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\r\n\t\t\t\tDiv(){\r\n\t\t\t\t\tSpan(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n\t\t\t\t\tSpan(#sender.member_name#)\r\n\t\t\t\t}.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n        If(#sender.type#==2){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\r\n\t\t\t\tDiv(){\r\n\t\t\t\t\tSpan(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n\t\t\t\t\tSpan(#sender.role_name#)\r\n\t\t\t\t}.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(custom_icon){\r\n        Em(Class: fa #notification.icon# fa-2x text-muted)\r\n    }.Custom(custom_page){\r\n        LinkPage(Class: #style_link# h4 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n\t\t\tIf(#page_name# == page_upload_doc){\r\n\t\t\t\tSpan(Body: Uploading documents)\r\n\t\t\t}.ElseIf(#page_name# == page_upload_doc_check){\r\n\t\t\t\tSpan(Body: Checking documents)\r\n\t\t\t}.Else{\r\n\t\t\t\tSpan(Body: #page_name#)\r\n\t\t\t}\r\n        }\r\n    }.Custom(custom_status){\r\n        If(#closed# == 0){\r\n            Span(Class: #style_text# h4, Body: Active)\r\n        }.Else{\r\n            Span(Class: #style_text# h4, Body: Closed)\r\n        }\r\n    }.Where(\"notification->type='1'\").Order(\"id desc\").Limit(10)\r\n    \r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                     Table(Source: src_notifications, Columns: \"$id$=custom_id,$icon$=custom_icon,$page_name$=custom_page,$recipient$=custom_recipient,$sender$=custom_sender,$status$=custom_status\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_single",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Uploading documents)\r\n    \r\n    DBFind(Name: notifications, Source: src_notifications).Columns(\"page_params->transaction_id,closed\").Where(\"id=#notific_id#\").Vars(n)\r\n\tDBFind(Name: validated_transactions, Source: src_validated).Where(\"id=#n_page_params_transaction_id#\").Vars(v)\r\n\r\n\r\n    Form(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Div(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Uploading documents)\r\n                }\r\n                Div(panel-body){\r\n                    Div(list-group-item text-center){\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 text-bold m0, Body: Sender:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                DBFind(Name: members).Columns(\"member_name\").Where(\"id=#v_sender#\").Vars(rv1)\r\n                                P(Class: h5 m0, Body: Address(#v_sender#))\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 m0 text-bold, Body: Recipient:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                DBFind(Name: members).Columns(\"member_name\").Where(\"id=#v_recipient#\").Vars(rv2)\r\n                                P(Class: h5 m0, Body: Address(#v_recipient#))\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 m0 text-bold, Body: Amount:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                P(Class: h5 m0, Body: #v_amount# APL)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 m0 text-bold, Body: Financial institution:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                DBFind(Name: roles).Columns(\"role_name\").Where(\"id=#v_financial_institution_id#\").Vars(rv3)\r\n                                P(Class: h5 m0, Body: #rv3_role_name#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 m0 text-bold, Body: Delegate:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                DBFind(Name: members).Columns(\"member_name\").Where(\"id=#v_delegate#\").Vars(rv4)\r\n                                P(Class: h5 m0, Body: Address(#v_delegate#))\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 m0 text-bold, Body: Comment:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                P(Class: h5 m0, Body: #v_comment#)\r\n                            }\r\n                        }\r\n                    }\r\n                    If(And(#n_closed#==0,#v_sender#==#key_id#)){\r\n                        Div(list-group-item){\r\n                            Input(Name: input_file, Type: file)\r\n                            Input(Name: notific_id, Class: hidden, Value: #notific_id#)\r\n                            Input(Name: validated_id, Class: hidden, Value: #n_page_params_transaction_id#)\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-right){\r\n                                Button(Body: \"Load\", Class: btn btn-primary, Contract: Upload_doc, Page: notifications_single)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "page_upload_doc",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Verification of documents)\r\n    \r\n    DBFind(Name: notifications, Source: src_notifications).Columns(\"page_params->transaction_id,closed\").Where(\"id=#notific_id#\").Vars(n)\r\n\tDBFind(Name: validated_transactions, Source: src_validated).Where(\"id=#n_page_params_transaction_id#\").Vars(v)\r\n\r\n\r\n    Form(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Div(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Verification of documents)\r\n                }\r\n                Div(panel-body){\r\n                    Div(list-group-item text-center){\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 text-bold m0, Body: Sender:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                DBFind(Name: members).Columns(\"member_name\").Where(\"id=#v_sender#\").Vars(rv1)\r\n                                P(Class: h5 m0, Body: Address(#v_sender#))\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 m0 text-bold, Body: Recipient:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                DBFind(Name: members).Columns(\"member_name\").Where(\"id=#v_recipient#\").Vars(rv2)\r\n                                P(Class: h5 m0, Body: Address(#v_recipient#))\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 m0 text-bold, Body: Amount:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                P(Class: h5 m0, Body: #v_amount# APL)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 m0 text-bold, Body: Financial institution:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                DBFind(Name: roles).Columns(\"role_name\").Where(\"id=#v_financial_institution_id#\").Vars(rv3)\r\n                                P(Class: h5 m0, Body: #rv3_role_name#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 m0 text-bold, Body: Delegate:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                DBFind(Name: members).Columns(\"member_name\").Where(\"id=#v_delegate#\").Vars(rv4)\r\n                                P(Class: h5 m0, Body: Address(#v_delegate#))\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-4 mt-sm text-right){\r\n                                P(Class: h5 m0 text-bold, Body: Comment:)\r\n                            }\r\n                            Div(col-md-8 mt-sm text-left){\r\n                                P(Class: h5 m0, Body: #v_comment#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm){\r\n\t\t\t\t\t\t\t\tDBFind(Name: binaries, Source: src_binaries).Where(\"id=#v_document_id#\").Custom(doc){\r\n                                    Span(Class: text-bold, Body: \"Document\")\r\n                                }\r\n\t\t\t\t\t\t\t\tTable(src_binaries, \"=doc,=data\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n                    }\r\n                    If(And(#n_closed#==0,#v_delegate#==#key_id#)){\r\n                        Div(row){\r\n                            Div(col-md-6 mt-lg text-left){\r\n                                Input(Name: notific_id, Class: hidden, Value: #notific_id#)\r\n                                Input(Name: validated_id, Class: hidden, Value: #n_page_params_transaction_id#)\r\n                                Button(Body: Em(Class: fa fa-thumbs-down) Reject, Class: btn btn-danger, Page: transactions, Contract: Upload_Doc_Reject)\r\n                            }\r\n                            Div(col-md-6 mt-lg text-right){\r\n                                Button(Body: Em(Class: fa fa-thumbs-up) Accept, Class: btn btn-success, Page: transactions, Contract: Upload_Doc_Accept)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "page_upload_doc_check",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($editing_profile$)\r\n    Div(breadcrumb){\r\n        LinkPage($user_info$, profile_view)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $editing_profile$)\r\n    }\r\n    \r\n    DBFind(Name: members, Source: src_member).Columns(\"id,member_name\").Where(\"id=#key_id#\").Vars(prefix)\r\n\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: LangRes(editing_profile))\r\n                Div(panel-body){\r\n                    Div(row){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(For: member_name){\r\n                                Span(Body: LangRes(member_name))\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 mc-sm text-left){\r\n                            Input(Name: member_name, Value: #prefix_member_name#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: LangRes(save), Class: btn btn-primary, Contract: Profile_Edit, Page: members_list)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "profile_edit",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(content-wrapper){\r\n    SetTitle(New financial institution)\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: New financial institution)\r\n                Div(panel-body){\r\n                    Div(row){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(name))\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 mc-sm text-left){\r\n                            Input(Name: role_name, Value: \"Financial institution\")\r\n                            Input(Name: member_key, Class: hidden, Value: #v_member_id#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: Add, Class: btn btn-primary, Contract: Profile_Edit_Institution, Page: members_list)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "profile_edit_institution",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(content-wrapper){\r\n    SetTitle(New member)\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: New member)\r\n                Div(panel-body){\r\n                    Div(row){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(member_name))\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 mc-sm text-left){\r\n                            Input(Name: member_name, Value: Address(#v_member_id#), Disabled: 1)\r\n                            Input(Name: member_key, Class: hidden, Value: #v_member_id#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: Add, Class: btn btn-primary, Contract: Profile_Edit_Member, Page: members_list)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "profile_edit_member",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Include(profile_view)",
            "Name": "profile_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Include(roles_list)",
            "Name": "roles_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name,financial_institutions->max_amount,financial_institutions->daily_limit\").Where(\"id=#v_role_id#\").Vars(role)\r\n\r\n    SetTitle(#role_role_name#)\r\n    Div(breadcrumb){\r\n        LinkPage($roles$, roles_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $edit$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: #role_role_name#)\r\n                Div(panel-body){\r\n                    Div(row){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: Max amount APL)\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 mc-sm text-left){\r\n                            Input(Name: role_id, Value: #v_role_id#, Class: hidden)\r\n                            Input(Name: max_amount, Value: #role_financial_institutions_max_amount#)\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: Daily limit APL)\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 mc-sm text-left){\r\n                            Input(Name: daily_limit, Value: #role_financial_institutions_daily_limit#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: LangRes(save), Class: btn btn-primary, Contract: Poles_Options, Page: roles_list)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "roles_options",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    \r\n    If(#v_role_id# > 0){\r\n        DBFind(Name: roles, Source: src_roles).Columns(\"role_name,role_type,deleted\").Where(\"id=#v_role_id#\").Vars(prefix)\r\n        \r\n        SetTitle($role$: #prefix_role_name#)\r\n        Div(breadcrumb){\r\n            LinkPage($roles$, roles_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: #prefix_role_name#)\r\n        }\r\n        \r\n        DBFind(Name: roles_participants, Source: src_participants).Columns(\"id,member->member_id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\r\n            If(#deleted# == 0){\r\n                SetVar(Name: style_text, Value: \"text-normal\")\r\n                SetVar(Name: style_link, Value: \"text-primary\")\r\n            }.Else{\r\n                SetVar(Name: style_text, Value: \"text-muted\")\r\n                SetVar(Name: style_link, Value: \"text-muted\")\r\n            }\r\n            Span(Class: #style_text#, Body: #id#)\r\n        }.Custom(custom_member){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\r\n\t\t\t\tDiv(){\r\n\t\t\t\t\tSpan(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n\t\t\t\t\tSpan(#member.member_name#)\r\n\t\t\t\t}.Style(display:flex; align-items:center;)\r\n            }\r\n        }.Custom(custom_address){\r\n            Span(Class:text-muted h5 m0, Body: Address(#member.member_id#))\r\n        }.Custom(custom_date){\r\n            Div(Class: text-muted h5 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        }.Custom(custom_status){\r\n            If(#deleted# == 0){\r\n                Span(Class: h4 #style_text#, Body: Active)\r\n            }.Else{\r\n                Span(Class: h4 #style_text#, Body: Deleted)\r\n            }\r\n        }.Custom(actions){\r\n            Div(pull-right){\r\n                If(And(#deleted#==0,#prefix_role_type#!=3)){\r\n                    Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Roles_Unassign, Params: \"row_id=#id#\", Page: roles_view, PageParams: \"v_role_id=#v_role_id#\")\r\n                }\r\n            }\r\n        }.Where(\"role->id='#v_role_id#'\").Order(\"deleted ASC, id ASC\")\r\n        \r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Table(Source: src_participants, Columns: \"$id$=custom_id,$member$=custom_member,$address$=custom_address,Date=custom_date,$status$=custom_status\")\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "roles_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Transactions)\r\n\r\n    If(#role_id#==0){\r\n       SetVar(v_Where, \"sender=#key_id# or recipient=#key_id#\")\r\n    }\r\n    If(#role_id#==1){\r\n       SetVar(v_Where, \"sender=#key_id# or recipient=#key_id#\")\r\n    }\r\n    If(#role_id#>1){\r\n       SetVar(v_Where, \"financial_institution_id=#role_id#\")\r\n    }\r\n\r\n    DBFind(Name: validated_transactions, Source: src_validated_transactions).Columns(\"id,sender,recipient,amount,status,tr_date,financial_institution_id,delegate\").Custom(custom_id){\r\n        Span(Class: h5, Body: #id#)\r\n    }.Custom(custom_sender){\r\n        DBFind(Name: members).Columns(\"member_name\").Where(\"id=#sender#\").Vars(rv1)\r\n        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender#\"){\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#rv1_member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }.Custom(custom_recipient){\r\n\t\tIf(Or(#delegate#>0,#delegate#<0)){\r\n\t\t\tDBFind(Name: members).Columns(\"member_name\").Where(\"id=#delegate#\").Vars(rv2)\r\n\t\t\tLinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#delegate#\"){\r\n\t\t\t\tDiv(){\r\n\t\t\t\t\tSpan(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n\t\t\t\t\tSpan(#rv2_member_name#)\r\n\t\t\t\t}.Style(display:flex; align-items:center;)\r\n\t\t\t}\r\n\t\t}.Else{\r\n\t\t\tDBFind(Name: members).Columns(\"member_name\").Where(\"id=#recipient#\").Vars(rv2)\r\n\t\t\tLinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#recipient#\"){\r\n\t\t\t\tDiv(){\r\n\t\t\t\t\tSpan(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n\t\t\t\t\tSpan(#rv2_member_name#)\r\n\t\t\t\t}.Style(display:flex; align-items:center;)\r\n\t\t\t}\r\n\t\t}\r\n    }.Custom(custom_amount){\r\n        Span(Class: h4 text-bold, Body: #amount# APL)\r\n    }.Custom(custom_date){\r\n        Span(Class: h4, Body: DateTime(DateTime: #tr_date#, Format: \"YYYY-MM-DD HH:MI\"))\r\n    }.Custom(custom_arr){\r\n        Span(Em(Class: text-muted fa fa-arrow-right fa-2x))\r\n    }.Custom(custom_status){\r\n        If(#status#==-1){\r\n            Span(Class: h4 text-danger, Body: Rejected)\r\n        }\r\n        If(#status#==1){\r\n            Span(Class: h4 text-warning, Body: Checking)\r\n        }\r\n        If(#status#==2){\r\n            Span(Class: h4 text-success, Body: Accepted)\r\n        }\r\n        If(#status#==3){\r\n            Span(Class: h4 text-danger, Body: Rollback)\r\n        }\r\n        If(#status#==4){\r\n            Span(Class: h4 text-success, Body: Confirmation)\r\n        }\r\n        If(#status#==5){\r\n            Span(Class: h4 text-danger, Body: Member deleted)\r\n        }\r\n    }.Where(#v_Where#).Order(\"id desc\").Limit(10)\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_validated_transactions, Columns: \"$id$=custom_id,$sender$=custom_sender,=custom_arr,$recipient$=custom_recipient,Date=custom_date,$amount$=custom_amount,$status$=custom_status\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}",
            "Name": "transactions",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "contract Member_Blocking {\r\n    data {\r\n        member_id int\r\n    }\r\n    conditions {\r\n        $keys_map = DBFind(\"keys\").Where(\"id = $\", $member_id).Row()\r\n    }\r\n    action {\r\n        DBUpdate(\"keys\", $member_id, \"blocked\", 1)\r\n    }\r\n}",
            "Name": "Member_Blocking",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Member_Removing {\r\n    data {\r\n        member_id int\r\n    }\r\n    conditions {\r\n        $member_map = DBFind(\"keys\").Where(\"id = $\", $member_id).Row()\r\n    }\r\n    action {\r\n        var amount money\r\n        amount = Money($member_map[\"amount\"])\r\n        DBUpdate(\"keys\", $key_id, \"+amount\", amount)\r\n        DBUpdate(\"keys\", $member_id, \"amount,deleted\", 0, 1)\r\n\r\n        DBInsert(\"validated_transactions\", \"sender,recipient,delegate,amount,comment,document_id,financial_institution_id,status,timestamp tr_date\",\r\n            $member_id, $key_id, $key_id, amount, \"Member deleted\", 0, 0, 5, $block_time)\r\n    }\r\n}",
            "Name": "Member_Removing",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Member_UnBlocking {\r\n    data {\r\n        member_id int\r\n    }\r\n    conditions {\r\n        $keys_map = DBFind(\"keys\").Where(\"id = $\", $member_id).Row()\r\n    }\r\n    action {\r\n        DBUpdate(\"keys\", $member_id, \"blocked\", 0)\r\n    }\r\n}",
            "Name": "Member_UnBlocking",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Notifications_Single_Close {\r\n    data {\r\n        notific_id int\r\n    }\r\n\r\n    conditions {\r\n        $processing_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n        if !$processing_map {\r\n            warning \"Member not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var processing_info map\r\n        processing_info[\"member_id\"] = $processing_map[\"id\"]\r\n        processing_info[\"member_name\"] = $processing_map[\"member_name\"]\r\n        processing_info[\"image_id\"] = $processing_map[\"image_id\"]\r\n\r\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_start_processing,processing_info,timestamp date_closed,closed\",\r\n            $block_time, processing_info, $block_time, 1)\r\n    }\r\n}",
            "Name": "Notifications_Single_Close",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Notifications_Single_Send {\r\n    data {\r\n        member_id int\r\n        sender int\r\n        icon_name string\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n        params_map map\r\n    }\r\n\r\n    conditions {\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\r\n        if !$member_map {\r\n            warning \"Member not found\"\r\n        }\r\n\r\n        if $sender == 1 {\r\n            $sender_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n            if !$sender_map {\r\n                warning \"Member not found\"\r\n            }\r\n        }\r\n        if $sender == 2 {\r\n            // !!! need to fix role_id to the global variable !!!!\r\n            $sender_map = DBFind(\"roles\").Where(\"id = $\", 1).Row()\r\n            if !$sender_map {\r\n                warning \"Member not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var recipient map\r\n        recipient[\"member_id\"] = $member_map[\"id\"]\r\n        recipient[\"member_name\"] = $member_map[\"member_name\"]\r\n        recipient[\"image_id\"] = $member_map[\"image_id\"]\r\n\r\n        var sender map\r\n        if $sender == 1 {\r\n            sender[\"type\"] = 1\r\n            sender[\"member_id\"] = $sender_map[\"id\"]\r\n            sender[\"member_name\"] = $sender_map[\"member_name\"]\r\n            sender[\"image_id\"] = $sender_map[\"image_id\"]\r\n        }\r\n        if $sender == 2 {\r\n            sender[\"type\"] = 2\r\n            sender[\"role_id\"] = $sender_map[\"id\"]\r\n            sender[\"role_name\"] = $sender_map[\"role_name\"]\r\n            sender[\"image_id\"] = $sender_map[\"image_id\"]\r\n        }\r\n\r\n        var notification map\r\n        notification[\"header\"] = $text_header\r\n        notification[\"type\"] = 1\r\n        notification[\"icon\"] = $icon_name\r\n        notification[\"body\"] = $text_body\r\n\r\n        DBInsert(\"notifications\", \"recipient,sender,notification,page_name,page_params,timestamp date_created\",\r\n            recipient, sender, notification, $page_name, $params_map, $block_time)\r\n    }\r\n}",
            "Name": "Notifications_Single_Send",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Poles_Options {\r\n    data {\r\n        role_id int\r\n        max_amount money\r\n\t\tdaily_limit money\r\n    }\r\n    \r\n    conditions {\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"roles\", $role_id, \"financial_institutions->max_amount,financial_institutions->daily_limit\", $max_amount, $daily_limit)\r\n    }\r\n}",
            "Name": "Poles_Options",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Profile_Edit {\r\n    data {\r\n        member_name string\r\n    }\r\n\r\n    conditions {\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n    }\r\n\r\n    action {\r\n        if $member_map {\r\n            DBUpdate(\"members\", $key_id, \"member_name\", $member_name)\r\n        }\r\n\r\n        var participants array\r\n        participants = DBFind(\"roles_participants\").Columns(\"id\").Where(\"member->member_id = $ and deleted=0\", $key_id)\r\n        \r\n        var i int\r\n        while i < Len(participants) {\r\n            var p map\r\n            p = participants[i]\r\n            DBUpdate(\"roles_participants\", Int(p[\"id\"]), \"member->member_name\", $member_name)\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Name": "Profile_Edit",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Roles_Create {\r\n    data {\r\n        role_name string\r\n        role_type int\r\n    }\r\n    \r\n    conditions {\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n        if !$member_map {\r\n            warning \"You are not a member of the ecosystem\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var creator map\r\n        creator[\"member_id\"] = $member_map[\"id\"]\r\n        creator[\"member_name\"] = $member_map[\"member_name\"]\r\n        creator[\"image_id\"] = $member_map[\"image_id\"]\r\n\r\n        $rid = DBInsert(\"roles\", \"role_name,role_type,creator,timestamp date_created\", $role_name, $role_type, creator, $block_time)\r\n\r\n        // insert role\r\n        if $role_type == 4 {\r\n            var financial_institutions map\r\n            financial_institutions[\"max_amount\"] = \"100000000000000000000\"\r\n            financial_institutions[\"daily_limit\"] = \"1000000000000000000000\"\r\n            DBUpdate(\"roles\", $rid, \"financial_institutions\", financial_institutions)\r\n        }\r\n\r\n        // result\r\n        $result = $rid\r\n    }\r\n}",
            "Name": "Roles_Create",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Profile_Edit_Member {\r\n    data {\r\n        member_key int\r\n    }\r\n\r\n    conditions {\r\n        var app_name string\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_key).Row()\r\n\r\n        $role_fin_inst = 0\r\n        var fin_inst_map map\r\n        fin_inst_map = DBFind(\"roles_participants\").Columns(\"role->id\").Where(\"role->type='4' and member->member_id=$ and deleted=0\", $key_id).Row()\r\n        if fin_inst_map {\r\n            $role_fin_inst = Int(fin_inst_map[\"role.id\"])\r\n        }\r\n    }\r\n\r\n    action {\r\n        if !$member_map {\r\n            DBInsert(\"members\", \"id,member_name,fin_inst\", $member_key, IdToAddress($member_key), $role_fin_inst)\r\n            DBUpdate(\"keys\", $member_key, \"multi,amount,fin_inst\", 1,0, $role_fin_inst)\r\n        }\r\n    }\r\n}",
            "Name": "Profile_Edit_Member",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Reject_Request {\r\n    data {\r\n        member_id int\r\n    }\r\n\r\n    conditions {\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"keys\", $member_id, \"multi\", -1)\r\n    }\r\n}",
            "Name": "Reject_Request",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Roles_Assign {\r\n    data {\r\n        rid int\r\n        member_id int\r\n    }\r\n    \r\n    conditions {\r\n        $role_map = DBFind(\"roles\").Columns(\"id,deleted,role_type,role_name,image_id,creator->member_id\").Where(\"id = $\", $rid).Row()\r\n        if !$role_map {\r\n            warning \"Role not found\"\r\n        }\r\n        \r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\r\n        if !$member_map {\r\n            warning \"Member not found\"\r\n        }\r\n        \r\n        $appointer_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n        if !$appointer_map {\r\n            warning \"Appointer not found\"\r\n        }\r\n        \r\n        if $role_map[\"deleted\"] == 1 {\r\n            warning \"This role has been deleted. The appointment of members is impossible\"\r\n        }\r\n        \r\n        var specialRules map\r\n        specialRules[\"sysparams_AcceptValidator\"] = \"Validator\"\r\n        specialRules[\"sysparams_DelegateRefresh\"] = \"Delegate\"\r\n        specialRules[\"sysparams_CandidateValidatorRequest\"] = \"Candidate for validators\"\r\n        specialRules[\"voting_TemplateRun\"] = \"Investor with voting rights\"\r\n        \r\n        if !(specialRules[$original_contract] == $role_map[\"role_name\"]) {\r\n            if $role_map[\"role_type\"] != 1 && $role_map[\"role_type\"] != 4 {\r\n                warning \"This role is not assignable. The appointment of members is impossible\"\r\n            }\r\n            // check creator of the role\r\n            if $role_map[\"creator.member_id\"] != $key_id {\r\n                warning \"Sorry, you are not the creator of this role. The appointment of members is impossible\"\r\n            }\r\n        }\r\n        \r\n        $assign_id = DBFind(\"roles_participants\").Where(\"role->id=$ and member->member_id=$ and deleted=0\", $rid, $member_id).One(\"id\")\r\n        if $assign_id {\r\n            warning \"This member has already been added\"\r\n        }\r\n        \r\n    }\r\n    \r\n    action {\r\n        var role map\r\n        role[\"id\"] = $role_map[\"id\"]\r\n        role[\"type\"] = $role_map[\"role_type\"]\r\n        role[\"name\"] = $role_map[\"role_name\"]\r\n        role[\"image_id\"] = $role_map[\"image_id\"]\r\n        \r\n        var member map\r\n        member[\"member_id\"] = $member_map[\"id\"]\r\n        member[\"member_name\"] = $member_map[\"member_name\"]\r\n        member[\"image_id\"] = $member_map[\"image_id\"]\r\n        \r\n        var appointed map\r\n        appointed[\"member_id\"] = $appointer_map[\"id\"]\r\n        appointed[\"member_name\"] = $appointer_map[\"member_name\"]\r\n        appointed[\"image_id\"] = $appointer_map[\"image_id\"]\r\n        \r\n        DBInsert(\"roles_participants\", \"role,member,appointed,timestamp date_created\", role, member, appointed, $block_time)\r\n    }\r\n}",
            "Name": "Roles_Assign",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Profile_Edit_Institution {\r\n    data {\r\n        role_name string\r\n        member_key int\r\n    }\r\n\r\n    conditions {\r\n        var app_name string\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_key).Row()\r\n    }\r\n\r\n    action {\r\n        if !$member_map {\r\n            DBInsert(\"members\", \"id,member_name\", $member_key, IdToAddress($member_key))\r\n            DBUpdate(\"keys\", $member_key, \"multi\", 1)\r\n            \r\n            $rid = Roles_Create(\"role_name,role_type\", $role_name, 4)\r\n            Roles_Assign(\"rid,member_id\", $rid, $member_key)\r\n        }\r\n    }\r\n}",
            "Name": "Profile_Edit_Institution",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Roles_DellAll {\r\n    data {}\r\n    conditions {\r\n        $new_role_name = \"Apla Consensus asbl\"\r\n    }\r\n\r\n    action {\r\n\r\n        DBInsert(\"system_parameters\", \"name,value,conditions\", \"fuel_rate\", `[[\"1\",\"1000\"]]`, \"true\")\r\n        \r\n\r\n\r\n        //DBUpdate(\"validated_transactions\", 3, \"tr_date\", \"2018-05-01T00:41:38Z\")\r\n\r\n        /*\r\n        DBUpdate(\"validated_transactions\", 10, \"deleted\", 1)\r\n        DBUpdate(\"validated_transactions\", 11, \"deleted\", 1)\r\n        DBUpdate(\"validated_transactions\", 12, \"deleted\", 1)\r\n        DBUpdate(\"validated_transactions\", 7, \"deleted\", 1)\r\n        DBUpdate(\"validated_transactions\", 8, \"deleted\", 1)\r\n        DBUpdate(\"validated_transactions\", 9, \"deleted\", 1)\r\n        */\r\n\r\n\r\n\r\n\r\n        /*\r\n        DBUpdate(\"roles\", 1, \"role_name\", $new_role_name)\r\n\r\n        var roles array\r\n        roles = DBFind(\"roles\").Columns(\"id\").Where(\"id > $\", 1)\r\n        \r\n        var i int\r\n        while i < Len(roles) {\r\n            var p map\r\n            p = roles[i]\r\n            DBUpdate(\"roles\", Int(p[\"id\"]), \"deleted\", 1)\r\n            i = i + 1\r\n        }\r\n\r\n        var part array\r\n        part = DBFind(\"roles_participants\").Columns(\"id\").Where(\"role->id = $\", 1)\r\n        \r\n        var j int\r\n        while j < Len(part) {\r\n            var p map\r\n            p = part[j]\r\n            DBUpdate(\"roles_participants\", Int(p[\"id\"]), \"role->name\", $new_role_name)\r\n            j = j + 1\r\n        }\r\n\r\n\r\n        var part2 array\r\n        part2 = DBFind(\"roles_participants\").Columns(\"id\").Where(\"role->id > $\", 1)\r\n        \r\n        var j int\r\n        while j < Len(part2) {\r\n            var p map\r\n            p = part2[j]\r\n            DBUpdate(\"roles_participants\", Int(p[\"id\"]), \"deleted\", 1)\r\n            j = j + 1\r\n        }\r\n        */\r\n    }\r\n}",
            "Name": "Roles_DellAll",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensTransfer {\r\n\tdata {\r\n\t\tRecipient string\r\n\t\tAmount money\r\n        Status int \"optional\"\r\n\t}\r\n\r\n    func GetDailyLimit(member_id int) money {\r\n\t\tvar s money\r\n\r\n\t\tvar validated_transactions array\r\n\t\tvalidated_transactions = DBFind(\"validated_transactions\").Columns(\"amount\").Where(\"current_date = date(tr_date) and sender=?\", member_id)\r\n\t\tvar i int\r\n\t\twhile i < Len(validated_transactions) {\r\n\t\t\tvar p map\r\n\t\t\tp = validated_transactions[i]\r\n\t\t\ts = s + Money(p[\"amount\"])\r\n\t\t\ti = i + 1\r\n\t\t}\r\n\r\n        return s\r\n    }\r\n\r\n\r\n\tconditions {\r\n\t\t$recipient = AddressToId($Recipient)\r\n\t\tif $recipient == 0 {\r\n\t\t\terror Sprintf(\"Recipient %s is invalid\", $Recipient)\r\n\t\t}\r\n\r\n\t\tif $Amount <= 0 {\r\n\t\t\terror \"Amount must be greater then zero\"\r\n\t\t}\r\n\t\tvar row map\r\n\t\trow = DBFind(\"keys\").Columns(\"amount\").WhereId($key_id).Row()\r\n\r\n        var total money\r\n\t\ttotal = Money(row[\"amount\"])\r\n\r\n\t\tif $Amount  >= total {\r\n\t\t\terror Sprintf(\"Money is not enough %v < %v\",total, $Amount )\r\n\t\t}\r\n\t}\r\n\taction {\r\n\t\tvar row map\r\n\t\trow = DBFind(\"keys\").Columns(\"fin_inst\").WhereId($key_id).Row()\r\n        var fin_inst_id int\r\n        fin_inst_id = Int(row[\"fin_inst\"])\r\n\r\n\t\tif (fin_inst_id > 0){\r\n\t\t\tvar role map\r\n\t\t\trole = DBFind(\"roles\").Columns(\"financial_institutions->max_amount,financial_institutions->daily_limit\").WhereId(fin_inst_id).Row()\r\n\r\n\t\t\tvar max_amount,daily_limit money\r\n\t\t\tmax_amount = Money(role[\"financial_institutions.max_amount\"])\r\n\t\t\tdaily_limit = Money(role[\"financial_institutions.daily_limit\"])\r\n\r\n\t\t\tvar myDailyLimit money\r\n\t\t\tmyDailyLimit = GetDailyLimit($key_id)\r\n\r\n\t\t\tif ( ($Amount > max_amount) || (myDailyLimit > daily_limit) ) {\r\n\t\t\t\t// get delegate for financial institution\r\n\t\t\t\tvar delegate_map map \r\n\t\t\t\tdelegate_map = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id=$ and deleted=0\", fin_inst_id).Row()\r\n\r\n\t\t\t\tvar delegate int\r\n\t\t\t\tdelegate = Int(delegate_map[\"member.member_id\"])\r\n\t\t\t\t//warning delegate \r\n\r\n\t\t\t\tDBUpdate(\"keys\", $key_id,\"-amount\", $Amount )\r\n\t\t\t\tDBUpdate(\"keys\", delegate,\"+amount\", $Amount )\r\n\r\n\t\t\t\tvar transaction_id int\r\n\t\t\t\ttransaction_id = DBInsert(\"validated_transactions\", \"sender,recipient,delegate,amount,comment,document_id,financial_institution_id,status,timestamp tr_date\",\r\n\t\t\t\t\t$key_id, $Recipient, delegate, $Amount, \"Checking the financial institution\", 0, fin_inst_id, 1, $block_time)\r\n\r\n\t\t\t\tvar params_map map\r\n\t\t\t\tparams_map[\"transaction_id\"] = transaction_id\r\n\r\n\t\t\t\tNotifications_Single_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\",\r\n\t\t\t\t\t$key_id, 1, \"fa-check\", \"Sending tokens\", \"Checking the financial institution\", \"page_upload_doc\", params_map)   \t\t\r\n\t\t\t} else {\r\n                DBUpdate(\"keys\", $key_id,\"-amount\", $Amount )\r\n                DBUpdate(\"keys\", $recipient,\"+amount\", $Amount )\r\n\r\n                DBInsert(\"validated_transactions\", \"sender,recipient,amount,comment,document_id,financial_institution_id,status,timestamp tr_date\",\r\n                    $key_id, $recipient, $Amount, \"\", 0, fin_inst_id, 2, $block_time)\r\n            }\r\n\t\t} else {\r\n\t\t\tDBUpdate(\"keys\", $key_id,\"-amount\", $Amount )\r\n\t\t\tDBUpdate(\"keys\", $recipient,\"+amount\", $Amount )\r\n\r\n            if $Status == 0 {\r\n                $Status = 2\r\n            }\r\n\t\t\tDBInsert(\"validated_transactions\", \"sender,recipient,amount,comment,document_id,financial_institution_id,status,timestamp tr_date\",\r\n\t\t\t\t$key_id, $recipient, $Amount, \"\", 0, 0, $Status, $block_time)\r\n\t\t}\r\n\t}\r\n}",
            "Name": "TokensTransfer",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Upload_Doc_Accept {\r\n    data {\r\n        notific_id int\r\n        validated_id int\r\n    }\r\n\r\n    conditions {\r\n\t\t$validated_map = DBFind(\"validated_transactions\").Where(\"id = ?\", $validated_id).Row()\r\n\t\tif Int($validated_map[\"delegate\"]) != $key_id {\r\n\t\t\twarning \"You are not a delegate\"\r\n\t\t}\r\n    }\r\n\r\n    action {\r\n\t\tTokensTransfer(\"Recipient,Amount,Status\", IdToAddress(Int($validated_map[\"recipient\"])), Money($validated_map[\"amount\"]), 4)\r\n        DBUpdate(\"validated_transactions\", $validated_id, \"status\", 2)\r\n\t\tNotifications_Single_Close(\"notific_id\", $notific_id)\r\n    }\r\n}",
            "Name": "Upload_Doc_Accept",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Upload_Doc_Reject {\r\n    data {\r\n        notific_id int\r\n        validated_id int\r\n    }\r\n\r\n    conditions {\r\n\t\t$validated_map = DBFind(\"validated_transactions\").Where(\"id = ?\", $validated_id).Row()\r\n\t\tif Int($validated_map[\"delegate\"]) != $key_id {\r\n\t\t\twarning \"You are not a delegate\"\r\n\t\t}\r\n    }\r\n\r\n    action {\r\n\t\tTokensTransfer(\"Recipient,Amount,Status\", IdToAddress(Int($validated_map[\"sender\"])), Money($validated_map[\"amount\"]), 3)\r\n        DBUpdate(\"validated_transactions\", $validated_id, \"status\", -1)\r\n\t\tNotifications_Single_Close(\"notific_id\", $notific_id)\r\n    }\r\n}",
            "Name": "Upload_Doc_Reject",
            "Type": "contracts"
        },
        {
            "Conditions": "true",
            "Value": "contract Upload_doc {\r\n    data {\r\n        notific_id int\r\n        validated_id int\r\n\t\tinput_file bytes \"file\"\r\n    }\r\n\r\n    conditions {\r\n    }\r\n\t\r\n    action {\r\n\t\t$ApplicationId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name = ?\", \"CSSF\").One(\"id\"))\r\n\t\t$Name = \"Validated \" + Str($validated_id)\r\n\t\t$file = UploadBinary(\"ApplicationId,Name,Data\", $ApplicationId, $Name, $input_file)\r\n\t\tDBUpdate(\"validated_transactions\", $validated_id, \"document_id\", $file)\r\n\r\n\t\tvar validated_map map\r\n\t\tvalidated_map = DBFind(\"validated_transactions\").Where(\"id = ?\", $validated_id).Row()\r\n\t\tvar params_map map\r\n\t\tparams_map[\"transaction_id\"] = $validated_id\r\n\t\tNotifications_Single_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\",\r\n\t\t\tInt(validated_map[\"delegate\"]), 1, \"fa-check\", \"Sending tokens\", \"Checking the financial institution\", \"page_upload_doc_check\", params_map)  \t\t\r\n\r\n\t\tNotifications_Single_Close(\"notific_id\", $notific_id)\r\n    }\r\n}",
            "Name": "Upload_doc",
            "Type": "contracts"
        }
    ]
}