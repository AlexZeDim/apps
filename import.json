{
    "name": "System",
    "data": [
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:\"Import\", Page:import_upload, Icon:\"icon-cloud-upload\")",
            "Type": "menu"
        },
        {
            "Name": "import_app",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(buffer_data).Columns(\"id,value->name,value->data\").Where({key:import, member_id:#key_id#}).Vars(import)\r\n    DBFind(buffer_data).Columns(\"value->app_name,value->pages,value->pages_count,value->blocks,value->blocks_count,value->menu,value->menu_count,value->parameters,value->parameters_count,value->languages,value->languages_count,value->contracts,value->contracts_count,value->tables,value->tables_count\").Where({key:import_info,member_id:#key_id#}).Vars(info)\r\n\r\n    SetTitle(\"Import - #info_value_app_name#\")\r\n    Data(data_info, \"DataName,DataCount,DataInfo\"){\r\n        Pages,\"#info_value_pages_count#\",\"#info_value_pages#\"\r\n        Blocks,\"#info_value_blocks_count#\",\"#info_value_blocks#\"\r\n        Menu,\"#info_value_menu_count#\",\"#info_value_menu#\"\r\n        Parameters,\"#info_value_parameters_count#\",\"#info_value_parameters#\"\r\n        Language resources,\"#info_value_languages_count#\",\"#info_value_languages#\"\r\n        Contracts,\"#info_value_contracts_count#\",\"#info_value_contracts#\"\r\n        Tables,\"#info_value_tables_count#\",\"#info_value_tables#\"\r\n    }\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"Your data that you can import\")\r\n    }\r\n\r\n    Div(panel panel-primary){\r\n        ForList(data_info){\r\n            Div(list-group-item){\r\n                Div(row){\r\n                    Div(col-md-10 mc-sm text-left){\r\n                        Span(Class: text-bold, Body: \"#DataName#\")\r\n                    }\r\n                    Div(col-md-2 mc-sm text-right){\r\n                        If(#DataCount# > 0){\r\n                            Span(Class: text-bold, Body: \"(#DataCount#)\")\r\n                        }.Else{\r\n                            Span(Class: text-muted, Body: \"(0)\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-12 mc-sm text-left){\r\n                        If(#DataCount# > 0){\r\n                            Span(Class: h6, Body: \"#DataInfo#\")\r\n                        }.Else{\r\n                            Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#import_id# > 0){\r\n            Div(list-group-item text-right){\r\n                Button(Body: \"Import\", Class: btn btn-primary, Page: apps_list).CompositeContract(@1Import, \"#import_value_data#\")\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "import_upload",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(\"Import\")\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"Select payload that you want to import\")\r\n    }\r\n    Form(panel panel-primary){\r\n        Div(list-group-item){\r\n            Input(Name: input_file, Type: file)\r\n        }\r\n        Div(list-group-item text-right){\r\n            Button(Body: \"Load\", Class: btn btn-primary, Contract: @1ImportUpload, Page: import_app)\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "Import",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import {\r\n    data {\r\n        Data string\r\n    }\r\n    func decodeGlobals(s string) string {\r\n        var globs array i lenGlobs int r map prefix from to string\r\n        prefix = \"import_\"\r\n        globs = [\"ecosystem_id\", \"key_id\", \"isMobile\", \"role_id\", \"ecosystem_name\", \"app_id\", \"info_value_pages_count\", \"info_value_pages\", \"info_value_blocks_count\", \"info_value_blocks\",\"info_value_menu_count\", \"info_value_menu\", \"info_value_parameters_count\", \"info_value_parameters\",\"info_value_languages_count\", \"info_value_languages\", \"info_value_contracts_count\", \"info_value_contracts\", \"info_value_tables_count\", \"info_value_tables\", \"DataName\", \"DataCount\", \"DataInfo\"]\r\n        lenGlobs = Len(globs)\r\n        while i < lenGlobs{\r\n            r = globs[i]\r\n            from = ToUpper(\"#\" + prefix + r + \"#\")\r\n            to = \"#\" + r + \"#\"\r\n            s = Replace(s, from, to)\r\n            i = i + 1\r\n        }\r\n        return s\r\n    }\r\n\r\n    conditions {\r\n        $Data = decodeGlobals($Data)\r\n        $ApplicationId = 0\r\n        var app_map map\r\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where({key: \"import_info\", member_id: $key_id}).Row()\r\n\r\n        if app_map{\r\n            var app_id int ival string\r\n            ival = Str(app_map[\"value.app_name\"])\r\n            app_id = DBFind(\"applications\").Columns(\"id\").Where({name: ival}).One(\"id\")\r\n            if app_id {\r\n                $ApplicationId = Int(app_id)\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var editors, creators map\r\n        editors[\"pages\"] = \"EditPage\"\r\n        editors[\"blocks\"] = \"EditBlock\"\r\n        editors[\"menu\"] = \"EditMenu\"\r\n        editors[\"app_params\"] = \"EditAppParam\"\r\n        editors[\"languages\"] = \"EditLang\"\r\n        editors[\"contracts\"] = \"EditContract\"\r\n        editors[\"tables\"] = \"\" // nothing\r\n\r\n        creators[\"pages\"] = \"NewPage\"\r\n        creators[\"blocks\"] = \"NewBlock\"\r\n        creators[\"menu\"] = \"NewMenu\"\r\n        creators[\"app_params\"] = \"NewAppParam\"\r\n        creators[\"languages\"] = \"NewLang\"\r\n        creators[\"contracts\"] = \"NewContract\"\r\n        creators[\"tables\"] = \"NewTable\"\r\n\r\n        var dataImport array\r\n        dataImport = JSONDecode($Data)\r\n        var i int\r\n        while i < Len(dataImport){\r\n            var item cdata map type name string\r\n            cdata = dataImport[i]\r\n            if cdata {\r\n                cdata[\"ApplicationId\"] = $ApplicationId\r\n                type = cdata[\"Type\"]\r\n                name = cdata[\"Name\"]\r\n                // Println(Sprintf(\"import %v: %v\", type, cdata[\"Name\"]))\r\n\r\n                item = DBFind(type).Where({name: name}).Row()\r\n                var contractName string\r\n                if item {\r\n                    contractName = editors[type]\r\n                    cdata[\"Id\"] = Int(item[\"id\"])\r\n                    if type == \"contracts\" {\r\n                        if item[\"conditions\"] == \"false\"{\r\n                            // ignore updating impossibled\r\n                            contractName = \"\"\r\n                        }\r\n                    } elif type == \"menu\"{\r\n                        var menu menuItem string\r\n                        menu = Replace(item[\"value\"], \" \", \"\")\r\n                        menu = Replace(menu, \"\\n\", \"\")\r\n                        menu = Replace(menu, \"\\r\", \"\")\r\n                        menuItem = Replace(cdata[\"Value\"], \" \", \"\")\r\n                        menuItem = Replace(menuItem, \"\\n\", \"\")\r\n                        menuItem = Replace(menuItem, \"\\r\", \"\")\r\n                        if Contains(menu, menuItem) {\r\n                            // ignore repeated\r\n                            contractName = \"\"\r\n                        }else{\r\n                            cdata[\"Value\"] = item[\"value\"] + \"\\n\" + cdata[\"Value\"]\r\n                        }\r\n                    }\r\n                } else {\r\n                    contractName = creators[type]\r\n                }\r\n\r\n                if contractName != \"\"{\r\n                    CallContract(contractName, cdata)\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n        // Println(Sprintf(\"> time: %v\", $time))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ImportUpload",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ImportUpload {\r\n    data {\r\n        input_file string \"file\"\r\n    }\r\n    func encodeGlobals(s string) string {\r\n        var globs array i lenGlobs int r map prefix from to string\r\n        prefix = \"import_\"\r\n        globs = [\"ecosystem_id\", \"key_id\", \"isMobile\", \"role_id\", \"ecosystem_name\", \"app_id\", \"info_value_pages_count\", \"info_value_pages\", \"info_value_blocks_count\", \"info_value_blocks\",\"info_value_menu_count\", \"info_value_menu\", \"info_value_parameters_count\", \"info_value_parameters\",\"info_value_languages_count\", \"info_value_languages\", \"info_value_contracts_count\", \"info_value_contracts\", \"info_value_tables_count\", \"info_value_tables\", \"DataName\", \"DataCount\", \"DataInfo\"]\r\n\r\n        lenGlobs = Len(globs)\r\n        while i < lenGlobs{\r\n            r = globs[i]\r\n            from = \"#\" + r + \"#\"\r\n            to = ToUpper(\"#\" + prefix + r + \"#\")\r\n            s = Replace(s, from, to)\r\n            i = i + 1\r\n        }\r\n        return s\r\n    }\r\n\r\n    conditions {\r\n        $input_file = BytesToString($input_file)\r\n        $input_file = encodeGlobals($input_file)\r\n        $limit = 10 // data piece size of import\r\n\r\n    // init buffer_data, cleaning old buffer\r\n        var initJson map\r\n        $import_id = DBFind(\"buffer_data\").Where({member_id:$key_id, key: \"import\"}).One(\"id\")\r\n        if $import_id {\r\n            $import_id = Int($import_id)\r\n            DBUpdate(\"buffer_data\", $import_id, {\"value\": initJson})\r\n        } else {\r\n            $import_id = DBInsert(\"buffer_data\", {\"member_id\":$key_id,\"key\": \"import\",\r\n            \"value\": initJson})\r\n        }\r\n\r\n        $info_id = DBFind(\"buffer_data\").Where({member_id:$key_id, key: \"import_info\"}).One(\"id\")\r\n        if $info_id {\r\n            $info_id = Int($info_id)\r\n            DBUpdate(\"buffer_data\", $info_id, {\"value\": initJson})\r\n        } else {\r\n            $info_id = DBInsert(\"buffer_data\", {\"member_id\":$key_id,\"key\": \"import_info\",\r\n            \"value\": initJson})\r\n        }\r\n    }\r\n\r\n    action {\r\n        var input map arrData array\r\n        input = JSONDecode($input_file)\r\n        arrData = input[\"data\"]\r\n\r\n        var pages_arr blocks_arr menu_arr parameters_arr languages_arr contracts_arr tables_arr array\r\n\r\n    // import info\r\n        var i lenArrData int item map\r\n        lenArrData = Len(arrData)\r\n        while i < lenArrData{\r\n            item = arrData[i]\r\n\r\n            if item[\"Type\"] == \"pages\" {\r\n                pages_arr = Append(pages_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"blocks\" {\r\n                blocks_arr = Append(blocks_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"menu\" {\r\n                menu_arr = Append(menu_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"app_params\" {\r\n                parameters_arr = Append(parameters_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"languages\" {\r\n                languages_arr = Append(languages_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"contracts\" {\r\n                contracts_arr = Append(contracts_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"tables\" {\r\n                tables_arr = Append(tables_arr, item[\"Name\"])\r\n            }\r\n\r\n            i = i + 1\r\n        }\r\n\r\n        var inf map\r\n        inf[\"app_name\"] = input[\"name\"]\r\n        inf[\"pages\"] = Join(pages_arr, \", \")\r\n        inf[\"pages_count\"] = Len(pages_arr)\r\n        inf[\"blocks\"] = Join(blocks_arr, \", \")\r\n        inf[\"blocks_count\"] = Len(blocks_arr)\r\n        inf[\"menu\"] = Join(menu_arr, \", \")\r\n        inf[\"menu_count\"] = Len(menu_arr)\r\n        inf[\"parameters\"] = Join(parameters_arr, \", \")\r\n        inf[\"parameters_count\"] = Len(parameters_arr)\r\n        inf[\"languages\"] = Join(languages_arr, \", \")\r\n        inf[\"languages_count\"] = Len(languages_arr)\r\n        inf[\"contracts\"] = Join(contracts_arr, \", \")\r\n        inf[\"contracts_count\"] = Len(contracts_arr)\r\n        inf[\"tables\"] = Join(tables_arr, \", \")\r\n        inf[\"tables_count\"] = Len(tables_arr)\r\n\r\n        if 0 == inf[\"pages_count\"] + inf[\"blocks_count\"] + inf[\"menu_count\"] + inf[\"parameters_count\"] + inf[\"languages_count\"] + inf[\"contracts_count\"] + inf[\"tables_count\"] {\r\n            warning \"Invalid or empty import file\"\r\n        }\r\n\r\n    // import data\r\n    // the contracts is imported in one piece, the rest is cut under the $limit, a crutch to bypass the error when you import dependent contracts in different pieces\r\n        var sliced contracts array\r\n        i = 0\r\n        while i <lenArrData{\r\n            var items array l int item map\r\n            while l < $limit && (i + l < lenArrData) {\r\n                item = arrData[i + l]\r\n                if item[\"Type\"] == \"contracts\" {\r\n                    contracts = Append(contracts, item)\r\n                }else{\r\n                    items = Append(items, item)\r\n                }\r\n                l = l + 1\r\n            }\r\n            var batch map\r\n            batch[\"Data\"] = JSONEncode(items)\r\n            sliced = Append(sliced, batch)\r\n            i = i + $limit\r\n        }\r\n        if Len(contracts) > 0{\r\n            var batch map\r\n            batch[\"Data\"] = JSONEncode(contracts)\r\n            sliced = Append(sliced, batch)\r\n        }\r\n        input[\"data\"] = sliced\r\n\r\n    // storing\r\n        DBUpdate(\"buffer_data\", $import_id, {\"value\": input})\r\n        DBUpdate(\"buffer_data\", $info_id, {\"value\": inf})\r\n\r\n        var name string\r\n        name = Str(input[\"name\"])\r\n        if !DBFind(\"applications\").Columns(\"id\").Where({name:name}).One(\"id\") {\r\n            DBInsert(\"applications\", {\"name\": name, \"conditions\": \"true\"})\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        }
    ]
}