{
    "name": "System",
    "data": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:\"Import\", Page:import_upload, Icon:\"icon-cloud-upload\")",
            "Name": "admin_menu",
            "Type": "menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(buffer_data, src_buffer).Columns(\"id,value->name,value->data\").Where({key:import,member_id:#key_id#}).Vars(hash00001)\r\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_name,value->pages,value->pages_count,value->blocks,value->blocks_count,value->menu,value->menu_count,value->parameters,value->parameters_count,value->languages,value->languages_count,value->contracts,value->contracts_count,value->tables,value->tables_count\").Where({key:import_info,member_id:#key_id#}).Vars(hash00002)\r\n\r\n    SetTitle(\"Import - #hash00002_value_app_name#\")\r\n    Data(data_info, \"hash00003_name,hash00003_count,hash00003_info\"){\r\n        Pages,\"#hash00002_value_pages_count#\",\"#hash00002_value_pages#\"\r\n        Blocks,\"#hash00002_value_blocks_count#\",\"#hash00002_value_blocks#\"\r\n        Menu,\"#hash00002_value_menu_count#\",\"#hash00002_value_menu#\"\r\n        Parameters,\"#hash00002_value_parameters_count#\",\"#hash00002_value_parameters#\"\r\n        Language resources,\"#hash00002_value_languages_count#\",\"#hash00002_value_languages#\"\r\n        Contracts,\"#hash00002_value_contracts_count#\",\"#hash00002_value_contracts#\"\r\n        Tables,\"#hash00002_value_tables_count#\",\"#hash00002_value_tables#\"\r\n    }\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"Your data that you can import\")\r\n    }\r\n\r\n    Div(panel panel-primary){\r\n        ForList(data_info){\r\n            Div(list-group-item){\r\n                Div(row){\r\n                    Div(col-md-10 mc-sm text-left){\r\n                        Span(Class: text-bold, Body: \"#hash00003_name#\")\r\n                    }\r\n                    Div(col-md-2 mc-sm text-right){\r\n                        If(#hash00003_count# > 0){\r\n                            Span(Class: text-bold, Body: \"(#hash00003_count#)\")\r\n                        }.Else{\r\n                            Span(Class: text-muted, Body: \"(0)\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-12 mc-sm text-left){\r\n                        If(#hash00003_count# > 0){\r\n                            Span(Class: h6, Body: \"#hash00003_info#\")\r\n                        }.Else{\r\n                            Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#hash00001_id# > 0){\r\n            Div(list-group-item text-right){\r\n                Button(Body: \"Import\", Class: btn btn-primary, Page: apps_list).CompositeContract(@1Import, \"#hash00001_value_data#\")\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "import_app",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(\"Import\")\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"Select payload that you want to import\")\r\n    }\r\n    Form(panel panel-primary){\r\n        Div(list-group-item){\r\n            Input(Name: input_file, Type: file)\r\n        }\r\n        Div(list-group-item text-right){\r\n            Button(Body: \"Load\", Class: btn btn-primary, Contract: @1ImportUpload, Page: import_app)\r\n        }\r\n    }\r\n}",
            "Name": "import_upload",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import {\r\n    data {\r\n        Data string\r\n    }\r\n    func ReplaceValue(s string) string {\r\n        s = Replace(s, \"#IMPORT_ECOSYSTEM_ID#\", \"#ecosystem_id#\")\r\n        s = Replace(s, \"#IMPORT_KEY_ID#\", \"#key_id#\")\r\n        s = Replace(s, \"#IMPORT_ISMOBILE#\", \"#isMobile#\")\r\n        s = Replace(s, \"#IMPORT_ROLE_ID#\", \"#role_id#\")\r\n        s = Replace(s, \"#IMPORT_ECOSYSTEM_NAME#\", \"#ecosystem_name#\")\r\n        s = Replace(s, \"#IMPORT_APP_ID#\", \"#app_id#\")\r\n        return s\r\n    }\r\n\r\n    conditions {\r\n        $Data = ReplaceValue($Data)\r\n\r\n        $ApplicationId = 0\r\n        var app_map map\r\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where({key: \"import_info\",\r\n          member_id: $key_id}).Row()\r\n\r\n        if app_map{\r\n            var app_id int\r\n            var ival string\r\n            ival = Str(app_map[\"value.app_name\"])\r\n            app_id = DBFind(\"applications\").Columns(\"id\").Where({name: ival}).One(\"id\")\r\n            if app_id {\r\n                $ApplicationId = Int(app_id)\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var editors, creators map\r\n        editors[\"pages\"] = \"EditPage\"\r\n        editors[\"blocks\"] = \"EditBlock\"\r\n        editors[\"menu\"] = \"EditMenu\"\r\n        editors[\"app_params\"] = \"EditAppParam\"\r\n        editors[\"languages\"] = \"EditLang\"\r\n        editors[\"contracts\"] = \"EditContract\"\r\n        editors[\"tables\"] = \"\" // nothing\r\n\r\n        creators[\"pages\"] = \"NewPage\"\r\n        creators[\"blocks\"] = \"NewBlock\"\r\n        creators[\"menu\"] = \"NewMenu\"\r\n        creators[\"app_params\"] = \"NewAppParam\"\r\n        creators[\"languages\"] = \"NewLang\"\r\n        creators[\"contracts\"] = \"NewContract\"\r\n        creators[\"tables\"] = \"NewTable\"\r\n\r\n        var dataImport array\r\n        dataImport = JSONDecode($Data)\r\n        var i int\r\n        while i<Len(dataImport){\r\n            var item, cdata map\r\n            cdata = dataImport[i]\r\n            if cdata {\r\n                cdata[\"ApplicationId\"] = $ApplicationId\r\n                $Type = cdata[\"Type\"]\r\n                $Name = cdata[\"Name\"]\r\n\r\n                // Println(Sprintf(\"import %v: %v\", $Type, cdata[\"Name\"]))\r\n\r\n                item = DBFind($Type).Where({name: $Name}).Row()\r\n                var contractName string\r\n                if item {\r\n                    contractName = editors[$Type]\r\n                    cdata[\"Id\"] = Int(item[\"id\"])\r\n                    if $Type == \"menu\"{\r\n                        var menu menuItem string\r\n                        menu = Replace(item[\"value\"], \" \", \"\")\r\n                        menu = Replace(menu, \"\\n\", \"\")\r\n                        menu = Replace(menu, \"\\r\", \"\")\r\n                        menuItem = Replace(cdata[\"Value\"], \" \", \"\")\r\n                        menuItem = Replace(menuItem, \"\\n\", \"\")\r\n                        menuItem = Replace(menuItem, \"\\r\", \"\")\r\n                        if Contains(menu, menuItem) {\r\n                            // ignore repeated\r\n                            contractName = \"\"\r\n                        }else{\r\n                            cdata[\"Value\"] = item[\"value\"] + \"\\n\" + cdata[\"Value\"]\r\n                        }\r\n                    }\r\n                } else {\r\n                    contractName = creators[$Type]\r\n                }\r\n\r\n                if contractName != \"\"{\r\n                    CallContract(contractName, cdata)\r\n                }\r\n            }\r\n            i=i+1\r\n        }\r\n        // Println(Sprintf(\"> time: %v\", $time))\r\n    }\r\n}",
            "Name": "Import",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ImportUpload {\r\n    data {\r\n        input_file string \"file\"\r\n    }\r\n    func ReplaceValue(s string) string {\r\n        s = Replace(s, \"#ecosystem_id#\", \"#IMPORT_ECOSYSTEM_ID#\")\r\n        s = Replace(s, \"#key_id#\", \"#IMPORT_KEY_ID#\")\r\n        s = Replace(s, \"#isMobile#\", \"#IMPORT_ISMOBILE#\")\r\n        s = Replace(s, \"#role_id#\", \"#IMPORT_ROLE_ID#\")\r\n        s = Replace(s, \"#ecosystem_name#\", \"#IMPORT_ECOSYSTEM_NAME#\")\r\n        s = Replace(s, \"#app_id#\", \"#IMPORT_APP_ID#\")\r\n        return s\r\n    }\r\n\r\n    conditions {\r\n        $input_file = BytesToString($input_file)\r\n        $input_file = ReplaceValue($input_file)\r\n        $limit = 5 // data piece size of import\r\n\r\n        // init buffer_data, cleaning old buffer\r\n        var initJson map\r\n        $import_id = DBFind(\"buffer_data\").Where({member_id:$key_id, key: \"import\"}).One(\"id\")\r\n        if $import_id {\r\n            $import_id = Int($import_id)\r\n            DBUpdate(\"buffer_data\", $import_id, {\"value\": initJson})\r\n        } else {\r\n            $import_id = DBInsert(\"buffer_data\", {\"member_id\":$key_id,\"key\": \"import\",\r\n                 \"value\": initJson})\r\n        }\r\n\r\n        $info_id = DBFind(\"buffer_data\").Where({member_id:$key_id, key: \"import_info\"}).One(\"id\")\r\n        if $info_id {\r\n            $info_id = Int($info_id)\r\n            DBUpdate(\"buffer_data\", $info_id, {\"value\": initJson})\r\n        } else {\r\n            $info_id = DBInsert(\"buffer_data\", {\"member_id\":$key_id,\"key\": \"import_info\",\r\n            \"value\": initJson})\r\n        }\r\n    }\r\n\r\n    action {\r\n        var input map\r\n        input = JSONDecode($input_file)\r\n        var arr_data array\r\n        arr_data = input[\"data\"]\r\n\r\n        var pages_arr, blocks_arr, menu_arr, parameters_arr, languages_arr, contracts_arr, tables_arr array\r\n\r\n        // import info\r\n        var i int\r\n        while i<Len(arr_data){\r\n            var tmp_object map\r\n            tmp_object = arr_data[i]\r\n\r\n            if tmp_object[\"Type\"] == \"pages\" {\r\n                pages_arr = Append(pages_arr, Str(tmp_object[\"Name\"]))\r\n            }\r\n            if tmp_object[\"Type\"] == \"blocks\" {\r\n                blocks_arr = Append(blocks_arr, Str(tmp_object[\"Name\"]))\r\n            }\r\n            if tmp_object[\"Type\"] == \"menu\" {\r\n                menu_arr = Append(menu_arr, Str(tmp_object[\"Name\"]))\r\n            }\r\n            if tmp_object[\"Type\"] == \"app_params\" {\r\n                parameters_arr = Append(parameters_arr, Str(tmp_object[\"Name\"]))\r\n            }\r\n            if tmp_object[\"Type\"] == \"languages\" {\r\n                languages_arr = Append(languages_arr, Str(tmp_object[\"Name\"]))\r\n            }\r\n            if tmp_object[\"Type\"] == \"contracts\" {\r\n                contracts_arr = Append(contracts_arr, Str(tmp_object[\"Name\"]))\r\n            }\r\n            if tmp_object[\"Type\"] == \"tables\" {\r\n                tables_arr = Append(tables_arr, Str(tmp_object[\"Name\"]))\r\n            }\r\n\r\n            i = i + 1\r\n        }\r\n\r\n        var info_map map\r\n        info_map[\"app_name\"] = input[\"name\"]\r\n        info_map[\"pages\"] = Join(pages_arr, \", \")\r\n        info_map[\"pages_count\"] = Len(pages_arr)\r\n        info_map[\"blocks\"] = Join(blocks_arr, \", \")\r\n        info_map[\"blocks_count\"] = Len(blocks_arr)\r\n        info_map[\"menu\"] = Join(menu_arr, \", \")\r\n        info_map[\"menu_count\"] = Len(menu_arr)\r\n        info_map[\"parameters\"] = Join(parameters_arr, \", \")\r\n        info_map[\"parameters_count\"] = Len(parameters_arr)\r\n        info_map[\"languages\"] = Join(languages_arr, \", \")\r\n        info_map[\"languages_count\"] = Len(languages_arr)\r\n        info_map[\"contracts\"] = Join(contracts_arr, \", \")\r\n        info_map[\"contracts_count\"] = Len(contracts_arr)\r\n        info_map[\"tables\"] = Join(tables_arr, \", \")\r\n        info_map[\"tables_count\"] = Len(tables_arr)\r\n\r\n        if 0 == Len(pages_arr) + Len(blocks_arr) + Len(menu_arr) + Len(parameters_arr) + Len(languages_arr) + Len(contracts_arr) + Len(tables_arr) {\r\n            warning \"Invalid or empty import file\"\r\n        }\r\n\r\n        // import data\r\n        // the contracts is imported in one piece, the rest is cut under the $limit, a crutch to bypass the error when you import dependent contracts in different pieces\r\n        i=0\r\n        var sliced contracts array, arr_data_len int\r\n        arr_data_len = Len(arr_data)\r\n        while i <arr_data_len{\r\n            var part array, l int, tmp map\r\n            while l < $limit && (i+l < arr_data_len) {\r\n                tmp = arr_data[i+l]\r\n                if tmp[\"Type\"] == \"contracts\" {\r\n                    contracts = Append(contracts, tmp)\r\n                }else{\r\n                    part = Append(part, tmp)\r\n                }\r\n                l=l+1\r\n            }\r\n            var batch map\r\n            batch[\"Data\"] = JSONEncode(part)\r\n            sliced = Append(sliced, batch)\r\n            i=i+$limit\r\n        }\r\n        if Len(contracts) > 0{\r\n            var batch map\r\n            batch[\"Data\"] = JSONEncode(contracts)\r\n            sliced = Append(sliced, batch)\r\n        }\r\n        input[\"data\"] = sliced\r\n\r\n        // storing\r\n        DBUpdate(\"buffer_data\", $import_id, {\"value\": input})\r\n        DBUpdate(\"buffer_data\", $info_id, {\"value\": info_map})\r\n\r\n        var app_id int\r\n        var ival string\r\n        ival =  Str(input[\"name\"])\r\n        app_id = DBFind(\"applications\").Columns(\"id\").Where({name:ival}).One(\"id\")\r\n\r\n        if !app_id {\r\n            var val string\r\n            val = Str(input[\"name\"])\r\n            DBInsert(\"applications\", {\"name\": val, \"conditions\": \"true\"})\r\n        }\r\n    }\r\n}",
            "Name": "ImportUpload",
            "Type": "contracts"
        }
    ]
}