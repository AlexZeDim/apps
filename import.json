{
    "name": "System",
    "data": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:\"Import\", Page:import_upload, Icon:\"icon-cloud-upload\")",
            "Name": "admin_menu",
            "Type": "menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(buffer_data).Columns(\"id,value\").Where({key:import_seed, member_id:#key_id#}).Vars(seed)\n    DBFind(buffer_data).Columns(\"id,value->name,value->data\").Where({key:import, member_id:#key_id#}).Vars(import)\n    DBFind(buffer_data).Columns(\"value->app_name,value->pages,value->pages_count,value->blocks,value->blocks_count,value->menu,value->menu_count,value->parameters,value->parameters_count,value->languages,value->languages_count,value->contracts,value->contracts_count,value->tables,value->tables_count\").Where({key:import_info,member_id:#key_id#}).Vars(info)\n\n    SetTitle(\"Import - #info_value_app_name#\")\n    Data(data_info, \"DataName,DataCount,DataInfo\"){\n        Pages,\"#info_value_pages_count#\",\"#info_value_pages#\"\n        Blocks,\"#info_value_blocks_count#\",\"#info_value_blocks#\"\n        Menu,\"#info_value_menu_count#\",\"#info_value_menu#\"\n        Parameters,\"#info_value_parameters_count#\",\"#info_value_parameters#\"\n        Language resources,\"#info_value_languages_count#\",\"#info_value_languages#\"\n        Contracts,\"#info_value_contracts_count#\",\"#info_value_contracts#\"\n        Tables,\"#info_value_tables_count#\",\"#info_value_tables#\"\n    }\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Your data that you can import\")\n    }\n\n    Div(panel panel-primary){\n        ForList(data_info){\n            Div(list-group-item){\n                Div(row){\n                    Div(col-md-10 mc-sm text-left){\n                        Span(Class: text-bold, Body: \"#DataName#\")\n                    }\n                    Div(col-md-2 mc-sm text-right){\n                        If(#DataCount# > 0){\n                            Span(Class: text-bold, Body: \"(#DataCount#)\")\n                        }.Else{\n                            Span(Class: text-muted, Body: \"(0)\")\n                        }\n                    }\n                }\n                Div(row){\n                    Div(col-md-12 mc-sm text-left){\n                        If(#DataCount# > 0){\n                            Span(Class: h6, Body: \"#DataInfo#\")\n                        }.Else{\n                            Span(Class: text-muted h6, Body: \"Nothing selected\")\n                        }\n                    }\n                }\n            }\n        }\n        If(#import_id# > 0){\n            Div(list-group-item text-right){\n                Button(Body: \"Import\", Class: btn btn-primary, Page: apps_list).CompositeContract(@1Import, \"#import_value_data#\")\n            }\n        }\n    }\n}",
            "Name": "import_app",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle(\"Import\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Select payload that you want to import\")\n    }\n    Form(panel panel-primary){\n        Div(list-group-item){\n            Input(Name: input_file, Type: file)\n        }\n        Div(list-group-item text-right){\n            Button(Body: \"Load\", Class: btn btn-primary, Contract: @1ImportUpload, Page: import_app)\n        }\n    }\n}",
            "Name": "import_upload",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import {\n    data {\n        Data string\n    }\n    func decodeGlobals(s string) string {\n        var globs array i lenGlobs int r map prefix from to string\n        prefix = \"import_\"\n        globs = [\"ecosystem_id\", \"key_id\", \"isMobile\", \"role_id\", \"ecosystem_name\", \"app_id\", \"info_value_pages_count\", \"info_value_pages\", \"info_value_blocks_count\", \"info_value_blocks\",\"info_value_menu_count\", \"info_value_menu\", \"info_value_parameters_count\", \"info_value_parameters\",\"info_value_languages_count\", \"info_value_languages\", \"info_value_contracts_count\", \"info_value_contracts\", \"info_value_tables_count\", \"info_value_tables\", \"DataName\", \"DataCount\", \"DataInfo\"]\n        lenGlobs = Len(globs)\n        while i<lenGlobs{\n            r = globs[i]\n            from = ToUpper(\"#\"+prefix+r+\"#\")\n            to = \"#\"+r+\"#\"\n            s = Replace(s, from, to)\n            i=i+1\n        }\n        return s\n    }\n\n    conditions {\n        $Data = decodeGlobals($Data)\n        $ApplicationId = 0\n        var app_map map\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where({key: \"import_info\", member_id: $key_id}).Row()\n\n        if app_map{\n            var app_id int ival string\n            ival = Str(app_map[\"value.app_name\"])\n            app_id = DBFind(\"applications\").Columns(\"id\").Where({name: ival}).One(\"id\")\n            if app_id {\n                $ApplicationId = Int(app_id)\n            }\n        }\n    }\n\n    action {\n        var editors, creators map\n        editors[\"pages\"] = \"EditPage\"\n        editors[\"blocks\"] = \"EditBlock\"\n        editors[\"menu\"] = \"EditMenu\"\n        editors[\"app_params\"] = \"EditAppParam\"\n        editors[\"languages\"] = \"EditLang\"\n        editors[\"contracts\"] = \"EditContract\"\n        editors[\"tables\"] = \"\" // nothing\n\n        creators[\"pages\"] = \"NewPage\"\n        creators[\"blocks\"] = \"NewBlock\"\n        creators[\"menu\"] = \"NewMenu\"\n        creators[\"app_params\"] = \"NewAppParam\"\n        creators[\"languages\"] = \"NewLang\"\n        creators[\"contracts\"] = \"NewContract\"\n        creators[\"tables\"] = \"NewTable\"\n\n        var dataImport array\n        dataImport = JSONDecode($Data)\n        var i int\n        while i<Len(dataImport){\n            var item cdata map type name string\n            cdata = dataImport[i]\n            if cdata {\n                cdata[\"ApplicationId\"] = $ApplicationId\n                type = cdata[\"Type\"]\n                name = cdata[\"Name\"]\n                // Println(Sprintf(\"import %v: %v\", type, cdata[\"Name\"]))\n\n                item = DBFind(type).Where({name: name}).Row()\n                var contractName string\n                if item {\n                    contractName = editors[type]\n                    cdata[\"Id\"] = Int(item[\"id\"])\n                    if type == \"menu\"{\n                        var menu menuItem string\n                        menu = Replace(item[\"value\"], \" \", \"\")\n                        menu = Replace(menu, \"\\n\", \"\")\n                        menu = Replace(menu, \"\\r\", \"\")\n                        menuItem = Replace(cdata[\"Value\"], \" \", \"\")\n                        menuItem = Replace(menuItem, \"\\n\", \"\")\n                        menuItem = Replace(menuItem, \"\\r\", \"\")\n                        if Contains(menu, menuItem) {\n                            // ignore repeated\n                            contractName = \"\"\n                        }else{\n                            cdata[\"Value\"] = item[\"value\"] + \"\\n\" + cdata[\"Value\"]\n                        }\n                    }\n                } else {\n                    contractName = creators[type]\n                }\n\n                if contractName != \"\"{\n                    CallContract(contractName, cdata)\n                }\n            }\n            i=i+1\n        }\n        // Println(Sprintf(\"> time: %v\", $time))\n    }\n}",
            "Name": "Import",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ImportUpload {\n    data {\n        input_file string \"file\"\n    }\n    func encodeGlobals(s string) string {\n        var globs array i lenGlobs int r map prefix from to string\n        prefix = \"import_\"\n        globs = [\"ecosystem_id\", \"key_id\", \"isMobile\", \"role_id\", \"ecosystem_name\", \"app_id\", \"info_value_pages_count\", \"info_value_pages\", \"info_value_blocks_count\", \"info_value_blocks\",\"info_value_menu_count\", \"info_value_menu\", \"info_value_parameters_count\", \"info_value_parameters\",\"info_value_languages_count\", \"info_value_languages\", \"info_value_contracts_count\", \"info_value_contracts\", \"info_value_tables_count\", \"info_value_tables\", \"DataName\", \"DataCount\", \"DataInfo\"]\n\n        lenGlobs = Len(globs)\n        while i<lenGlobs{\n            r = globs[i]\n            from = \"#\"+r+\"#\"\n            to = ToUpper(\"#\"+prefix+r+\"#\")\n            Println(from, to)\n            s = Replace(s, from, to)\n            i=i+1\n        }\n        return s\n    }\n\n    conditions {\n        Println($this_contract)\n        $input_file = BytesToString($input_file)\n        $input_file = encodeGlobals($input_file)\n        $limit = 5 // data piece size of import\n\n        // init buffer_data, cleaning old buffer\n        var initJson map\n        $import_id = DBFind(\"buffer_data\").Where({member_id:$key_id, key: \"import\"}).One(\"id\")\n        if $import_id {\n            $import_id = Int($import_id)\n            DBUpdate(\"buffer_data\", $import_id, {\"value\": initJson})\n        } else {\n            $import_id = DBInsert(\"buffer_data\", {\"member_id\":$key_id,\"key\": \"import\",\n            \"value\": initJson})\n        }\n\n        $info_id = DBFind(\"buffer_data\").Where({member_id:$key_id, key: \"import_info\"}).One(\"id\")\n        if $info_id {\n            $info_id = Int($info_id)\n            DBUpdate(\"buffer_data\", $info_id, {\"value\": initJson})\n        } else {\n            $info_id = DBInsert(\"buffer_data\", {\"member_id\":$key_id,\"key\": \"import_info\",\n            \"value\": initJson})\n        }\n        $seed_id = Int(DBFind(\"buffer_data\").Where({member_id:$key_id, key: \"import_seed\"}).One(\"id\"))\n        if $seed_id > 0 {\n            DBUpdate(\"buffer_data\", $seed_id, {\"value\": $time})\n        } else {\n            DBInsert(\"buffer_data\", {\"member_id\":$key_id,\"key\": \"import_seed\",\n            \"value\": $time})\n        }\n    }\n\n    action {\n        var input map arrData array\n        input = JSONDecode($input_file)\n        arrData = input[\"data\"]\n\n        var pages_arr blocks_arr menu_arr parameters_arr languages_arr contracts_arr tables_arr array\n\n        // import info\n        var i lenArrData int item map\n        lenArrData = Len(arrData)\n        while i<lenArrData{\n            item = arrData[i]\n\n            if item[\"Type\"] == \"pages\" {\n                pages_arr = Append(pages_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"blocks\" {\n                blocks_arr = Append(blocks_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"menu\" {\n                menu_arr = Append(menu_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"app_params\" {\n                parameters_arr = Append(parameters_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"languages\" {\n                languages_arr = Append(languages_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"contracts\" {\n                contracts_arr = Append(contracts_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"tables\" {\n                tables_arr = Append(tables_arr, item[\"Name\"])\n            }\n\n            i = i + 1\n        }\n\n        var inf map\n        inf[\"app_name\"] = input[\"name\"]\n        inf[\"pages\"] = Join(pages_arr, \", \")\n        inf[\"pages_count\"] = Len(pages_arr)\n        inf[\"blocks\"] = Join(blocks_arr, \", \")\n        inf[\"blocks_count\"] = Len(blocks_arr)\n        inf[\"menu\"] = Join(menu_arr, \", \")\n        inf[\"menu_count\"] = Len(menu_arr)\n        inf[\"parameters\"] = Join(parameters_arr, \", \")\n        inf[\"parameters_count\"] = Len(parameters_arr)\n        inf[\"languages\"] = Join(languages_arr, \", \")\n        inf[\"languages_count\"] = Len(languages_arr)\n        inf[\"contracts\"] = Join(contracts_arr, \", \")\n        inf[\"contracts_count\"] = Len(contracts_arr)\n        inf[\"tables\"] = Join(tables_arr, \", \")\n        inf[\"tables_count\"] = Len(tables_arr)\n\n        if 0 == inf[\"pages_count\"] + inf[\"blocks_count\"] + inf[\"menu_count\"] + inf[\"parameters_count\"] + inf[\"languages_count\"] + inf[\"contracts_count\"] + inf[\"tables_count\"] {\n            warning \"Invalid or empty import file\"\n        }\n\n        // import data\n        // the contracts is imported in one piece, the rest is cut under the $limit, a crutch to bypass the error when you import dependent contracts in different pieces\n        var sliced contracts array\n        i=0\n        while i <lenArrData{\n            var items array l int item map\n            while l < $limit && (i+l < lenArrData) {\n                item = arrData[i+l]\n                if item[\"Type\"] == \"contracts\" {\n                    contracts = Append(contracts, item)\n                }else{\n                    items = Append(items, item)\n                }\n                l=l+1\n            }\n            var batch map\n            batch[\"Data\"] = JSONEncode(items)\n            sliced = Append(sliced, batch)\n            i=i+$limit\n        }\n        if Len(contracts) > 0{\n            var batch map\n            batch[\"Data\"] = JSONEncode(contracts)\n            sliced = Append(sliced, batch)\n        }\n        input[\"data\"] = sliced\n\n        // storing\n        DBUpdate(\"buffer_data\", $import_id, {\"value\": input})\n        DBUpdate(\"buffer_data\", $info_id, {\"value\": inf})\n\n        var name string\n        name =  Str(input[\"name\"])\n        if !DBFind(\"applications\").Columns(\"id\").Where({name:name}).One(\"id\") {\n            DBInsert(\"applications\", {\"name\": name, \"conditions\": \"true\"})\n        }\n    }\n}",
            "Name": "ImportUpload",
            "Type": "contracts"
        }
    ]
}