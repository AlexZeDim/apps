{
    "name": "System",
    "data": [
        {
            "Name": "table_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1tables).Columns(\"id,name,columns,conditions,permissions->insert,permissions->update,permissions->new_column,permissions->read\").Vars(pre).Where({id:#tabl_id#,ecosystem:#ecosystem_id#})\n\n    SetTitle($@1tables$)\n    Div(breadcrumb){\n        Div(){\n            LinkPage($@1tables$, @1app_tables)\n            Span(/, mh)\n            LinkPage(#pre_name#, @1table_view,, \"tabl_id=#tabl_id#\")\n            Span(/, mh)\n            Span($@1edit$, text-muted)\n        }\n    }\n\n    Form(){\n        Div(panel panel-default){\n            Div(panel-body){\n                Div(row){\n                    Div(col-xs-3 col-md-3 h4){\n                        Label($@1name$)\n                    }\n                    Div(col-xs-2 col-md-2 h4){\n                        Label($@1type$)\n                    }\n                    Div(col-xs-5 col-md-5 h4){\n                        Label($@1conditions$)\n                    }\n                    Div(col-xs-2 col-md-2 h4 text-right){\n                    }\n                }\n                JsonToSource(src_columns, #pre_columns#)\n                ForList(src_columns){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-xs-3 col-md-3 h5){\n                                Span(#key#)\n                            }\n                            Div(col-xs-2 col-md-2 h5){\n                                SetVar(col_type,GetColumnType(#pre_name#, #key#))\n                                If(#col_type# == text){\n                                    Span(\"Text\")\n                                }\n                                If(#col_type# == number){\n                                    Span(\"Number\")\n                                }\n                                If(#col_type# == money){\n                                    Span(\"Money\")\n                                }\n                                If(#col_type# == varchar){\n                                    Span(\"Varchar\")\n                                }\n                                If(#col_type# == datetime){\n                                    Span(\"Date/Time\")\n                                }\n                                If(#col_type# == double){\n                                    Span(\"Double\")\n                                }\n                                If(#col_type# == character){\n                                    Span(\"Character\")\n                                }\n                                If(#col_type# == json){\n                                    Span(\"JSON\")\n                                }\n                                If(#col_type# == bytea){\n                                    Span(\"Binary Data\")\n                                }\n                                If(#col_type# == uuid){\n                                    Span(\"UUID\")\n                                }\n                            }\n                            Div(col-xs-5 col-md-5 h5){\n                                Span(`#value#`)\n                            }\n                            Div(col-xs-2 col-md-2 text-right){\n                                Button(Body: $@1edit$, Class: btn btn-primary, Page: @1column_edit, PageParams: \"name_column=#key#,tabl_id=#tabl_id#\")\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer text-right){\n                Button(Body: $@1column_add$, Class: btn btn-primary, Page: @1column_add, PageParams: \"next_table_name=#pre_name#,tabl_id=#tabl_id#\")\n            }\n        }\n        Div(row){\n            Div(col-xs-6 col-md-6){\n                Div(panel panel-default){\n                    Div(panel-heading){$@1write_permissions$}\n                    Div(panel-body){\n                        Div(form-group){\n                            Label($@1insert$)\n                            Input(Name: InsertPerm, Type: text, Value: #pre_permissions_insert#)\n                        }\n                        Div(form-group){\n                            Label($@1update$)\n                            Input(Name: UpdatePerm, Type: text, Value: #pre_permissions_update#)\n                        }\n                        Div(form-group){\n                            Label($@1new_column$)\n                            Input(Name: NewColumnPerm, Type: text, Value: #pre_permissions_new_column#)\n                        }\n                        Div(form-group){\n                            Label($@1reading$)\n                            Input(Name: ReadPerm, Type: text, Value: #pre_permissions_read#)\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Button(Body: CRUD, Class: btn btn-default, Contract: @1CrudCreate, Params: \"tableName=#table_name#\", Page: table_view, PageParams: \"tabl_id=#binaries_id#\")\n                        Button(Body: $@1save$, Class: btn btn-primary, Contract: @1EditTable, Page: @1app_tables, Params: \"Name=#pre_name#\")\n                    }\n                }\n            }\n            Div(col-xs-6 col-md-6){\n                Div(panel panel-default){\n                    Div(panel-heading){$@1conditions_for_change$}\n                    Div(panel-body){\n                        Div(form-group){\n                            Input(Name: Insert_condition, Disabled: true, Type: text, Value: #pre_conditions#)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "CrudCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CrudCreate {\n    data {\n        tableName string\n    }\n    func appendAll(a array, b ...)array{\n        var i lenb int\n        lenb = Len(b)\n        while i<lenb{\n            if GetType(b[i]) == \"[]interface {}\"{\n                a = appendAll(a, b[i]...)\n            }else{\n                a = Append(a, b[i])\n            }\n            i=i+1\n        }\n        return a\n    }\n    func toCap(s string) string{\n        return ToUpper(Substr(s, 0, 1)) + ToLower(Substr(s, 1, Size(s)))\n    }\n    func toCamel(t string, lowerFirstLetter bool) string{\n        // Println(\"toCamel\")\n        var parts array i int\n        parts = Split(t, \"_\")\n        while i < Len(parts){\n            if i == 0 && lowerFirstLetter {\n                parts[i] = ToLower(parts[i])\n            }else{\n                parts[i] = toCap(parts[i])\n            }\n            i=i+1\n        }\n        return Join(parts, \"\")\n    }\n    func pageInputTypes()map{\n        var m map\n        m[\"text\"] = \"text\"\n        m[\"number\"] = \"number\"\n        m[\"money\"] = \"number\"\n        m[\"varchar\"] = \"text\"\n        m[\"datetime\"] = \"date\"\n        m[\"double\"] = \"number\"\n        m[\"character\"] = \"text\"\n        m[\"json\"] = \"textarea\"\n        m[\"bytea\"] = \"file\"\n        m[\"uuid\"] = \"text\"\n        return m\n    }\n    func contractInputTypes()map{\n        var m map\n        m[\"text\"] = \"string\"\n        m[\"number\"] = \"int\"\n        m[\"money\"] = \"money\"\n        m[\"varchar\"] = \"string\"\n        m[\"datetime\"] = \"string\"\n        m[\"double\"] = \"float\"\n        m[\"character\"] = \"string\"\n        m[\"json\"] = \"string\"\n        m[\"bytea\"] = \"bytes\"\n        m[\"uuid\"] = \"string\"\n        return m\n    }\n    func transRu()map{\n        var m map\n        m[\"item_not_found\"] = \"Объект не найден\"\n        m[\"back\"] = \"Назад\"\n        m[\"data_view\"] = \"Просмотр данных\"\n        m[\"data_input\"] = \"Ввод данных\"\n        m[\"edit\"] = \"Редактировать\"\n        m[\"save\"] = \"Сохранить\"\n        m[\"view\"] = \"Просмотр\"\n        return m\n    }\n    func getColsTypes()array{\n        var a array i int\n        while i<$lenCols{\n            a[i] = GetColumnType($tableName, $cols[i])\n            i=i+1\n        }\n        return a\n    }\n    func getCamelCols()array{\n        var a array i int\n        while i<$lenCols{\n            a[i] = toCamel($cols[i], $lowerFirst)\n            i=i+1\n        }\n        return a\n    }\n    func globJoin(cols array)string{\n        // Println(\"globJoin\")\n        var body array i lenCols int\n        lenCols = Len(cols)\n        while i<lenCols{\n            body = Append(body, \"$\"+toCamel(cols[i], $lowerFirst))\n            i=i+1\n        }\n        return Join(body, \",\")\n    }\n    func trim_s(s string)string{\n        // Println(\"trim_s\")\n        if Substr(s, Size(s)-1, 1) == \"s\"{\n            return Substr(s, 0, Size(s)-1)\n        }\n        return s\n    }\n    func getPrefix(appName string)string{\n        // Println(\"getPrefix\")\n        var temp array i lenTemp int\n        temp = Split(appName, \" \")\n        lenTemp = Len(temp)\n        while i < lenTemp{\n            temp[i] = Substr(temp[i], 0, 1)\n            i=i+1\n        }\n        return ToLower(Join(temp, \"\")) + \"_\"\n    }\n    func getMapValues(m map, keys array) array {\n        // Println(\"getMapValues\")\n        var values array i keysLen int key string\n        keysLen = Len(keys)\n        while i < keysLen {\n            key = keys[i]\n            values = Append(values, m[key])\n            i=i+1\n        }\n        return values\n    }\n    func getPaginator() string{\n        // Println(\"getPaginator\")\n        var body string\n        body = `\n        DBFind(`+$tableName+`).Count(count)\n        If(#page#>0){\n            SetVar(prev_page,Calculate(#page#-1)\n        }.Else{\n            SetVar(page,0).(prev_page,0)\n        }\n        SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)\n        If(#count#>Calculate(#off#+#per_page#)){\n            SetVar(next_page,Calculate(#page#+1)\n        }\n        Div(button-group){\n            If(#page#>0){\n                Button(Body:\"1\", Class:btn btn-default, Page:#page_name#, PageParams: \"page=0\")\n            }.Else{\n                Button(Body:\"1\", Class:btn btn-default disabled)\n            }\n            If(#page#>1){\n                Button(Body:Calculate(#prev_page#+1),Class:btn btn-default, Page:#page_name#, PageParams:\"page=#prev_page#\")\n            }\n            If(And(#page#>0,#page#<#last_page#)){\n                Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)\n            }\n            If(#next_page#<#last_page#){\n                Button(Body:Calculate(#next_page#+1),Class:btn btn-default,Page:#page_name#, PageParams:\"page=#next_page#\")\n            }\n            If(#page#<#last_page#){\n                Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:#page_name#, PageParams:\"page=#last_page#\")\n            }.ElseIf(#last_page#>0){\n                Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\n            }\n        }`\n\n        return body\n    }\n    func langsCols()string{\n        var res array i int\n        while i<$lenCols{\n            res = Append(res, Sprintf(\"$%v%v$=%v\", $prefix, $cols[i], $cols[i]))\n            i=i+1\n        }\n        return Join(res, \",\")\n    }\n    func getPageRecords(names map) string{\n        // Println(\"getPageRecords\")\n        var pageEdit pageView this contractDelete string\n        pageEdit = names[\"pageEdit\"]\n        pageView = names[\"pageView\"]\n        this =  names[\"pageRecords\"]\n        contractDelete =  names[\"contractDelete\"]\n        var body string\n        body = `DBFind(applications).Columns(\"id\").Where({name:\"`+$appName+`\", deleted:0}).Vars(application)\n        SetTitle($`+this+`$)\n        SetVar(page_name,`+this+`)\n        Div(content-wrapper){\n            AddToolButton(Title: Create, Page: `+pageEdit+`, Icon: icon-plus)\n            `+getPaginator()+`\n            Div(panel panel-primary){\n                Div(panel-body){\n                    Div(table-responsive){\n                        DBFind(`+$tableName+`,src_`+$tableName+`).Offset(#off#).Order(id).Custom(_actions){\n                            Div(text-right text-nowrap){\n                                Button(Class: btn btn-info fa fa-eye mr-sm, Page: `+pageView+`, PageParams: \"`+$ID+`=#id#\")\n                                Button(Class: btn btn-default fa fa-edit mr-sm, Page: `+pageEdit+`, PageParams: \"`+$ID+`=#id#\")\n                                Button(Class: btn btn-danger fa fa-trash, Page: `+this+`, Contract: `+contractDelete+`, Params: \"`+$ID+`=#id#\").Alert($delete_alert$, $yes$, $no$)\n                            }\n                        }\n                        Table(src_`+$tableName+`,\"`+langsCols()+`,=_actions\")\n                    }\n                }\n            }\n        }`\n        return body\n    }\n\n    func getPageEdit(names map)string{\n        // Println(\"getPageEdit\")\n        var body pageRecords contractEdit string i int\n        pageRecords =  names[\"pageRecords\"]\n        contractEdit =  names[\"contractEdit\"]\n        body = `DBFind(applications).Columns(\"id\").Where({name:\"`+$appName+`\", deleted:0}).Vars(application)\n        SetVar(title,$`+$prefix+`create$).(btn_title,$`+$prefix+`create$)`\n        while i < $lenCols{\n            body = body + `.(item_`+$cols[i]+`,)`\n            i=i+1\n        }\n        body = body+`\n        If(GetVar(`+$ID+`)){\n            DBFind(`+$tableName+`).Where({id:#`+$ID+`#}).Vars(item)\n            SetVar(title,$`+$prefix+`edit$ ##`+$ID+`#).(btn_title,$`+$prefix+`save$)\n        }\n        SetTitle(#title#)\n        Div(content-wrapper){\n            Div(breadcrumb){\n                LinkPage(Body: $`+pageRecords+`$, Page: `+pageRecords+`)\n                Span(/, mh)\n                Span(#title#, text-muted)\n            }\n            Div(row){\n                Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                    Form(panel panel-primary){\n                        Div(panel-heading){\n                            LangRes(`+$prefix+`data_input)\n                        }\n                        Div(panel-body){\n                            If(GetVar(`+$ID+`)){\n                                Input(Name: `+$ID+`, Type:hidden, Value: #`+$ID+`#)\n                            }`\n                            i=0\n                            while i<$lenCols{\n                                body = body+`\n                                Div(row mt-sm){\n                                    Div(col-sm-4 mt-sm text-right){\n                                        LangRes(`+$prefix+$cols[i]+`)\n                                    }\n                                    Div(col-sm-8 text-left){\n                                        Input(Name: `+$camelCols[i]+`, Type:`+$pTypes[$types[i]]+`, Value: #item_`+$cols[i]+`#)\n                                    }\n                                }`\n                                i=i+1\n                            }\n                            body = body+`\n                        }\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(`+$prefix+`back), Page: `+pageRecords+`, Class: btn btn-default pull-left)\n                            Button(Body: #btn_title#, Page: `+pageRecords+`, Class: btn btn-primary, Contract: `+contractEdit+`)\n                        }\n                    }\n                }\n            }\n        }`\n        return body\n    }\n    func getPageView(names map)string{\n        // Println(\"getPageView\")\n        var body pageRecords string i int\n        pageRecords = names[\"pageRecords\"]\n        body = body+`\n        DBFind(applications).Columns(\"id\").Where({name:\"`+$appName+`\", deleted:0}).Vars(application)\n        If(GetVar(`+$ID+`)){\n            DBFind(`+$tableName+`).Where({id:#`+$ID+`#}).Vars(item)\n        }\n        SetVar(title,$`+$prefix+`view$ ##`+$ID+`#)\n        SetTitle(#title#)\n        Div(content-wrapper){\n            Div(breadcrumb){\n                LinkPage(Body: $`+pageRecords+`$, Page: `+pageRecords+`)\n                Span(/, mh)\n                Span(#title#, text-muted)\n            }\n            If(GetVar(`+$ID+`)){\n                Div(row){\n                    Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                        Div(panel panel-primary){\n                            Div(panel-heading){\n                                LangRes(`+$prefix+`data_view)\n                            }\n                            Div(panel-body){`\n                            i=0\n                            while i<$lenCols{\n                                body = body+`\n                                Div(row mt-sm){\n                                    Div(col-sm-4 text-right text-bold){\n                                        LangRes(`+$prefix+$cols[i]+`)\n                                    }\n                                    Div(col-sm-8 text-left){\n                                        #item_`+$cols[i]+`#\n                                    }\n                                }\n                                `\n                                i=i+1\n                            }\n                            body = body+`}\n                            Div(panel-footer text-left){\n                                Button(Body: LangRes(`+$prefix+`back), Page: `+pageRecords+`, Class: btn btn-default)\n                            }\n                        }\n                    }\n                }\n            }.Else{\n                Div(h3 text-center){\n                    LangRes(`+$prefix+`item_not_found)\n                }\n            }\n        }`\n        return body\n    }\n\n    func getContractDelete(name string)string{\n        // Println(\"getContractDelete\")\n        var body dColName string i int\n        while i<$lenCols{\n            if \"delete\" == $cols[i] || \"deleted\" == $cols[i]{\n                dColName = $cols[i]\n            }\n            i=i+1\n        }\n        if !dColName{\n            return \"\"\n        }\n        body = `contract `+name+` {\n            data {\n                `+ $ID +` int\n            }\n            conditions {\n                if !DBFind(\"`+$tableName+`\").Where({id:$`+$ID+`, `+dColName+`:0\"}).One(\"id\") {\n                    warning \"Record not found\"\n                }\n            }\n            action {\n                DBUpdate(\"`+$tableName+`\", $`+ $ID +`, {`+dColName+`:1})\n            }\n        }`\n        return body\n    }\n\n    func getContractEdit(name string)string{\n        // Println(\"getContractEdit\")\n        var body dColName string i int\n        body = `contract `+name+` {\n            data {\n                `+$ID+` string \"optional\"`\n                while i<$lenCols{\n                    body = body+`\n                    `+$camelCols[i]+` ` +$cTypes[$types[i]]\n                    i=i+1\n                }\n                body = body + `\n            }\n            conditions {\n                $`+$ID+` = Int($`+$ID+`)\n                if $`+$ID+` > 0{\n                    if !DBFind(\"`+$tableName+`\").Where({id:$`+$ID+`}).One(\"id\") {\n                        warning \"Record not found\"\n                    }\n                }\n            }\n            action {\n                if $`+$ID+` > 0{\n                    DBUpdate(\"`+$tableName+`\", $`+$ID+`, {`+$csvCols+`:`+globJoin($cols)+`})\n                }else{\n                    DBInsert(\"`+$tableName+`\", {`+$csvCols+`:`+globJoin($cols)+`})\n                }\n            }\n        }`\n        return body\n    }\n    func makeLang(s string) map{\n        var item trans map\n        if HasPrefix(s, $prefix){\n            item[\"Name\"] = Replace(s, \" \", \"_\")\n        }else{\n            item[\"Name\"] = $prefix + Replace(s, \" \", \"_\")\n        }\n        trans[\"en\"] = toCap(Replace(s, \"_\", \" \"))\n        if $transRu[s]{\n            trans[\"ru\"] = $transRu[s]\n        }\n        item[\"Trans\"] = JSONEncode(trans)\n        item[\"Type\"] = \"languages\"\n        return item\n    }\n    func makeMenu(name string) map{\n        var menu map\n        menu[\"Name\"] = \"default_menu\"\n        menu[\"Value\"] = Sprintf(\"MenuItem(Title: %v, Page: %v, Icon:fa fa-list-ul)\", toCap(Replace(name, \"_\", \" \")), name)\n        menu[\"Conditions\"] = `ContractAccess(\"@1EditMenu\")`\n        menu[\"Type\"] = \"menu\"\n        return menu\n    }\n    func createLangs(names array) array{\n        var res array m map i int\n        res = appendAll(\n            res,\n            makeLang(\"item_not_found\"),\n            makeLang(\"back\"),\n            makeLang(\"data_view\"),\n            makeLang(\"data_input\"),\n            makeLang(\"edit\"),\n            makeLang(\"save\"),\n            makeLang(\"view\"),\n            makeLang(names[\"pageRecords\"]),\n            makeLang(names[\"pageEdit\"]),\n            makeLang(names[\"pageView\"])\n        )\n        while i<$lenCols{\n            res = Append(res, makeLang($cols[i]))\n            i=i+1\n        }\n        return res\n    }\n    func makeItem(type, name, content string)map{\n        // Println(\"makeItem\")\n        var item map\n        if !(content && name && type){\n            return item\n        }\n        if type == \"pages\"{\n            item[\"Menu\"] = \"default_menu\"\n        }\n\n        item[\"Value\"] = content\n        item[\"Conditions\"] = \"true\"\n        item[\"Name\"] = name\n        item[\"Type\"] = type\n        return item\n    }\n    func export(items ...){\n        // Println(\"export\")\n        var app item menu map i lenItems int res array fileName string\n        fileName = Sprintf(\"%v.json\", Replace(ToLower($appName), \" \", \"_\"))\n        lenItems = Len(items)\n        app[\"name\"] = $appName\n        while i<lenItems{\n            item = items[i]\n            if item[\"Type\"] {\n                res = Append(res, item)\n            }\n            i=i+1\n        }\n\n        app[\"data\"] = res\n        @1UploadBinary(\"Name,Data,ApplicationId,DataMimeType\", fileName, JSONEncode(app), $appId, \"application/json\")\n    }\n\n    conditions {\n        $table = DBFind(\"tables\").Columns(\"columns\").Where({name:$tableName}).Row()\n        if !$table{\n            warning \"Table not found\"\n        }\n        $lowerFirst = false // first letter for input global variables\n        $ID = toCamel(\"id\", $lowerFirst)\n\n        $appId = Int(DBFind(\"tables\").Where({name:$tableName}).Columns(\"app_id\").One(\"app_id\"))\n        $appName = DBFind(\"applications\").Where({id:$appId}).Columns(\"name\").One(\"name\")\n        if !$appName {\n            warning \"Application not found\"\n        }\n\n        $tableName = ToLower($tableName)\n        $prefix = getPrefix($appName)\n\n        if HasPrefix($tableName, $prefix){\n            $pagePrefix = trim_s($tableName) + \"_\"\n            $contractPrefix = toCamel($prefix, false)\n        }else{\n            $pagePrefix = $prefix + trim_s($tableName) + \"_\"\n            $contractPrefix = toCamel($prefix, false) + toCamel(trim_s($tableName), false)\n        }\n\n        $pTypes = pageInputTypes()\n        $cTypes = contractInputTypes()\n        var columns array\n        columns = JSONDecode($table[\"columns\"])\n        $cols = GetMapKeys(columns)\n        $lenCols = Len($cols)\n        $camelCols = getCamelCols()\n        $types = getColsTypes()\n        $csvCols = Join($cols,\",\")\n        $transRu = transRu()\n    }\n    action {\n        var names map pageRecords pageEdit pageView contractDelete contractEdit string langs array\n        names[\"pageRecords\"] = $prefix + $tableName\n        if HasPrefix($tableName, $prefix){\n            names[\"pageRecords\"] = $tableName\n        }\n        names[\"pageEdit\"] = $pagePrefix + \"edit\"\n        names[\"pageView\"] = $pagePrefix + \"view\"\n        names[\"contractEdit\"] = $contractPrefix + \"Edit\"\n        names[\"contractDelete\"] = $contractPrefix + \"Delete\"\n\n        pageRecords = getPageRecords(names)\n        pageEdit = getPageEdit(names)\n        pageView = getPageView(names)\n\n        contractDelete = getContractDelete(names[\"contractDelete\"])\n        contractEdit = getContractEdit(names[\"contractEdit\"])\n        langs = createLangs(names)\n        export(\n            makeItem(\"pages\", names[\"pageRecords\"], pageRecords),\n            makeItem(\"pages\", names[\"pageEdit\"], pageEdit),\n            makeItem(\"pages\", names[\"pageView\"], pageView),\n            makeItem(\"contracts\", names[\"contractEdit\"], contractEdit),\n            makeItem(\"contracts\", names[\"contractDelete\"], contractDelete),\n            makeMenu(names[\"pageRecords\"]),\n            langs...\n        )\n    }\n}",
            "Type": "contracts"
        }
    ]
}