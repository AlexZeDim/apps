{
    "name": "Tests",
    "data": [
        {
            "Conditions": "true",
            "Value": "Div(panel){\n    Div(panel-heading){\n        Case №1 Simple Block With Variable\n    }\n    Div(panel-body){\n        This is block number GetVar(\"blockNum\")!\n        SetVar(\"blockNum\", 2)\n    }\n}",
            "Name": "tests_block_1",
            "Type": "blocks"
        },
        {
            "Conditions": "true",
            "Value": "Div(panel){\n    Div(panel-heading){\n        Case №2 Simple Block With Source\n    }\n    Div(panel-body){\n        This is block number GetVar(\"blockNum\")!\n        SetVar(\"blockNum\", 3)\n        Table(membersSrc, \"ID=id,Name=member_name\")\n    }\n}",
            "Name": "tests_block_2",
            "Type": "blocks"
        },
        {
            "Conditions": "true",
            "Value": "Block in variable!",
            "Name": "tests_block_3",
            "Type": "blocks"
        },
        {
            "Conditions": "true",
            "Value": "SetVar(\"block4\", \"Variable in the block!\")\nBlock in variable!",
            "Name": "tests_block_4",
            "Type": "blocks"
        },
        {
            "Conditions": "true",
            "Value": "SetVar(recursiveBlockNum, Calculate(#recursiveBlockNum# + 1))\nBlock №5 content №GetVar(\"recursiveBlockNum\")! Include(tests_block_5)",
            "Name": "tests_block_5",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuGroup(Title: \"Tests\", Icon: \"icon-arrow-right\"){\n    MenuItem(Title:tests, Page:tests, Icon:\"fa fa-edit\")\n    MenuItem(Title:tests2, Page:tests2, Icon:\"fa fa-edit\")\n    MenuItem(Title:testing $voting_templates$, Page:tests_voting_templates, Icon:fa fa-thumbs-up)\n    MenuGroup(Title: \"Group 1\", Icon: \"icon-arrow-right\"){\n        MenuItem(Page: tests_vars,Title: \"Variables tests\")\n        MenuItem(Page: tests_conditions,Title: \"Condition tests\")\n        MenuItem(Page: tests_json,Title: \"JSON tests\")\n        MenuItem(Page: tests_source,Title: \"Source tests\")\n        MenuItem(Page: tests_contracts,Title: \"Contracts tests\")\n    }\n    MenuGroup(Title: \"Group 2\", Icon: \"icon-arrow-right\"){\n        MenuItem(Page: tests_blocks,Title: \"Blocks tests\")\n        MenuItem(Page: tests_lang,Title: \"Lang resources tests\")\n        MenuItem(Page: tests_db,Title: \"DBFind tests\")\n        MenuItem(Page: tests_calc,Title: \"Calculate tests\")\n    }\n    MenuItem(Title:file upload, Page:tests_file_upload, Icon:\"fa fa-edit\")\n}",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "tests_lang",
            "Trans": "{\"AZ\":\"AZ\",\"BY\":\"BY\",\"CX\":\"CX\",\"DW\":\"DW\",\"EV\":\"EV\",\"FU\":\"FU\",\"GT\":\"GT\",\"HS\":\"HS\",\"IR\":\"IR\",\"JQ\":\"JQ\",\"KP\":\"KP\",\"LO\":\"LO\",\"MN\":\"MN\",\"NM\":\"NM\",\"OL\":\"OL\",\"PK\":\"PK\",\"QJ\":\"QJ\",\"RI\":\"RI\",\"SH\":\"SH\",\"TG\":\"TG\",\"UF\":\"UF\",\"VE\":\"VE\",\"WD\":\"WD\",\"XC\":\"XC\",\"YB\":\"YB\"}",
            "Type": "languages"
        },
        {
            "Name": "tests_lang_2",
            "Trans": "{\"en\":\"value2\",\"EN\":\"value3\",\"En\":\"value5\"}",
            "Type": "languages"
        },
        {
            "Name": "tests",
            "Columns": "[\n    {\n        \"name\": \"json\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"name\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"date\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"result\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"value\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"value1\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"value2\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"value3\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "test1,test2",
            "Name": "tests_parameters",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetVar(now, Now(\"YYYY-MM-DD HH:MI:SS\"))\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-default){\n                Div(panel-heading text-right){\n                    Button(Body: Run contracts tests, Contract: tests_Run, Class: btn btn-primary, Page: tests, PageParams: \"date=#now#\", Params: \"Date=#now#\")\n                }\n                Div(panel-body){\n                    If(GetVar(date)){\n                        Div(h3){Contract operation tests, DateTime(#date#)}\n                        DBFind(Name: tests, Source: src).Where(\"date='#date#'\").Order(\"id desc\")\n                        Div(form-group row){\n                            Div(col-sm-2 text-center){details}\n                            Div(col-sm-10){\n                                Div(col-sm-10 text-center){case}\n                                Div(col-sm-2){result}\n                            }\n                        }\n                        ForList(src){\n                            If(#result#==\"false\"){\n                                SetVar(hl, text-danger)\n                            }.Else{\n                                SetVar(hl, text-success)\n                            }\n                            Div(form-group row #hl#){\n                                Div(col-sm-2 text-center){}\n                                Div(col-sm-10){\n                                    Div(col-sm-10){\n                                        #name#\n                                    }\n                                    Div(col-sm-2){#result#}\n                                }\n                            }\n                        }\n                    }\n                    \n                    \n                    \n                    Div(h3){Page operation tests, DateTime(#now#)}\n                    SetVar(false, false).(true, true)\n                    Div(form-group row){\n                        Div(col-sm-2 text-center){details}\n                        Div(col-sm-10){\n                            Div(col-sm-10 text-center){case}\n                            Div(col-sm-2){result}\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            If(){\n                                SetVar(t1_class, text-danger)\n                            }.Else{\n                                SetVar(t1_class, text-success)\n                            }\n                        }\n                        Div(col-sm-10 #t1_class#){\n                            Div(col-sm-10){\"normal If\"}\n                            Div(col-sm-2){\n                                If(#t1_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(\"Condition1\", 1).(\"Condition2\", 0.3)\n                            If(And(GetVar(\"Condition2\") == 0.3, And(GetVar(\"Condition1\") == 1, Or(GetVar(\"Condition2\") == 0, GetVar(\"Condition1\") == 0)))){\n                                SetVar(t2_class, text-danger)\n                            }.Else{\n                                SetVar(t2_class, text-success)\n                            }\n                        }\n                        Div(col-sm-10 #t2_class#){\n                            Div(col-sm-10){\"complex If, And, Or with GetVars\"}\n                            Div(col-sm-2){\n                                If(#t2_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(\"Condition1\", 1).(\"Condition2\", 0.3)\n                            If(And(0.3 == 0.3, And(1 == 1, Or(0.3 == 0, 1 == 0)))){\n                                SetVar(t3_class, text-danger)\n                            }.Else{\n                                SetVar(t3_class, text-success)\n                            }\n                        }\n                        Div(col-sm-10 #t3_class#){\n                            Div(col-sm-10){\"complex If, And, Or with values\"}\n                            Div(col-sm-2){\n                                If(#t3_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(\"Condition3\", 1)\n                            If(#Condition3# == 2){\n                                1 SetVar(t4_class, text-danger)\n                            }.ElseIf(#Condition3# == 1){\n                                SetVar(\"Condition3\", 2)\n                                2 SetVar(t4_class, text-success)\n                            }.ElseIf(#Condition3# == 2){\n                                3 SetVar(t4_class, text-danger)\n                            }.Else{\n                                else SetVar(t4_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t4_class#){\n                            Div(col-sm-10){\"If: reset condition\"}\n                            Div(col-sm-2){\n                                If(#t4_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(\"Condition4\", 1)\n                            If(GetVar(Condition4) == 2){\n                                1 SetVar(t5_class, text-danger)\n                            }.ElseIf(GetVar(Condition4) == 1){\n                                SetVar(\"Condition4\", 2)\n                                2 SetVar(t5_class, text-success)\n                            }.ElseIf(GetVar(Condition4) == 2){\n                                3 SetVar(t5_class, text-danger)\n                            }.Else{\n                                else SetVar(t5_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t5_class#){\n                            Div(col-sm-10){\"If: reset condition with GetVar\"}\n                            Div(col-sm-2){\n                                If(#t5_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(coltype, GetColumnType(members, member_name))\n                            SetVar(colnone, GetColumnType(none, none))\n                            SetVar(colempty, GetColumnType())\n                            If(Or(#coltype#!=\"varchar\",#colnone#>0,#colempty#>0)){\n                                SetVar(t6_class, text-danger)\n                            }.Else{\n                                SetVar(t6_class, text-success)\n                            }\n                        }\n                        Div(col-sm-10 #t6_class#){\n                            Div(col-sm-10){\"GetColumnType\"}\n                            Div(col-sm-2){\n                                If(#t6_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            DBFind(parameters, src_par).Columns(\"id\").Order(id).Where(\"id >= 1 and id <= 3\").Count(count)\n                            If(#count#==3){\n                                SetVar(t7_class, text-success)\n                            }.Else{\n                                SetVar(t7_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t7_class#){\n                            Div(col-sm-10){ DBFind: Count }\n                            Div(col-sm-2){\n                                If(#t7_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(where)\n                            DBFind(contracts, src).Columns(id).Order(id).Limit(3).Custom(a){SetVar(where, #where# #id#)}\n                            If(#where#==\"1 2 3\"){\n                                SetVar(t8_class, text-success)\n                            }.Else{\n                                SetVar(t8_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t8_class#){\n                            Div(col-sm-10){\"DBFind: as ForList\"}\n                            Div(col-sm-2){\n                                If(#t8_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            DBFind(contracts, src).Order(id).Where(\"id=2\").Vars(t9_vars)\n                            If(#t9_vars_id#==2){\n                                SetVar(t9_class, text-success)\n                            }.Else{\n                                SetVar(t9_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t9_class#){\n                            Div(col-sm-10){\"DBFind: Vars\"}\n                            Div(col-sm-2){\n                                If(#t9_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            If(#isMobile#==0){\n                                Desktop\n                                SetVar(t10_class, text-success)\n                            }.Else{\n                                If(#isMobile#==1){\n                                    Mobile\n                                    SetVar(t10_class, text-success)\n                                }.Else{\n                                    SetVar(t10_class, text-danger)\n                                }\n                            }\n                        }\n                        Div(col-sm-10 #t10_class#){\n                            Div(col-sm-10){\"isMobile\"}\n                            Div(col-sm-2){\n                                If(#t10_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            Range(t11_my,0,5)\n                            SetVar(t11,\"\")\n                            ForList(t11_my){SetVar(t11,#t11# #t11_my_index#=#id#)}\n                            If(#t11#==\"1=0 2=1 3=2 4=3 5=4\"){\n                                SetVar(t11_class, text-success)\n                            }.Else{\n                                SetVar(t11_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t11_class#){\n                            Div(col-sm-10){\"Range: default values\"}\n                            Div(col-sm-2){\n                                If(#t11_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            Range(t12_none,20,0)\n                            SetVar(t12,\"\")\n                            ForList(t12_none){t12,#t12# #none_index#=#id#}\n                            If(#t12#==\"\"){\n                                SetVar(t12_class, text-success)\n                            }.Else{\n                                SetVar(t12_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t12_class#){\n                            Div(col-sm-10){\"Range: none with desc without negative step\"}\n                            Div(col-sm-2){\n                                If(#t12_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t13,\"\").(from, 5).(to, -4).(step,-2)\n                            Range(Source: neg, From: #from#, To: #to#, Step: #step#)\n                            ForList(neg){SetVar(t13,#t13# #neg_index#=#id#)}\n                            If(#t13#==\"1=5 2=3 3=1 4=-1 5=-3\"){\n                                SetVar(t13_class, text-success)\n                            }.Else{\n                                SetVar(t13_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t13_class#){\n                            Div(col-sm-10){\"Range: interpolation, desc\"}\n                            Div(col-sm-2){\n                                If(#t13_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t14,\"\")\n                            Range(t14_zero,0,5,0)\n                            ForList(t14_zero){SetVar(t14,#t14# #zero_index#=#id#)}\n                            If(#t14#==\"\"){\n                                SetVar(t14_class, text-success)\n                            }.Else{\n                                SetVar(t14_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t14_class#){\n                            Div(col-sm-10){\"Range: step zero\"}\n                            Div(col-sm-2){\n                                If(#t14_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t15,\"\")\n                            JsonToSource(t15_none, [\"q\",\"p\"])\n                            ForList(t15_none){SetVar(t15,#t15# #key#:#value#)}\n                            If(#t15#==\"\"){\n                                SetVar(t15_class, text-success)\n                            }.Else{\n                                SetVar(t15_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t15_class#){\n                            Div(col-sm-10){\"JsonToSource: bad object\"}\n                            Div(col-sm-2){\n                                If(#t15_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t17,\"\").(t17_obj,{\"p1\":\"v1\", \"p2\":\"v2\"})\n                            JsonToSource(t17_pv, #t17_obj#)\n                            ForList(t17_pv){SetVar(t17,#t17# #key#:#value#)}\n                            If(#t17#==\"p1:v1 p2:v2\"){\n                                SetVar(t17_class, text-success)\n                            }.Else{\n                                SetVar(t17_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t17_class#){\n                            Div(col-sm-10){\"JsonToSource: set from interpolation\"}\n                            Div(col-sm-2){\n                                If(#t17_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t18,\"\")\n                            JsonToSource(t18_dat, {\"param\":\"va lue\", \"obj\": {\"sub\":\"one\"}, \"arr\":[\"one\"], \"empty\": null})\n                            ForList(t18_dat){SetVar(t18,#t18# #key#:#value#)}\n                            If(#t18#==\"arr:[one] empty: obj:map[sub:one] param:va lue\"){\n                                SetVar(t18_class, text-success)\n                            }.Else{\n                                SetVar(t18_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t18_class#){\n                            Div(col-sm-10){\"JsonToSource: plane\"}\n                            Div(col-sm-2){\n                                If(#t18_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t19, 0).(t19, \"#t19#7\").(t19_where, \"#t19_w# 1#t19#\")\n                            If(#t19_where#==\"#t19_w# 107\"){\n                                SetVar(t19_class, text-success)\n                            }.Else{\n                                SetVar(t19_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t19_class#){\n                            Div(col-sm-10){\"SetVar: interpolations\"}\n                            Div(col-sm-2){\n                                If(#t19_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t20, 1)\n                            If(#t20# < -1){\n                                SetVar(t20_class, text-danger)\n                            }.Else{\n                                SetVar(t20_class, text-success)\n                            }\n                        }\n                        Div(col-sm-10 #t20_class#){\n                            Div(col-sm-10){\"If: interpolation in condition\"}\n                            Div(col-sm-2){\n                                If(#t20_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t21, 1)\n                            If(GetVar(t21) < -1){\n                                SetVar(t21_class, text-danger)\n                            }.Else{\n                                SetVar(t21_class, text-success)\n                            }\n                        }\n                        Div(col-sm-10 #t21_class#){\n                            Div(col-sm-10){\"If: compare GetVar condition\"}\n                            Div(col-sm-2){\n                                If(#t21_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t22, 1)\n                            SetVar(t22_test, GetVar(t22))\n                            If(#t22_test# < -1){\n                                SetVar(t22_class, text-danger)\n                            }.Else{\n                                SetVar(t22_class, text-success)\n                            }\n                        }\n                        Div(col-sm-10 #t22_class#){\n                            Div(col-sm-10){\"If: compare interpolation condition\"}\n                            Div(col-sm-2){\n                                If(#t22_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            If(){\n                                SetVar(t23_class, text-danger)\n                            }.Else{\n                                SetVar(t23_class, text-success)\n                            }\n                        }\n                        Div(col-sm-10 #t23_class#){\n                            Div(col-sm-10){\"If: initialization of variables in the false branches\"}\n                            Div(col-sm-2){\n                                If(#t23_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t24,Calculate(Exp: 342278783438/0, Type: money)Calculate(Exp: 5.2/0, Type: float)Calculate(Exp: 7/0))\n                            If(#t24#==\"dividing by zerodividing by zerodividing by zero\"){\n                                SetVar(t24_class, text-success)\n                            }.Else{\n                                SetVar(t24_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t24_class#){\n                            Div(col-sm-10){\"Calculate: dividing by zero\"}\n                            Div(col-sm-2){\n                                If(#t24_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t25_val, 2200000034343443343430000).(t25_zero, 0)\n                            If(\"753013346318631859.1075080680647-468\"==Calculate(Exp: (342278783438+5000)*(#t25_val#-932780000), Type: money, Prec:18).(Exp: (2+50)*(#t25_zero#-9), Type: money)){\n                                SetVar(t25_class, text-success)\n                            }.Else{\n                                SetVar(t25_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t25_class#){\n                            Div(col-sm-10){\"Calculate\"}\n                            Div(col-sm-2){\n                                If(#t25_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t26_val, 100)\n                            SetVar(t26_res, `Calculate(10000-(34+5)*#t26_val#)=Calculate(\"((10+#t26_val#-45)*3.0-10)/4.5 + #t26_val#\", Prec: 4)`)\n                            If(\"6100=141.1111\"==#t26_res#){\n                                SetVar(t26_class, text-success)\n                            }.Else{\n                                SetVar(t26_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t26_class#){\n                            Div(col-sm-10){\"Calculate2\"}\n                            Div(col-sm-2){\n                                If(#t26_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t27_number, EcosysParam(Name: tests_parameters, Index: 2))\n                            #t27_number#\n                            If(#t27_number#==\"test2\"){\n                                SetVar(t27_class, text-success)\n                            }.Else{\n                                SetVar(t27_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t27_class#){\n                            Div(col-sm-10){\"Get EcosysParam by number index\"}\n                            Div(col-sm-2){\n                                If(#t27_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t28_type, 2)\n                            SetVar(t28_interpolate, EcosysParam(Name: tests_parameters, Index: #t28_type#))\n                            #t28_interpolate#\n                            If(#t28_interpolate#==\"test2\"){\n                                SetVar(t28_class, text-success)\n                            }.Else{\n                                SetVar(t28_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t28_class#){\n                            Div(col-sm-10){\"Get EcosysParam by interpolation index\"}\n                            Div(col-sm-2){\n                                If(#t28_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            SetVar(t29_type, 2)\n                            SetVar(t29_getvar, EcosysParam(Name: tests_parameters, Index: GetVar(t29_type)))\n                            EcosysParam(Name: tests_parameters, Index: GetVar(t29_type))\n                            #t29_getvar#\n                            If(#t29_getvar#==\"test2\"){\n                                SetVar(t29_class, text-success)\n                            }.Else{\n                                SetVar(t29_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t29_class#){\n                            Div(col-sm-10){\"Get EcosysParam by GetVar index\"}\n                            Div(col-sm-2){\n                                If(#t29_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            EcosysParam(Name: tests_parameters, Source: t30_src)\n                            ForList(t30_src){\n                                If(\"test1\"==GetVar(name)){\n                                    SetVar(t30, \"ok\")\n                                }\n                            }\n                            If(#t30#==\"ok\"){\n                                SetVar(t30_class, text-success)\n                            }.Else{\n                                SetVar(t30_class, text-danger)\n                            }\n                        }\n                        Div(col-sm-10 #t30_class#){\n                            Div(col-sm-10){\"Get EcosysParam as ForList source\"}\n                            Div(col-sm-2){\n                                If(#t30_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    Div(form-group row){\n                        Div(col-sm-2 text-muted text-center){\n                            Address(#key_id#)\n                            If(\"unknown address\"==Address(#key_id#)){\n                                SetVar(t31_class, text-danger)\n                            }.Else{\n                                SetVar(t31_class, text-success)\n                            }\n                        }\n                        Div(col-sm-10 #t31_class#){\n                            Div(col-sm-10){\"Get Address by ID\"}\n                            Div(col-sm-2){\n                                If(#t31_class#==\"text-danger\"){#false#}.Else{#true#}\n                            }\n                        }\n                    }\n                    \n                }\n            }\n        }\n    }\n}\n",
            "Name": "tests",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(panel){\n    Div(panel-heading bg-primary text-white){\n        Case №1\n    }\n    Div(panel-body bg-primary text-white){\n        Div(row){\n            Div(col-sm-6 bg-primary text-white){\n                Expected:\n                Div(){\nCode(\n    SetVar(a, 0)SetVar(a, #a#7)SetVar(where, #where# 1)\n    Div(){#where##a#}\n)\n                }\n            }\n            Div(col-sm-6 bg-primary text-white){\n                Result:\n                SetVar(a, 0)SetVar(a, #a#7)SetVar(where, #where# 1)\n                Div(){#where##a#}\n            }\n        }\n    }\n    Div(panel-heading bg-info text-white){\n        Case №2\n    }\n    Div(panel-body bg-info text-white){\n        Div(row){\n            Div(col-sm-6 bg-info text-white){\n                Expected:\n                Div(){\nCode(\n    Div(){Span(begin \"You've\" end<hr>)}\n    Div(Body: ` + \"`\\\"You've\\\"`\" + `)\n    Div(Body: \"` + \"`You've`\" + `\")\n)\n                }\n            }\n            Div(col-sm-6 bg-info text-white){\n                Result:\n                Div(){Span(begin \"You've\" end<hr>)}\n                Div(Body: ` + \"`\\\"You've\\\"`\" + `)\n                Div(Body: \"` + \"`You've`\" + `\")\n            }\n        }\n    }\n    Div(panel-heading bg-primary text-white){\n        Case №3\n    }\n    Div(panel-body bg-primary text-white){\n        Div(row){\n            Div(col-sm-6 bg-primary text-white){\n                Expected:\n                Div(){\nCode(\n    QRcode(Some text)\n)\n                }\n            }\n            Div(col-sm-6 bg-primary text-white){\n                Result: (false)\n                QRcode(Some text)\n            }\n        }\n    }\n    Div(panel-heading bg-info text-white){\n        Case №4\n    }\n    Div(panel-body bg-info text-white){\n        Div(row){\n            Div(col-sm-6 bg-info text-white){\n                Expected:\n                Div(){\nCode(\n    Button(Body: addpage, Contract: NewPage, Params: \"Name=hello_page2, Value=Div(fefe, dbbt), Menu=default_menu, Conditions=true\")\n)\n                }\n            }\n            Div(col-sm-6 bg-info text-white){\n                Result:\n                Button(Body: addpage, Contract: NewPage, Params: \"Name=hello_page2, Value=Div(fefe, dbbt), Menu=default_menu, Conditions=true\")\n            }\n        }\n    }\n    Div(panel-heading bg-primary text-white){\n        Case №5\n    }\n    Div(panel-body bg-primary text-white){\n        Div(row){\n            Div(col-sm-6 bg-primary text-white){\n                Expected:\n                Div(){\nCode(\n    Button(Body: add table1, Contract: NewTable, Params: `Name=name,Columns=[{\\\"name\\\":\\\"MyName\\\",\\\"type\\\":\\\"varchar\\\", \\\"index\\\": \\\"1\\\", \\\"conditions\\\":\\\"true\\\"}, {\\\"name\\\":\\\"Amount\\\", \\\"type\\\":\\\"number\\\",\\\"index\\\": \\\"0\\\", \\\"conditions\\\":\\\"true\\\"}],Permissions={\\\"insert\\\": \\\"true\\\", \\\"update\\\" : \\\"true\\\", \\\"new_column\\\": \\\"true\\\"}`)\n)\n                }\n            }\n            Div(col-sm-6 bg-primary text-white){\n                Result: (false)\n                Div(){\nCode(\n    Button(Body: add table1, Contract: NewTable, Params: `Name=name,Columns=[{\\\"name\\\":\\\"MyName\\\",\\\"type\\\":\\\"varchar\\\", \\\"index\\\": \\\"1\\\", \\\"conditions\\\":\\\"true\\\"}, {\\\"name\\\":\\\"Amount\\\", \\\"type\\\":\\\"number\\\",\\\"index\\\": \\\"0\\\", \\\"conditions\\\":\\\"true\\\"}],Permissions={\\\"insert\\\": \\\"true\\\", \\\"update\\\" : \\\"true\\\", \\\"new_column\\\": \\\"true\\\"}`)\n)\n                }\n            }\n        }\n    }\n    Div(panel-heading bg-info text-white){\n        Case №6\n    }\n    Div(panel-body bg-info text-white){\n        Div(row){\n            Div(col-sm-6 bg-info text-white){\n                Expected:\n                Div(){\nCode(\n    Calculate( Exp: 342278783438/0, Type: money)Calculate( Exp: 5.2/0, Type: float)Calculate( Exp: 7/0)\n)\n                }\n            }\n            Div(col-sm-6 bg-info text-white){\n                Result:\n                Calculate( Exp: 342278783438/0, Type: money)Calculate( Exp: 5.2/0, Type: float)\n                Calculate( Exp: 7/0)\n            }\n        }\n    }\n    Div(panel-heading bg-primary text-white){\n        Case №7\n    }\n    Div(panel-body bg-primary text-white){\n        Div(row){\n            Div(col-sm-6 bg-primary text-white){\n                Expected:\n                Div(){\nCode(\n    SetVar(val, 2200000034343443343430000)SetVar(zero, 0)Calculate( Exp: (342278783438+5000)*(#val#-932780000), Type: money, Prec:18)Calculate( Exp: (2+50)*(#zero#-9), Type: money)\n)\n                }\n            }\n            Div(col-sm-6 bg-primary text-white){\n                Result:\n                SetVar(val, 2200000034343443343430000)SetVar(zero, 0)Calculate( Exp: (342278783438+5000)*(#val#-932780000), Type: money, Prec:18)Calculate( Exp: (2+50)*(#zero#-9), Type: money)\n            }\n        }\n    }\n    Div(panel-heading bg-info text-white){\n        Case №8\n    }\n    Div(panel-body bg-info text-white){\n        Div(row){\n            Div(col-sm-6 bg-info text-white){\n                Expected:\n                Div(){\nCode(\n    SetVar(val, 100)Calculate(10000-(34+5)*#val#)=Calculate(\"((10+#val#-45)*3.0-10)/4.5 + #val#\", Prec: 4)\n)\n                }\n            }\n            Div(col-sm-6 bg-info text-white){\n                Result: (false)\n                SetVar(val, 100)Calculate(10000-(34+5)*#val#)=Calculate(\"((10+#val#-45)*3.0-10)/4.5 + #val#\", Prec: 4)\n            }\n        }\n    }\n    Div(panel-heading bg-primary text-white){\n        Case №9\n    }\n    Div(panel-body bg-primary text-white){\n        Div(row){\n            Div(col-sm-6 bg-primary text-white){\n                Expected:\n                Div(){\nCode(\n    Span((span text), ok)Span(((span text), ok))\n    Div(){{My body}}\n)\n                }\n            }\n            Div(col-sm-6 bg-primary text-white){\n                Result:\n                Span((span text), ok)Span(((span text), ok) )\n                Div(){{My body}}\n            }\n        }\n    }\n    Div(panel-heading bg-info text-white){\n        Case №10\n    }\n    Div(panel-body bg-info text-white){\n        Div(row){\n            Div(col-sm-6 bg-info text-white){\n                Expected:\n                Div(){\nCode(\n    Code(P(Some text)\n    Div(myclass){Span(Strong(\"Bold text\"))})\n)\n                }\n            }\n            Div(col-sm-6 bg-info text-white){\n                Result:\nCode(\n    P(Some text)\n    Div(myclass){Span(Strong(\"Bold text\"))}\n)\n            }\n        }\n    }\n    Div(panel-heading bg-primary text-white){\n        Case №11\n    }\n    Div(panel-body bg-primary text-white){\n        Div(row){\n            Div(col-sm-6 bg-primary text-white){\n                Expected:\n                Div(){\nCode(\n    Data(Source: mysrc, Columns: \"id,name\", Data:\n    1, First Name\n    2, Second Name\n).Custom(custom_id){\n    SetVar(Name: v, Value: Lower(#name#))\n    P(Body: #v#)\n}.Custom(cust){\n    P(Body: #v#)\n}\nData(\n    Columns: \"name\", Data:\n    First Name\n    Second Name\n)\n)\n            }\n        }\n        Div(col-sm-6 bg-primary text-white){\n            Result:\n            Data(\n                Source: mysrc, Columns: \"id,name\", Data:\n                1, First Name\n                2, Second Name\n            ).Custom(custom_id){\n                SetVar(Name: v, Value: Lower(#name#))\n                P(Body: #v#)\n            }.Custom(cust){\n                P(Body: #v#)\n            }\n            Data(\n                Columns: \"name\", Data:\n                First Name\n                Second Name\n            )\n        }\n    }\n}\nDiv(panel-heading bg-info text-white){\n    Case №12\n}\nDiv(panel-body bg-info text-white){\n    Div(row){\n        Div(col-sm-6 bg-info text-white){\n            Expected:\n            Div(){\nCode(\n    Data(\n        Source: mysrc, Columns: \"id,name\", Data:\n        1,first\n        2,second\n        3,third\n    ).Custom(\"synthetic\"){\n        Div(text-muted, #name#)\n    }\n    Table(Source: mysrc)\n)\n            }\n        }\n        Div(col-sm-6 bg-info text-white){\n            Result:\n            Data(\n                Source: mysrc, Columns: \"id,name\", Data:\n                1,first\n                2,second\n                3,third\n            ).Custom(\"synthetic\"){\n                Div(text-muted, #name#)\n            }\n            Table(Source: mysrc)\n        }\n    }\n}\nDiv(panel-heading bg-primary text-white){\n    Case №13\n}\nDiv(panel-body bg-primary text-white){\n    Div(row){\n        Div(col-sm-6 bg-primary text-white){\n            Expected:\n            Div(){\nCode(\n    Data(\n        myforlist,\"id,name\",\n        \"1\",Test message 1\n        2,\"Test message 2\"\n        3,\"Test message 3\"\n    )\n    ForList(nolist){Problem}ForList(myforlist){\n        Div(){#id#. Em(#name#)}\n    }\n)\n            }\n        }\n        Div(col-sm-6 bg-primary text-white){\n            Result:\n            Data(\n                myforlist,\"id,name\",\n                \"1\",Test message 1\n                2,\"Test message 2\"\n                3,\"Test message 3\"\n            )\n            ForList(nolist){Problem}ForList(myforlist){\n                Div(){#id#. Em(#name#)}\n            }\n        }\n    }\n}\nDiv(panel-heading bg-info text-white){\n    Case №14\n}\nDiv(panel-body bg-info text-white){\n    Div(row){\n        Div(col-sm-6 bg-info text-white){\n            Expected:\n            Div(){\nCode(\n    SetTitle(My pageР)AddToolButton(Title: Open, Page: default)\n)\n            }\n        }\n        Div(col-sm-6 bg-info text-white){\n            Result:\n            SetTitle(My pageР)AddToolButton(Title: Open, Page: default)\n        }\n    }\n}\nDiv(panel-heading bg-primary text-white){\n    Case №15\n}\nDiv(panel-body bg-primary text-white){\n    Div(row){\n        Div(col-sm-6 bg-primary text-white){\n            Expected:\n            Div(){\nCode(\n    DateTime(2017-11-07T17:51:08)+DateTime(2015-08-27T09:01:00,HH:MI DD.MM.YYYY)+CmpTime(2017-11-07T17:51:08,2017-11-07)CmpTime(2017-11-07T17:51:08,2017-11-07T20:22:01)CmpTime(2015-10-01T17:51:08,2015-10-01T17:51:08)=DateTime(NULL)\n)\n            }\n        }\n        Div(col-sm-6 bg-primary text-white){\n            Result:\n            DateTime(2017-11-07T17:51:08)+DateTime(2015-08-27T09:01:00,HH:MI DD.MM.YYYY)+CmpTime(2017-11-07T17:51:08,2017-11-07)CmpTime(2017-11-07T17:51:08,2017-11-07T20:22:01)CmpTime(2015-10-01T17:51:08,2015-10-01T17:51:08)=DateTime(NULL)\n        }\n    }\n}\nDiv(panel-heading bg-info text-white){\n    Case №16\n}\nDiv(panel-body bg-info text-white){\n    Div(row){\n        Div(col-sm-6 bg-info text-white){\n            Expected:\n            Div(){\nCode(\n    SetVar(pref,unicode Р)\n    Input(Name: myid, Value: #pref#)Strong(qqq)\n)\n            }\n        }\n        Div(col-sm-6 bg-info text-white){\n            Result:\n            SetVar(pref,unicode Р)\n            Input(Name: myid, Value: #pref#)Strong(qqq)\n        }\n    }\n}\nDiv(panel-heading bg-primary text-white){\n    Case №17\n}\nDiv(panel-body bg-primary text-white){\n    Div(row){\n        Div(col-sm-6 bg-primary text-white){\n            Expected:\n            Div(){\nCode(\n    ImageInput(myimg,100,40)\n)\n            }\n        }\n        Div(col-sm-6 bg-primary text-white){\n            Result:\n            ImageInput(myimg,100,40)\n        }\n    }\n}\nDiv(panel-heading bg-info text-white){\n    Case №18\n}\nDiv(panel-body bg-info text-white){\n    Div(row){\n        Div(col-sm-6 bg-info text-white){\n            Expected:\n            Div(){\nCode(\n    LinkPage(My page,mypage,,\"myvar1=Value 1, myvar2=Value2,myvar3=Val(myval)\")\n)\n            }\n        }\n        Div(col-sm-6 bg-info text-white){\n            Result:\n            LinkPage(My page,mypage,,\"myvar1=Value 1, myvar2=Value2,myvar3=Val(myval)\")\n        }\n    }\n}\nDiv(panel-heading bg-primary text-white){\n    Case №19\n}\nDiv(panel-body bg-primary text-white){\n    Div(row){\n        Div(col-sm-6 bg-primary text-white){\n            Expected:\n            Div(){\nCode(\n    Image(/images/myimage.jpg,My photo,myclass).Style(width:100px;)\n)\n            }\n        }\n        Div(col-sm-6 bg-primary text-white){\n            Result:\n            Image(/images/myimage.jpg,My photo,myclass).Style(width:100px;)\n        }\n    }\n}\nDiv(panel-heading bg-info text-white){\n    Case №20\n}\nDiv(panel-body bg-info text-white){\n    Div(row){\n        Div(col-sm-6 bg-info text-white){\n            Expected:\n            Div(){\nCode(\n    Data(\n        mysrc,\"id,name\",\n        \"1\",John Silver,2\n        2,\"Mark, Smith\"\n    )\n)\n            }\n        }\n        Div(col-sm-6 bg-info text-white){\n            Result:\n            Data(\n                mysrc,\"id,name\",\n                \"1\",John Silver,2\n                2,\"Mark, Smith\"\n            )\n        }\n    }\n}\nDiv(panel-heading bg-primary text-white){\n    Case №21\n}\nDiv(panel-body bg-primary text-white){\n    Div(row){\n        Div(col-sm-6 bg-primary text-white){\n            Expected:\n            Div(){\nCode(\n    Select(myselect,mysrc,name,id,0,myclass)\n)\n            }\n        }\n        Div(col-sm-6 bg-primary text-white){\n            Result:\n            Select(myselect,mysrc,name,id,0,myclass)\n        }\n    }\n}\nDiv(panel-heading bg-info text-white){\n    Case №22\n}\nDiv(panel-body bg-info text-white){\n    Div(row){\n        Div(col-sm-6 bg-info text-white){\n            Expected:\n            Div(){\nCode(\n    Data(mysrc,\"id,name\"){\n        \"1\",John Silver\n        2,\"Mark, Smith\"\n        3,\"Unknown \"\"Person\"\"\"\n    }\n)\n            }\n        }\n        Div(col-sm-6 bg-info text-white){\n            Result:\n            Data(mysrc,\"id,name\"){\n                \"1\",John Silver\n                2,\"Mark, Smith\"\n                3,\"Unknown \"\"Person\"\"\"\n            }\n        }\n    }\n}\nDiv(panel-heading bg-primary text-white){\n    Case №23\n}\nDiv(panel-body bg-primary text-white){\n    Div(row){\n        Div(col-sm-6 bg-primary text-white){\n            Expected:\n            Div(){\nCode(\n    If(true) {OK}.Else {false} Div(){test} If(false, FALSE).ElseIf(0) { Skip }.ElseIf(1) {Else OK}.Else {Fourth}If(0).Else{ALL right}\n)\n            }\n        }\n        Div(col-sm-6 bg-primary text-white){\n            Result:\n            If(true){OK}.Else {false} Div(){test} If(false, FALSE).ElseIf(0) { Skip }.ElseIf(1) {Else OK}.Else {Fourth}If(0).Else{ALL right}\n        }\n    }\n}\nDiv(panel-heading bg-info text-white){\n    Case №24\n}\nDiv(panel-body bg-info text-white){\n    Div(row){\n        Div(col-sm-6 bg-info text-white){\n            Expected:\n            Div(){\nCode(\n    Button(Contract: MyContract, Body:My Contract, Class: myclass, Params:\"Name=myid,Id=i10,Value\")\n)\n            }\n        }\n        Div(col-sm-6 bg-info text-white){\n            Result:\n            Button(Contract: MyContract, Body:My Contract, Class: myclass, Params:\"Name=myid,Id=i10,Value\")\n        }\n    }\n}\nDiv(panel-heading bg-primary text-white){\n    Case №25\n}\nDiv(panel-body bg-primary text-white){\n    Div(row){\n        Div(col-sm-6 bg-primary text-white){\n            Expected:\n            Div(){\nCode(\n    Simple text +=<b>bold</b>\n)\n            }\n        }\n        Div(col-sm-6 bg-primary text-white){\n            Result:\n            Simple text +=<b>bold</b>\n        }\n    }\n}\nDiv(panel-heading bg-info text-white){\n    Case №26\n}\nDiv(panel-body bg-info text-white){\n    Div(row){\n        Div(col-sm-6 bg-info text-white){\n            Expected:\n            Div(){\nCode(\n    Div(myclass control, Content of the Div)\n)\n            }\n        }\n        Div(col-sm-6 bg-info text-white){\n            Result:\n            Div(myclass control, Content of the Div)\n        }\n    }\n}\nDiv(panel-heading bg-primary text-white){\n    Case №27\n}\nDiv(panel-body bg-primary text-white){\n    Div(row){\n        Div(col-sm-6 bg-primary text-white){\n            Expected:\n            Div(){\nCode(\n    input Div(myclass, Content Div(mypar) the Div)\n)\n            }\n        }\n        Div(col-sm-6 bg-primary text-white){\n            Result:\n            input Div(myclass, Content Div(mypar) the Div)\n        }\n    }\n}\nDiv(panel-heading bg-info text-white){\n    Case №28\n}\nDiv(panel-body bg-info text-white){\n    Div(row){\n        Div(col-sm-6 bg-info text-white){\n            Expected:\n            Div(){\nCode(\n    Div(, Input(myid, form-control, Your name)\n    Input(,,,text))\n)\n            }\n        }\n        Div(col-sm-6 bg-info text-white){\n            Result:\n            Div(, Input(myid, form-control, Your name)\n            Input(,,,text))\n        }\n    }\n}\nDiv(panel-heading bg-primary text-white){\n    Case №29\n}\nDiv(panel-body bg-primary text-white){\n    Div(row){\n        Div(col-sm-6 bg-primary text-white){\n            Expected:\n            Div(){\nCode(\n    Div(Class: mydiv1, Body:\n    Div(Class: mydiv2,\n    Div(Body:\n    Input(Value: my default text))))\n)\n            }\n        }\n        Div(col-sm-6 bg-primary text-white){\n            Result:\n            Div(){\nCode(\n    Div(Class: mydiv1, Body:\n    Div(Class: mydiv2,\n    Div(Body:\n    Input(Value: my default text))))\n)\n            }\n        }\n    }\n}\nDiv(panel-heading bg-info text-white){\n    Case №30\n}\nDiv(panel-body bg-info text-white){\n    Div(row){\n        Div(col-sm-6 bg-info text-white){\n            Expected:\n            Div(){\nCode(\n    P(Some Span(fake(text) Strong(very Em(important Label(news)))))\n)\n            }\n        }\n        Div(col-sm-6 bg-info text-white){\n            result:\n            P(Some Span(fake(text) Strong(very Em(important Label(news)))))\n        }\n    }\n}\nDiv(panel-heading bg-primary text-white){\n    Case №31\n}\nDiv(panel-body bg-primary text-white){\n    Div(row){\n        Div(col-sm-6 bg-primary text-white){\n            Expected:\n            Div(){\nCode(\n    Form(myclass, Input(myid){\n        {\n            Button(Submit,default_page,myclass)\n        )\n    )\n                }\n            }\n            Div(col-sm-6 bg-primary text-white){\n                result:\n                Form(myclass, Input(myid){\n                    Button(Submit,default_page,myclass)\n                ){}\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №32\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){\nCode(\n    Button(My Contract,, myclass, NewEcosystem, \"Name=myid,Id=i10,Value\").Style( .btn {border: 10px 10px;})\n)\n                    }\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    Button(My Contract,, myclass, NewEcosystem, \"Name=myid,Id=i10,Value\").Style( .btn {border: 10px 10px;})\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №33\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){\nCode(\n    Div(myclass)\n    Div().Style{\n        .class {\n            text-style: italic;\n        }\n    }\n    Div()\n)\n                    }\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    Div(myclass)\n                    Div().Style{\n                        .class {\n                            text-style: italic;\n                        }\n                    }\n                    Div()\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №34\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){\nCode(\n    Div(myclass){Div\n    (\n\n    )\n    P(){Div(id){Label(My #text#,myl,forname)}}}\n)\n                    }\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    Div(myclass){Div()\n                    P(){Div(id){Label(My #text#,myl,forname)}}}\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №35\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){\nCode(\n    SetVar(istrue, 1)If(GetVar(istrue),OK)If(GetVar(isfalse)){Skip}.Else{Span(Else OK)}\n)\n                    }\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    SetVar(istrue, 1)If(GetVar(istrue),OK)If(GetVar(isfalse)){Skip}.Else{Span(Else OK)}\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №35\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){\nCode(\n    If(false){First}.ElseIf(0){Skip}.ElseIf(1){\n        Second Span(\n            If(text){item}\n        )\n    }.ElseIf(true){Third}.Else{Fourth}\n)\n                    }\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    If(false){First}.ElseIf(0){Skip}.ElseIf(1){\n                        Second Span(\n                            If(text){item}\n                        )\n                    }.ElseIf(true){Third}.Else{Fourth}\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №36\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){\nCode(\n    Button(Page: link){My Button}.Alert(ConfirmButton: ConfBtn, CancelButton: CancelBtn, Text: Alert text, Icon:myicon)\n)\n                    }\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    Button(Page: link){My Button}.Alert(ConfirmButton: ConfBtn, CancelButton: CancelBtn, Text: Alert text, Icon:myicon)\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №37\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){\nCode(\n    Input(myid, form-control, Your name).Validate(minLength: 6, maxLength: 20)\n    InputErr(Name: myid, minLength: minLength error)\n)\n                    }\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    Input(myid, form-control, Your name).Validate(minLength: 6, maxLength: 20)\n                    InputErr(Name: myid, minLength: minLength error)\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №38\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){\nCode(\n    MenuItem(Menu 1,page1)\n    MenuGroup(SubMenu){\n        MenuItem(Menu 2, page2)\n        MenuItem(Page: page3, Title: Menu 3, Icon: person)\n    }\n)\n                    }\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    MenuItem(Menu 1,page1)\n                    MenuGroup(SubMenu){\n                        MenuItem(Menu 2, page2)\n                        MenuItem(Page: page3, Title: Menu 3, Icon: person)\n                    }\n                }\n            }\n            Div(panel-heading bg-info text-white){\n                Case №39\n            }\n            Div(panel-body bg-info text-white){\n                Div(row){\n                    Div(col-sm-6 bg-info text-white){\n                        Expected:\n                        Div(){\nCode(\n    SetVar(testvalue, The, #n#, Value).(n, New).(param,\"23\")Span(Test value equals #testvalue#).(#param#)\n)\n                        }\n                    }\n                    Div(col-sm-6 bg-info text-white){\n                        result:\n                        SetVar(testvalue, The, #n#, Value).(n, New).(param,\"23\")Span(Test value equals #testvalue#).(#param#)\n                    }\n                }\n            }\n            Div(panel-heading bg-primary text-white){\n                Case №40\n            }\n            Div(panel-body bg-primary text-white){\n                Div(row){\n                    Div(col-sm-6 bg-primary text-white){\n                        Expected:\n                        Div(){\nCode(\n    SetVar(test, mytest).(empty,0)And(0,test,0)Or(0,#test#)Or(0, And(0,0))And(0,Or(0,my,while))And(1,#mytest#)Or(#empty#, And(#empty#, line))\n)\n                        }\n                    }\n                    Div(col-sm-6 bg-primary text-white){\n                        result:\n                        SetVar(test, mytest).(empty,0)And(0,test,0)Or(0,#test#)Or(0, And(0,0))And(0,Or(0,my,while))And(1,#mytest#)Or(#empty#, And(#empty#, line))\n                    }\n                }\n            }\n            Div(panel-heading bg-info text-white){\n                Case №41\n            }\n            Div(panel-body bg-info text-white){\n                Div(row){\n                    Div(col-sm-6 bg-info text-white){\n                        Expected:\n                        Div(){\nCode(\n    Address()Span(Address(-5728238900021))Address(3467347643873).(-6258391547979339691)\n)\n                        }\n                    }\n                    Div(col-sm-6 bg-info text-white){\n                        result:\n                        Address()Span(Address(-5728238900021))Address(3467347643873).(-6258391547979339691)\n                    }\n                }\n            }\n            Div(panel-heading bg-primary text-white){\n                Case №42\n            }\n            Div(panel-body bg-primary text-white){\n                Div(row){\n                    Div(col-sm-6 bg-primary text-white){\n                        Expected:\n                        Div(){\nCode(\n    Table(src, \"ID=id,name,Wallet=wallet\")\n)\n                        }\n                    }\n                    Div(col-sm-6 bg-primary text-white){\n                        result:\n                        Table(src, \"ID=id,name,Wallet=wallet\")\n                    }\n                }\n            }\n            Div(panel-heading bg-info text-white){\n                Case №43\n            }\n            Div(panel-body bg-info text-white){\n                Div(row){\n                    Div(col-sm-6 bg-info text-white){\n                        Expected:\n                        Div(){\nCode(\n    Chart(Type: \"bar\", Source: src, FieldLabel: \"name\", FieldValue: \"count\", Colors: \"red, green\")\n)\n                        }\n                    }\n                    Div(col-sm-6 bg-info text-white){\n                        result:\n                        Chart(Type: \"bar\", Source: src, FieldLabel: \"name\", FieldValue: \"count\", Colors: \"red, green\")\n                    }\n                }\n            }\n            Div(panel-heading bg-primary text-white){\n                Case №44\n            }\n            Div(panel-body bg-primary text-white){\n                Div(row){\n                    Div(col-sm-6 bg-primary text-white){\n                        Expected:\n                        Div(){\nCode(\n    InputMap(mapName, `{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}`, PolyType, satelite),\n    `[{\"tag\":\"inputMap\",\"attr\":{\"@value\":\"{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}\",\"maptype\":\"satelite\",\"name\":\"mapName\",\"type\":\"PolyType\"}}]\n)\n                        }\n                    }\n                    Div(col-sm-6 bg-primary text-white){\n                        result:\n                        InputMap(mapName, `{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}`, PolyType, satelite),\n                        [{\"tag\":\"inputMap\",\"attr\":{\"@value\":\"{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}\",\"maptype\":\"satelite\",\"name\":\"mapName\",\"type\":\"PolyType\"}}]\n                    }\n                }\n            }\n            Div(panel-heading bg-info text-white){\n                Case №45\n            }\n            Div(panel-body bg-info text-white){\n                Div(row){\n                    Div(col-sm-6 bg-info text-white){\n                        Expected:\n                        Div(){\nCode(\n    InputMap(mapName, `{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}`, PolyType, satelite).Validate(ping: pong)\n)\n                        }\n                    }\n                    Div(col-sm-6 bg-info text-white){\n                        result:\n                        InputMap(mapName, `{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}`, PolyType, satelite).Validate(ping: pong)\n                    }\n                }\n            }\n            Div(panel-heading bg-primary text-white){\n                Case №45\n            }\n            Div(panel-bod bg-primary text-whitey){\n                Div(row){\n                    Div(col-sm-6 bg-primary text-white){\n                        Expected:\n                        Div(){\nCode(\n    Map(Input data, satelite, 300)\n)\n                        }\n                    }\n                    Div(col-sm-6 bg-primary text-white){\n                        result:\n                        Map(Input data, satelite, 300)\n                    }\n                }\n            }\n        }",
            "Name": "tests2",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(container){\n    SetVar(\"blockNum\", 1)\n    Include(tests_block_1)\n    Div(panel){\n        Div(panel-body){\n            Next block is block number #blockNum#!\n        }\n    }\n    DBFind(\"members\", membersSrc)\n    Include(tests_block_2)\n    Div(panel){\n        Div(panel-heading){\n            Next block is block number #blockNum#! Pass include block into variable!\n        }\n        Div(panel-body){\n            SetVar(\"block3\", Include(tests_block_3))\n            If(GetVar(block3) == \"Block in variable!\"){\n                Span(Class: text-success, Body: Success!)\n            }.Else{\n                Span(Class: text-danger, Body: Fail!)\n            }\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Next block is block number 4! Set parent variable of block content!\n        }\n        Div(panel-body){\n            SetVar(\"block4\", Include(tests_block_4))\n            If(GetVar(block4) == \"Block in variable!\"){\n                Span(Class: text-success, Body: Success!)\n            }.Else{\n                Span(Class: text-danger, Body: Fail!)\n            }\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Next block is block number 5! Recursive block include!\n        }\n        Div(panel-body){\n            SetVar(recursiveBlockNum, 0)\n            Include(tests_block_5)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Span(Body: \"Next block is block number 5! Include #blockName#!\")\n        }\n        Div(panel-body){\n            SetVar(blockName, tests_block_5)\n            SetVar(\"blockContent\", Include(#blockName#))\n            If(GetVar(\"blockContent\") == \"\"){\n                Span(Class: text-danger, Body: Fail!)\n            }.Else{\n                Span(Class: text-success, Body: Success!)\n            }\n        }\n    }\n}",
            "Name": "tests_blocks",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetVar(test_contract,buffer_Manager)\nDBFind(contracts).Where(\"name='#test_contract#'\").Vars(cont)\nDiv(container){\n    If(#cont_id#>0){\n        Data(buffer_ops, \"name\"){\n            clean\n            set\n            array_add_value\n            array_remove_value\n        }\n        Data(form, \"Name,Type,Src\"){\n            Action,select,buffer_ops\n            Val,input,\n        }\n        DBFind(buffer_data, src_buf).Where(\"key='tests_buffer' and member_id=#key_id#\")\n        Form(){\n            Div(col-sm-offset-2 col-sm-10){\n                Table(src_buf)\n            }\n            ForList(form){\n                Div(form-group row){\n                    Div(col-sm-2 text-right mt-sm){\n                        LangRes(#Name#)\n                    }\n                    Div(col-sm-10){\n                        If(#Type#==select){\n                            Select(Name:#Name#, Source:#Src#, NameColumn: name, ValueColumn: name)\n                        }.ElseIf(#Type#==input){\n                            Input(Name:#Name#)\n                        }\n                    }\n                }\n            }\n            Div(col-sm-12 text-right){\n                Button(Body:OK, Page:tests_buffer_manager, Class: btn btn-primary, Contract: #test_contract#, Params:\"Key=tests_buffer\")\n            }\n        }\n    }.Else{\n        Div(alert alert-warning){\n            Contract \"#test_contract#\" not found\n        }\n    }\n}",
            "Name": "tests_buffer_manager",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(container){\n    Div(panel){\n        Div(panel-heading){\n            SetVar(\"num1\", 9223372036854775807).(\"num2\", 9223372036854775807).(\"num3\", Calculate(#num1#+#num2#, Type:money)).(\"num4\", 7)\n            Case №0.1 BIG expression #num1#*#num2#*#num3#/#num4#*5\n        }\n        Div(panel-body){\n            Result = Calculate(Exp: \"#num1#*#num2#*#num3#/#num4#*5\", Type: money, Prec: 1000)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            SetVar(\"num1\", 0.00000000000000000001).(\"num2\", 0.00000000000000001).(\"num3\", Calculate(#num1#+#num2#, Type:money)).(\"num4\", 0.0000000000000000007)\n            Case №0.2 miniBIG expression #num1#*#num2#*#num3#/#num4#*5\n        }\n        Div(panel-body){\n            Result = Calculate(Exp: \"#num1#*#num2#*#num3#/#num4#*5\", Type: money, Prec: 1000)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №1 Division by zero\n        }\n        Div(panel-body){\n            Result = Calculate((1+1)/(1-1))\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №2 Simple expression 1*0.00000000001/0.00000000001 = 1\n        }\n        Div(panel-body){\n            Result = Calculate(1*0.00000000001/0.00000000001)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №2 Expression in expression Calculate (2*Calculate (2*2)*2) = 16\n        }\n        Div(panel-body){\n            Result = Calculate(2*Calculate(2*2)*2)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №3 Wrong expression 2*/2\n        }\n        Div(panel-body){\n            Result = Calculate(2*/2)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №4 Numbers in string \"2\"*2 = 4\n        }\n        Div(panel-body){\n            Result = Calculate(\"2\"*2)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №5 Simple DateTime\n        }\n        Div(panel-body){\n            Result = DateTime(2018-04-01T10:59:59)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №6 DateTime with format YYYY-MM-DD HH:MI:SS short year YY\n        }\n        Div(panel-body){\n            Result = DateTime(2018-04-01T10:59:59, \"YYYY-MM-DD HH:MI:SS short year YY\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №6 DateTime 0001 year\n        }\n        Div(panel-body){\n            Result = DateTime(0001-04-01T10:59:59, \"YYYY-MM-DD HH:MI:SS short year YY\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №7 DateTime 9999 year\n        }\n        Div(panel-body){\n            Result = DateTime(9999-04-01T10:59:59, \"YYYY-MM-DD HH:MI:SS short year YY\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №6 DateTime 13 mouth\n        }\n        Div(panel-body){\n            Result = DateTime(2018-13-01T10:59:59, \"YYYY-MM-DD HH:MI:SS short year YY\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №7 DateTime bad input datetime format 18-04-01T10:59:59\n        }\n        Div(panel-body){\n            Result = DateTime(18-04-01T10:59:59, \"YYYY-MM-DD HH:MI:SS short year YY\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №8 DateTime 30 feb 2018\n        }\n        Div(panel-body){\n            Result = DateTime(2018-02-30T10:59:59, \"YYYY-MM-DD HH:MI:SS short year YY\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №9 Now\n        }\n        Div(panel-body){\n            Result = Now(\"YYYY-MM-DD HH:MI:SS short year YY\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №10 Now with interval +365 days + 24 hour + 60 minutes - 1 month\n        }\n        Div(panel-body){\n            Result = Now(\"YYYY-MM-DD HH:MI:SS short year YY\", +365 days + 24 hour + 60 minutes - 1 month)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №11 Now with bad interval +1 man\n        }\n        Div(panel-body){\n            Result = Now(\"YYYY-MM-DD HH:MI:SS short year YY\", +1 man)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №12 Now with BIG interval +10001 year\n        }\n        Div(panel-body){\n            Result = Now(\"YYYY-MM-DD HH:MI:SS short year YY\", +10001 year)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №13 cmptime tests\n        }\n        Div(panel-body){\n            SetVar(\"date1\", Now(datetime)).(\"date2\", DateTime(2018-02-01T10:59:59))\n            If(CmpTime(GetVar(\"date1\"), GetVar(\"date2\")) == 1){\n                Div(Class: text-success, Body: GetVar(\"date1\") > GetVar(\"date2\")\n            }.Else{\n                Div(Class: text-danger, Body: GetVar(\"date1\") <= GetVar(\"date2\")\n            }\n\n            SetVar(\"date1\", Now(datetime)).(\"date2\", Now(datetime))\n            If(CmpTime(GetVar(\"date1\"), GetVar(\"date2\")) == 0){\n                Div(Class: text-success, Body: GetVar(\"date1\") = GetVar(\"date2\")\n            }.Else{\n                Div(Class: text-danger, Body: GetVar(\"date1\") <> GetVar(\"date2\")\n            }\n\n            SetVar(\"date1\", Now(datetime)).(\"date2\", DateTime(2018-02-30T10:59:59))\n            If(CmpTime(GetVar(\"date1\"), GetVar(\"date2\")) < -1){\n                Div(Class: text-success, Body: GetVar(\"date1\") can't cmp with bad format GetVar(\"date2\"). Result is CmpTime(GetVar(\"date1\"), GetVar(\"date2\")))\n            }.Else{\n                Div(Class: text-danger, Body: GetVar(\"date1\") <=> GetVar(\"date2\"))\n            }\n\n            SetVar(\"date1\", DateTime(9999-02-01T10:59:59)).(\"date2\", Now(datetime, + 10001 year))\n            If(CmpTime(GetVar(\"date1\"), GetVar(\"date2\")) = -1){\n                Div(Class: text-success, Body: GetVar(\"date1\") < GetVar(\"date2\")\n            }.Else{\n                Div(Class: text-danger, Body: GetVar(\"date1\") <=> GetVar(\"date2\")\n            }\n            \n        }\n    }\n}",
            "Name": "tests_calc",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(Class: container) {\n    Div(panel){\n        Div(panel-heading){\n            Case №0 If Without Condition\n        }\n        Div(panel-body){\n            Expected: success\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            If(){\n                fail\n            }.Else{\n                success\n            }\n        }\n    }\n\n    Div(panel){\n        Div(panel-heading){\n            Case №1 Simple Condition With Float (1 == 1 && (1.001 == 1 || 0.001 == 0))\n        }\n        Div(panel-body){\n            Expected: success\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            If(And(1 == 1, Or(1.001 == 1, 0.001 == 0))){\n                fail\n            }.Else{\n                success\n            }\n        }\n    }\n\n    Div(panel){\n        Div(panel-heading){\n            Case №2 Simple Condition (1 == 1 && 0 == 1)\n        }\n        Div(panel-body){\n            Expected: success\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            If(And(1 == 1, 0 == 1)){\n                fail\n            }.Else{\n                success\n            }\n        }\n    }\n\n    Div(panel){\n        Div(panel-heading){\n            Case №3 Condition With Variables\n        }\n        Div(panel-body){\n            Expected: success\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            SetVar(\"Condition1\", 1).(\"Condition2\", 0.3)\n            If(And( GetVar(\"Condition2\") == 0.3, And( GetVar(\"Condition1\") == 1, Or( GetVar(\"Condition2\") == 0, GetVar(\"Condition1\") == 0)))){\n                Span(fail)\n            }.Else{\n                Span(success)\n            }\n        }\n    }\n\n    Div(panel){\n        Div(panel-heading){\n            Case №4 Previous Condition Without Variables (Hardcoded numbers)\n        }\n        Div(panel-body){\n            Expected: success\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            If(And(0.3 == 0.3, And(1 == 1, Or(0.3 == 0, 1 == 0)))){\n                Span(fail)\n            }.Else{\n                Span(success)\n            }\n        }\n    }\n\n    Div(panel){\n        Div(panel-heading){\n            Case №5 Simple Condition With Float And Variable\n        }\n        Div(panel-body){\n            Expected: success\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            SetVar(\"Condition1\", 1.001)\n            If(#Condition1# > 1){\n                success\n            }.Else{\n                fail\n            }\n        }\n    }\n\n    Div(panel){\n        Div(panel-heading){\n            Case №6 Condition With HotReplacing Variable (Code(#VarName#))\n        }\n        Div(panel-body){\n            Expected: success\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            SetVar(\"Condition3\", 1)\n            If(#Condition3# == 2){\n                fail2.1\n            }.ElseIf(#Condition3# == 1){\n                success\n                SetVar(\"Condition3\", 2)\n            }.ElseIf(#Condition3# == 2){\n                fail2.2\n            }.Else{\n                fail.else\n            }\n        }\n    }   \n\n    Div(panel){\n        Div(panel-heading){\n            Case №7 Condition With HotReplacing Variable (Code(GetVar(VarName)))\n        }\n        Div(panel-body){\n            Expected: success\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            SetVar(\"Condition4\", 1)\n            If(GetVar(Condition4) == 2){\n                fail2.1\n            }.ElseIf(GetVar(Condition4) == 1){\n                success\n                SetVar(\"Condition4\", 2)\n            }.ElseIf(GetVar(Condition4) == 2){\n                fail2.2\n            }.Else{\n                fail.else\n            }\n        }\n    }  \n    Div(panel){\n        Div(panel-heading){\n            Case №8 Condition 10 < 9\n        }\n        Div(panel-body){\n            Expected: success\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            SetVar(\"Condition5\", 1)\n            If(GetVar(\"Condition5\") < -1){\n                fail => 1 < -1\n            }.Else{\n                success\n            }\n            \n        }\n    }  \n}",
            "Name": "tests_conditions",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(container){\n    Div(panel){\n        Div(panel-heading){\n            Case №1 Simple form with String and Integer params. Expected: info \"inputName = inputValue\"\n        }\n        Div(panel-body){\n            Form(){\n                Div(input-group){\n                    Label(For: Name, Body: \"Enter the name:\")\n                    Input(Type: text, Name: Name, Placeholder: Price)\n                }\n                Div(input-group){\n                    Label(For: Value, Body: \"Enter the value:\")\n                    Input(Type: text, Name: Value, Placeholder: 100)\n                }\n                Div(input-group text-center){\n                    Input(Type: hidden, Name: TestNum, Value: 1)\n                    Button(Body: Send, Contract: tests_Contract, Class: btn btn-primary)    \n                }\n            }\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №2 Form with 1 String, 1 Integer and 20 hidden String(len = 200) params. Expected: info \"All 20 string fields with >=200 symbol length. inputName = inputValue\"\n        }\n        Div(panel-body){\n            Form(){\n                Div(input-group){\n                    Label(For: Name, Body: \"Enter the name:\")\n                    Input(Type: text, Name: Name, Placeholder: Name)\n                }\n                Div(input-group){\n                    Label(For: value, Body: \"Enter the value:\")\n                    Input(Type: text, Name: Value, Placeholder: 50)\n                }\n                Div(input-group){\n                    Input(Type: hidden, Name: TestNum, Value: 2)\n                    Input(Type: hidden, Name: Field1, Value: Field1BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field2, Value: Field2BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field3, Value: Field3BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field4, Value: Field4BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field5, Value: Field5BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field6, Value: Field6BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field7, Value: Field7BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field8, Value: Field8BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field9, Value: Field9BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field10, Value: Field10BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field11, Value: Field11BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field12, Value: Field12BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field13, Value: Field13BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field14, Value: Field14BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field15, Value: Field15BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field16, Value: Field16BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field17, Value: Field17BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field18, Value: Field18BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field19, Value: Field19BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Input(Type: hidden, Name: Field20, Value: Field20BigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigBigValue) \n                    Button(Body: Send, Contract: tests_Contract, Class: btn btn-primary)    \n                }\n            }\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №3 Simple button with 2 string params without form Expected:info \"CustomName = 100\"\n        }\n        Div(panel-body){\n            Form(){\n                Div(input-group){\n                    Input(Type: hidden, Name: TestNum, Value: 3)\n                    Button(Body: Send, Contract: tests_Contract, Class: btn btn-primary, Params: \"Name=CustomName,Value=100\")    \n                }\n            }\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №4 Push variables into contract. Expected:info \"VarName = inputValue\"\n        }\n        Div(panel-body){\n            Form(){\n                SetVar(\"name\", \"VarName\").(\"value\", \"12345\")\n                Div(input-group){\n                    Input(Type: text, Name: Value, Placeholder: \"123\", Value: \"\")\n                }\n                Div(input-group){\n                    Input(Type: hidden, Name: TestNum, Value: 4)\n                    Button(Body: Send, Contract: tests_Contract, Class: btn btn-primary, Params: \"Name=#name#\")    \n                }\n            }\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №5 10 CompositeContract with 1 button\n        }\n        Div(panel-body){\n            Form(){\n                Div(input-group){\n                    Button(Body: Send, Class: btn btn-primary, Page: tests_contracts).CompositeContract(tests_Contract, [\n                        {\"Name\":\"Composite1\",\"Value\":\"1\",\"TestNum\":\"5\"},\n                        {\"Name\":\"Composite1\",\"Value\":\"1\",\"TestNum\":\"5\"},\n                        {\"Name\":\"Composite1\",\"Value\":\"1\",\"TestNum\":\"5\"},\n                        {\"Name\":\"Composite1\",\"Value\":\"1\",\"TestNum\":\"5\"},\n                        {\"Name\":\"Composite1\",\"Value\":\"1\",\"TestNum\":\"5\"}\n                    ])\n                }\n            }\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №6 Form with all type of fields\n        }\n        Div(panel-body){\n            Form(){\n                Div(input-group){\n                    Label(For: Value, Body: \"Image input:\")\n                    ImageInput(Image, 50)\n                }\n                Div(input-group){\n                    Label(For: Value, Body: \"RadioGroup:\")\n                    Data(Source: src, Columns: \"name,value\", Data: \n                        yes,1\n                        no,2    \n                    )\n                    RadioGroup(Source: src, Name: Radio, NameColumn: name, ValueColumn: value, Value: 1)\n                }\n                Div(input-group){\n                    Label(For: Value, Body: \"Select:\")\n                    Data(Source: src, Columns: \"name,value\", Data: \n                        First item,1\n                        Second item,2\n                        Third item,3    \n                    )\n                    Select(Source: src, Name: Select, NameColumn: name, ValueColumn: value, Value: 1)\n                }\n                Div(input-group){\n                    Label(For: Value, Body: \"InputMap:\")\n                    InputMap(Name: InputMap, Type: polygon, MapType: hybrid, Value: `{\"zoom\":8, \"center\":{\"lat\":55.749942860682545,\"lng\":37.6207172870636}}`)\n                }\n                Div(input-group){\n                    Input(Type: hidden, Name: TestNum, Value: 6)\n                    Button(Body: Send, Contract: tests_Contract, Class: btn btn-primary)    \n                }\n            }\n        }\n    }\n}",
            "Name": "tests_contracts",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(container){\n    SetVar(\"table\", \"tests\")\n    Div(panel){\n        Div(panel-heading){\n            Case №1 Simple DBFind\n        }\n        Div(panel-body){\n            DBFind(#table#, src1)\n            Table(Source: src1, Columns: \"Name=name,Name1=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №2 Simple DBFind with Columns\n        }\n        Div(panel-body){\n            DBFind(#table#, src2).Columns(\"name, value->name1\")\n            Table(Source: src2, Columns: \"Name=name,Name1=value.name1\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №3 DBFind with Where\n        }\n        Div(panel-body){\n            DBFind(#table#, src3).Columns(\"name, value->name1\").Where(value->name1 = 'value1')\n            Table(Source: src3, Columns: \"Name=name,Name1=value.name1\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №4 DBFind with WhereId\n        }\n        Div(panel-body){\n            DBFind(#table#, src4).Columns(\"name, value->name1\").WhereId(0)\n            Table(Source: src4, Columns: \"Name=name,Name1=value.name1\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №5 DBFind with simple Order\n        }\n        Div(panel-body){\n            DBFind(#table#, src5).Order(\"name desc\")\n            Table(Source: src5, Columns: \"Name=name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №6 DBFind with Order by json field\n        }\n        Div(panel-body){\n            DBFind(#table#, src6).Order(\"value->name1 desc\")\n            Table(Source: src6, Columns: \"Name=name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №7 DBFind with limit and offset\n        }\n        Div(panel-body){\n            DBFind(#table#, src7).Limit(5).Offset(3)\n            Table(Source: src7, Columns: \"Name=name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №8 DBFind with count\n        }\n        Div(panel-body){\n            DBFind(#table#, src8).Count(count)\n            If( #count# > 0 ){\n                Div(text-success){ Count is #count# }\n            }.Else{\n                Div(text-danger){ Count is #count# }\n            }\n            Table(Source: src8, Columns: \"Name=name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №9 DBFind with current ecosystem #ecosystem_id#\n        }\n        Div(panel-body){\n            DBFind(#table#, src9).Ecosystem( #ecosystem_id# )\n            Table(Source: src9, Columns: \"Name=name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №10 DBFind with incorrect ecosystem id -1\n        }\n        Div(panel-body){\n            DBFind(#table#, src10).Ecosystem( -1 )\n            Table(Source: src10, Columns: \"Name=name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №11 DBFind with custom fields\n        }\n        Div(panel-body){\n            DBFind(#table#, src11).Custom(custom_name){\n                Strong(Class: text-success, Body: Custom #name#)\n            }\n            Table(Source: src11, Columns: \"Name=custom_name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №12 DBFind with custom fields and replace value in other fields\n        }\n        Div(panel-body){\n            DBFind(#table#, src12).Custom(custom_name){\n                Strong(Class: text-success, Body: Custom #name#)\n                SetVar(\"value\", \"New Value\")\n            }\n            Table(Source: src12, Columns: \"Name=custom_name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №13 DBFind with use global vars in custom\n        }\n        Div(panel-body){\n            SetVar(global_var, \"Global Var\")\n            DBFind(#table#, src13).Custom(custom_name){\n                Strong(Class: text-success, Body: Custom #name# with #global_var#)\n            }\n            Table(Source: src13, Columns: \"Name=custom_name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №14 DBFind with prefixed vars\n        }\n        Div(panel-body){\n            DBFind(#table#, src14).Vars(prefix)\n            Prefixed \"name\" value is #prefix_name#. Prefixed \"value\" value is #prefix_value#\n            Table(Source: src14, Columns: \"Name=name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №15 DBFind with prefixed vars and custom field\n        }\n        Div(panel-body){\n            DBFind(#table#, src15).Vars(prefix).Custom(custom_name){\n                Strong(Class: text-success, Body: Custom #name#)\n            }\n            Prefixed \"name\" value is #prefix_name#. Prefixed \"value\" value is #prefix_value#. Prefixed custom column \"custom_name\" is #prefix_custom_name#\n            Table(Source: src15, Columns: \"Name=custom_name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №16 DBFind with prefixed vars json vars\n        }\n        Div(panel-body){\n            DBFind(#table#, src16).Vars(prefix).Columns(\"name,value->name1\")\n            Prefixed \"name\" value is #prefix_name#. Prefixed \"value.name1\" value is #prefix_value_name1#\n            Table(Source: src16, Columns: \"Name=name,Value=value.name1\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading text-center text-success){\n            Span(Body: Try to inject some sql with DBFind).Style(font-size:20px;font-weight:bold;)\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №17 DBFind with sql in columns, select from other table(get name of current user)\n        }\n        Div(panel-body){\n            DBFind(#table#, src17).Columns(name, value, (select member_name from \"1_members\" where id = '#key_id#') as name).Limit(1)\n            Table(Source: src17, Columns: \"Name=name,Value=value\")\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №18 DBFind try to execute second query(need pq error)\n        }\n        Div(panel-body){\n            DBFind(#table#, src18).Columns(name, value FROM \"1_parameters\" ; UPDATE \"1_parameters\" set name = name + 'n' -- )\n            Table(Source: src18, Columns: \"Name=name,Value=value\")\n        }\n    }\n}",
            "Name": "tests_db",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(container){\n    Div(row){\n        Form(col-sm-12 text-right){\n            Input(Name:File1, Type:file)\n            Input(Name:File2, Type:file)\n            Button(Body: upload, Class: btn btn-primary, Contract: tests_FileUpload)\n        }\n    }\n    Div(row){\n        Div(col-sm-12 table-responsive){\n            Table(bins)\n        }\n    }\n}",
            "Name": "tests_file_upload",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(container){\n    Div(panel){\n        Div(panel-heading){\n            Case №1 Simple Json Object\n        }\n        Div(panel-body){\n            Expected:\n            Div(){key1 = value1}\n            Div(){key2 = value2}\n            Div(){key3 = value3}\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            JsonToSource(Source: Json1, {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"})\n            ForList(Source: Json1){\n                Div(){#key# = #value#}\n            }\n        }\n    }\n\n    Div(panel){\n        Div(panel-heading){\n            Case №2 Simple Json List\n        }\n        Div(panel-body){\n            Expected:\n            Div(){0 = value1}\n            Div(){1 = value2}\n            Div(){2 = value3}\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            JsonToSource(Source: Json1, [\"value1\", \"value2\", \"value3\"])\n            ForList(Source: Json1){\n                Div(){#key# = #value#}\n            }\n        }\n    }\n\n    Div(panel){\n        Div(panel-heading){\n            Case №3 Simple Json List Of Objects\n        }\n        Div(panel-body){\n            Expected:\n            Div(){0 = {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}}\n            Div(){1 = {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}}\n            Div(){2 = {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}}\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            JsonToSource(Source: Json1, [{\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}, {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}, {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}])\n            ForList(Source: Json1){\n                Div(){#key# = #value#}\n            }\n        }\n    }\n\n    Div(panel){\n        Div(panel-heading){\n            Case №4 Simple Json Object With List\n        }\n        Div(panel-body){\n            Expected:\n            Div(){key1 = [value1.1,value1.2,value1.3]}\n            Div(){key2 = [value2.1,value2.2]}\n            Div(){key3 = [value3.1,value3.2,value3.3]}\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            JsonToSource(Source: Json1, {\"key1\":[\"value1.1\", \"value1.2\", \"value1.3\"], \"key2\":[\"value2.1\", \"value2.2\"], \"key3\":[\"value3.1\", \"value3.2\", \"value3.3\"]})\n            ForList(Source: Json1){\n                Div(){#key# = #value#}\n            }\n        }\n    }\n    \n    Div(panel){\n        Div(panel-heading){\n            Case №4 Depth Json Object With List\n        }\n        Div(panel-body){\n            Expected:\n            Div(){key1 = [value1.1,value1.2,value1.3]}\n            Div(){key2 = [value2.1,value2.2]}\n            Div(){key3 = [value3.1,value3.2,value3.3]}\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            JsonToSource(Source: Json1, {\"key1\":[\"value1.1\", \"value1.2\", \"value1.3\"], \"key2\":[\"value2.1\", \"value2.2\"], \"key3\":[\"value3.1\", \"value3.2\", \"value3.3\"]})\n            ForList(Source: Json1){\n                JsonToSource(Json11, #value#)\n                Div(){\n                    #key# = [\n                        ForList(Json11){\n                            #value#,\n                        }\n                    ]\n                }\n            }\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №5 Json Object With Other Object\n        }\n        Div(panel-body){\n            Expected:\n            Div(){key1 = {\"key1.1\":\"value1.1\", \"key1.2\":\"value1.2\", \"key1.3\":\"value1.3\"}}\n            Div(){key2 = {\"key2.1\":\"value2.1\", \"key2.2\":\"value2.2\", \"key2.3\":\"value2.3\"}}\n            Div(){key3 = value3}\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            JsonToSource(Source: Json1, {\"key1\":{\"key1.1\":\"value1.1\", \"key1.2\":\"value1.2\", \"key1.3\":\"value1.3\"}, \"key2\":{\"key2.1\":\"value2.1\", \"key2.2\":\"value2.2\", \"key2.3\":\"value2.3\"}, \"key3\":\"value3\"})\n            ForList(Source: Json1){\n                Div(){#key# = #value#}\n            }\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №6 Json Value Replacing\n        }\n        Div(panel-body){\n            Expected:\n            Div(){key1 = value4}\n            Div(){key2 = value2}\n            Div(){key3 = value3}\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Result:\n        }\n        Div(panel-body){\n            JsonToSource(Source: Json1, {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\", \"key1\":\"value4\"})\n            ForList(Source: Json1){\n                Div(){#key# = #value#}\n            }\n        }\n    }\n}",
            "Name": "tests_json",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(container){\n    $tests_lang$ LangRes(\"tests_lang\", \"EV\") LangRes(\"tests_lang\", \"ev\") LangRes(\"tests_lang\", \"ru\")\n    $tests_lang_2$ LangRes(\"tests_lang_2\", \"ru\") LangRes(\"tests_lang_2\", \"En\") LangRes(\"tests_lang_2\", \"eN\")\n    SetVar(\"tests_lang\", $tests_lang$)\n    GetVar(tests_lang)\n    LangRes(\"FakeLangName\")\n    $FakeLangName$\n    SetVar(\"res\", \"tests_lang\")\n    SetVar(\"lang\", #tests_lang#)\n    LangRes(#res#, #lang#)\n}",
            "Name": "tests_lang",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(container){\n    Div(panel){\n        Div(panel-heading){\n            Case №1 Simple source\n        }\n        Div(panel-body){\n            Div(row){\n                Div(col-sm-6){\n                    Div(form-group){Expected}\n                    Div(form-group){\n                        Div(){Name1 = 1}\n                        Div(){Name2 = 2}\n                        Div(){Name3 = 3}\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-sm-6){Name}\n                            Div(col-sm-6){Value}\n                        }\n                        Div(row){\n                            Div(col-sm-6){Name1}\n                            Div(col-sm-6){1}\n                        }\n                        Div(row){\n                            Div(col-sm-6){Nam2}\n                            Div(col-sm-6){2}\n                        }\n                        Div(row){\n                            Div(col-sm-6){Nam3}\n                            Div(col-sm-6){3}\n                        }\n                    }\n                }\n                Div(col-sm-6){\n                    Div(form-group){Result}\n                    Data(src1,\"name,value\"){\n                        Name1, 1\n                        Name2, 2\n                        Name3, 3\n                    }\n                    ForList(Source: src1){\n                        Div(Body: #name# = #value#)\n                    }\n                    Table(Source: src1, Columns: \"Name=name,Value=value\")\n                }\n            }\n        }\n    }\n    \n    \n    Div(panel){\n        Div(panel-heading){\n            Case №2 Table. Error with number of fields\n        }\n        Div(panel-body){\n            Div(col-sm-6){\n                Div(form-group){Expected}\n                error: line 2, column 0: wrong number of fields in line\n                Div(form-group){\n                    Div(row){\n                        Div(col-sm-4){Name}\n                        Div(col-sm-4){Value}\n                        Div(col-sm-4){Cost}\n                    }\n                    Div(row){\n                        Div(col-sm-4){1}\n                        Div(col-sm-4){1}\n                        Div(col-sm-4){0}\n                    }\n                    Div(row){\n                        Div(col-sm-4){3}\n                        Div(col-sm-4){3}\n                        Div(col-sm-4){4}\n                    }\n                }\n            }\n            \n            Div(col-sm-6){\n                Div(form-group){Result}\n                Data(src2, \"name,value,cost\"){\n                    1, 1, 0\n                    2, 2\n                    3, 3, 4\n                }\n                Table(Source: src2, Columns: \"Name=name,Value=value,Cost=cost\")\n            }\n        }\n    }\n    \n    \n    Div(panel){\n        Div(panel-heading){\n            Case №3 Name of columns with variables\n        }\n        Div(panel-body){\n            Div(col-sm-6){\n                Div(form-group){Expected}\n                Div(form-group){\n                    Div(row){\n                        Div(col-sm-4){Name}\n                        Div(col-sm-4){Value}\n                        Div(col-sm-4){Cost}\n                    }\n                    Div(row){\n                        Div(col-sm-4){1}\n                        Div(col-sm-4){1}\n                        Div(col-sm-4){1}\n                    }\n                    Div(row){\n                        Div(col-sm-4){2}\n                        Div(col-sm-4){2}\n                        Div(col-sm-4){2}\n                    }\n                    Div(row){\n                        Div(col-sm-4){3}\n                        Div(col-sm-4){3}\n                        Div(col-sm-4){3}\n                    }\n                }\n            }\n            Div(col-sm-6){\n                Div(form-group){Result}\n                Data(src3, \"name,value,cost\"){\n                    1, 1, 1\n                    2, 2, 2\n                    3, 3, 3\n                }\n                SetVar(nameColumnName, \"Name\").(nameColumnValue, \"Value\").(nameColumnCost, \"Cost\").(columnName, \"name\").(columnValue, \"value\").(columnCost, \"cost\")\n                Table(Source: src3, Columns: \"#nameColumnName#=#columnName#,#nameColumnValue#=#columnValue#,#nameColumnCost#=#columnCost#\")\n            }\n        }\n    }\n    \n    Div(panel){\n        Div(panel-heading){\n            Case №4 Source with 50 columns\n        }\n        Div(panel-body){\n            Div(col-sm-6){\n                Div(form-group){Expected}\n                Div(form-group){\n                    Div(row){\n                        Div(col-sm-3){Col1}\n                        Div(col-sm-3){Col10}\n                        Div(col-sm-3){Col25}\n                        Div(col-sm-3){Col50}\n                    }\n                    Div(row){\n                        Div(col-sm-3){1}\n                        Div(col-sm-3){1}\n                        Div(col-sm-3){1}\n                        Div(col-sm-3){1}\n                    }\n                    Div(row){\n                        Div(col-sm-3){2}\n                        Div(col-sm-3){2}\n                        Div(col-sm-3){2}\n                        Div(col-sm-3){2}\n                    }\n                    Div(row){\n                        Div(col-sm-3){3}\n                        Div(col-sm-3){3}\n                        Div(col-sm-3){3}\n                        Div(col-sm-3){3}\n                    }\n                }\n            }\n            Div(col-sm-6){\n                Div(form-group){Result}\n                Data(src4, \"Col1,Col2,Col3,Col4,Col5,Col6,Col7,Col8,Col9,Col10,Col11,Col12,Col13,Col14,Col15,Col16,Col17,Col18,Col19,Col20,Col21,Col22,Col23,Col24,Col25,Col26,Col27,Col28,Col29,Col30,Col31,Col32,Col33,Col34,Col35,Col36,Col37,Col38,Col39,Col40,Col41,Col42,Col43,Col44,Col45,Col46,Col47,Col48,Col49,Col50\"){\n                    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\n                    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2\n                    3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3\n                }\n                Table(Source: src4, Columns: \"Col1=Col1,Col10=Col10,Col25=Col25,Col50=Col50\")\n            }\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №5 Source with 1000 rows\n        }\n        Div(panel-body){\n            Div(col-sm-6){\n                Div(form-group){Expected}\n                Div(){ 1) Table with values: id = 1...1000}\n                Div(){ 2) Forlist with values: Name,Value = Name1,Value1 And Name2,Value2 And ... And Name1000,Value1000 }\n            }\n            Div(col-sm-6){\n                Div(form-group){Result}\n                Range(src5,1,1000)\n                Data(src1, \"Name,Value\"){\n                    Name1,Value1\n                    Name2,Value2\n                    Name3,Value3\n                    Name4,Value4\n                    Name5,Value5\n                    Name6,Value6\n                    Name7,Value7\n                    Name8,Value8\n                    Name9,Value9\n                    Name10,Value10\n                    Name11,Value11\n                    Name12,Value12\n                    Name13,Value13\n                    Name14,Value14\n                    Name15,Value15\n                    Name16,Value16\n                    Name17,Value17\n                    Name18,Value18\n                    Name19,Value19\n                    Name20,Value20\n                    Name21,Value21\n                    Name22,Value22\n                    Name23,Value23\n                    Name24,Value24\n                    Name25,Value25\n                    Name26,Value26\n                    Name27,Value27\n                    Name28,Value28\n                    Name29,Value29\n                    Name30,Value30\n                    Name31,Value31\n                    Name32,Value32\n                    Name33,Value33\n                    Name34,Value34\n                    Name35,Value35\n                    Name36,Value36\n                    Name37,Value37\n                    Name38,Value38\n                    Name39,Value39\n                    Name40,Value40\n                    Name41,Value41\n                    Name42,Value42\n                    Name43,Value43\n                    Name44,Value44\n                    Name45,Value45\n                    Name46,Value46\n                    Name47,Value47\n                    Name48,Value48\n                    Name49,Value49\n                    Name50,Value50\n                    Name51,Value51\n                    Name52,Value52\n                    Name53,Value53\n                    Name54,Value54\n                    Name55,Value55\n                    Name56,Value56\n                    Name57,Value57\n                    Name58,Value58\n                    Name59,Value59\n                    Name60,Value60\n                    Name61,Value61\n                    Name62,Value62\n                    Name63,Value63\n                    Name64,Value64\n                    Name65,Value65\n                    Name66,Value66\n                    Name67,Value67\n                    Name68,Value68\n                    Name69,Value69\n                    Name70,Value70\n                    Name71,Value71\n                    Name72,Value72\n                    Name73,Value73\n                    Name74,Value74\n                    Name75,Value75\n                    Name76,Value76\n                    Name77,Value77\n                    Name78,Value78\n                    Name79,Value79\n                    Name80,Value80\n                    Name81,Value81\n                    Name82,Value82\n                    Name83,Value83\n                    Name84,Value84\n                    Name85,Value85\n                    Name86,Value86\n                    Name87,Value87\n                    Name88,Value88\n                    Name89,Value89\n                    Name90,Value90\n                    Name91,Value91\n                    Name92,Value92\n                    Name93,Value93\n                    Name94,Value94\n                    Name95,Value95\n                    Name96,Value96\n                    Name97,Value97\n                    Name98,Value98\n                    Name99,Value99\n                    Name100,Value100\n                    Name101,Value101\n                    Name102,Value102\n                    Name103,Value103\n                    Name104,Value104\n                    Name105,Value105\n                    Name106,Value106\n                    Name107,Value107\n                    Name108,Value108\n                    Name109,Value109\n                    Name110,Value110\n                    Name111,Value111\n                    Name112,Value112\n                    Name113,Value113\n                    Name114,Value114\n                    Name115,Value115\n                    Name116,Value116\n                    Name117,Value117\n                    Name118,Value118\n                    Name119,Value119\n                    Name120,Value120\n                    Name121,Value121\n                    Name122,Value122\n                    Name123,Value123\n                    Name124,Value124\n                    Name125,Value125\n                    Name126,Value126\n                    Name127,Value127\n                    Name128,Value128\n                    Name129,Value129\n                    Name130,Value130\n                    Name131,Value131\n                    Name132,Value132\n                    Name133,Value133\n                    Name134,Value134\n                    Name135,Value135\n                    Name136,Value136\n                    Name137,Value137\n                    Name138,Value138\n                    Name139,Value139\n                    Name140,Value140\n                    Name141,Value141\n                    Name142,Value142\n                    Name143,Value143\n                    Name144,Value144\n                    Name145,Value145\n                    Name146,Value146\n                    Name147,Value147\n                    Name148,Value148\n                    Name149,Value149\n                    Name150,Value150\n                    Name151,Value151\n                    Name152,Value152\n                    Name153,Value153\n                    Name154,Value154\n                    Name155,Value155\n                    Name156,Value156\n                    Name157,Value157\n                    Name158,Value158\n                    Name159,Value159\n                    Name160,Value160\n                    Name161,Value161\n                    Name162,Value162\n                    Name163,Value163\n                    Name164,Value164\n                    Name165,Value165\n                    Name166,Value166\n                    Name167,Value167\n                    Name168,Value168\n                    Name169,Value169\n                    Name170,Value170\n                    Name171,Value171\n                    Name172,Value172\n                    Name173,Value173\n                    Name174,Value174\n                    Name175,Value175\n                    Name176,Value176\n                    Name177,Value177\n                    Name178,Value178\n                    Name179,Value179\n                    Name180,Value180\n                    Name181,Value181\n                    Name182,Value182\n                    Name183,Value183\n                    Name184,Value184\n                    Name185,Value185\n                    Name186,Value186\n                    Name187,Value187\n                    Name188,Value188\n                    Name189,Value189\n                    Name190,Value190\n                    Name191,Value191\n                    Name192,Value192\n                    Name193,Value193\n                    Name194,Value194\n                    Name195,Value195\n                    Name196,Value196\n                    Name197,Value197\n                    Name198,Value198\n                    Name199,Value199\n                    Name200,Value200\n                    Name201,Value201\n                    Name202,Value202\n                    Name203,Value203\n                    Name204,Value204\n                    Name205,Value205\n                    Name206,Value206\n                    Name207,Value207\n                    Name208,Value208\n                    Name209,Value209\n                    Name210,Value210\n                    Name211,Value211\n                    Name212,Value212\n                    Name213,Value213\n                    Name214,Value214\n                    Name215,Value215\n                    Name216,Value216\n                    Name217,Value217\n                    Name218,Value218\n                    Name219,Value219\n                    Name220,Value220\n                    Name221,Value221\n                    Name222,Value222\n                    Name223,Value223\n                    Name224,Value224\n                    Name225,Value225\n                    Name226,Value226\n                    Name227,Value227\n                    Name228,Value228\n                    Name229,Value229\n                    Name230,Value230\n                    Name231,Value231\n                    Name232,Value232\n                    Name233,Value233\n                    Name234,Value234\n                    Name235,Value235\n                    Name236,Value236\n                    Name237,Value237\n                    Name238,Value238\n                    Name239,Value239\n                    Name240,Value240\n                    Name241,Value241\n                    Name242,Value242\n                    Name243,Value243\n                    Name244,Value244\n                    Name245,Value245\n                    Name246,Value246\n                    Name247,Value247\n                    Name248,Value248\n                    Name249,Value249\n                    Name250,Value250\n                    Name251,Value251\n                    Name252,Value252\n                    Name253,Value253\n                    Name254,Value254\n                    Name255,Value255\n                    Name256,Value256\n                    Name257,Value257\n                    Name258,Value258\n                    Name259,Value259\n                    Name260,Value260\n                    Name261,Value261\n                    Name262,Value262\n                    Name263,Value263\n                    Name264,Value264\n                    Name265,Value265\n                    Name266,Value266\n                    Name267,Value267\n                    Name268,Value268\n                    Name269,Value269\n                    Name270,Value270\n                    Name271,Value271\n                    Name272,Value272\n                    Name273,Value273\n                    Name274,Value274\n                    Name275,Value275\n                    Name276,Value276\n                    Name277,Value277\n                    Name278,Value278\n                    Name279,Value279\n                    Name280,Value280\n                    Name281,Value281\n                    Name282,Value282\n                    Name283,Value283\n                    Name284,Value284\n                    Name285,Value285\n                    Name286,Value286\n                    Name287,Value287\n                    Name288,Value288\n                    Name289,Value289\n                    Name290,Value290\n                    Name291,Value291\n                    Name292,Value292\n                    Name293,Value293\n                    Name294,Value294\n                    Name295,Value295\n                    Name296,Value296\n                    Name297,Value297\n                    Name298,Value298\n                    Name299,Value299\n                    Name300,Value300\n                    Name301,Value301\n                    Name302,Value302\n                    Name303,Value303\n                    Name304,Value304\n                    Name305,Value305\n                    Name306,Value306\n                    Name307,Value307\n                    Name308,Value308\n                    Name309,Value309\n                    Name310,Value310\n                    Name311,Value311\n                    Name312,Value312\n                    Name313,Value313\n                    Name314,Value314\n                    Name315,Value315\n                    Name316,Value316\n                    Name317,Value317\n                    Name318,Value318\n                    Name319,Value319\n                    Name320,Value320\n                    Name321,Value321\n                    Name322,Value322\n                    Name323,Value323\n                    Name324,Value324\n                    Name325,Value325\n                    Name326,Value326\n                    Name327,Value327\n                    Name328,Value328\n                    Name329,Value329\n                    Name330,Value330\n                    Name331,Value331\n                    Name332,Value332\n                    Name333,Value333\n                    Name334,Value334\n                    Name335,Value335\n                    Name336,Value336\n                    Name337,Value337\n                    Name338,Value338\n                    Name339,Value339\n                    Name340,Value340\n                    Name341,Value341\n                    Name342,Value342\n                    Name343,Value343\n                    Name344,Value344\n                    Name345,Value345\n                    Name346,Value346\n                    Name347,Value347\n                    Name348,Value348\n                    Name349,Value349\n                    Name350,Value350\n                    Name351,Value351\n                    Name352,Value352\n                    Name353,Value353\n                    Name354,Value354\n                    Name355,Value355\n                    Name356,Value356\n                    Name357,Value357\n                    Name358,Value358\n                    Name359,Value359\n                    Name360,Value360\n                    Name361,Value361\n                    Name362,Value362\n                    Name363,Value363\n                    Name364,Value364\n                    Name365,Value365\n                    Name366,Value366\n                    Name367,Value367\n                    Name368,Value368\n                    Name369,Value369\n                    Name370,Value370\n                    Name371,Value371\n                    Name372,Value372\n                    Name373,Value373\n                    Name374,Value374\n                    Name375,Value375\n                    Name376,Value376\n                    Name377,Value377\n                    Name378,Value378\n                    Name379,Value379\n                    Name380,Value380\n                    Name381,Value381\n                    Name382,Value382\n                    Name383,Value383\n                    Name384,Value384\n                    Name385,Value385\n                    Name386,Value386\n                    Name387,Value387\n                    Name388,Value388\n                    Name389,Value389\n                    Name390,Value390\n                    Name391,Value391\n                    Name392,Value392\n                    Name393,Value393\n                    Name394,Value394\n                    Name395,Value395\n                    Name396,Value396\n                    Name397,Value397\n                    Name398,Value398\n                    Name399,Value399\n                    Name400,Value400\n                    Name401,Value401\n                    Name402,Value402\n                    Name403,Value403\n                    Name404,Value404\n                    Name405,Value405\n                    Name406,Value406\n                    Name407,Value407\n                    Name408,Value408\n                    Name409,Value409\n                    Name410,Value410\n                    Name411,Value411\n                    Name412,Value412\n                    Name413,Value413\n                    Name414,Value414\n                    Name415,Value415\n                    Name416,Value416\n                    Name417,Value417\n                    Name418,Value418\n                    Name419,Value419\n                    Name420,Value420\n                    Name421,Value421\n                    Name422,Value422\n                    Name423,Value423\n                    Name424,Value424\n                    Name425,Value425\n                    Name426,Value426\n                    Name427,Value427\n                    Name428,Value428\n                    Name429,Value429\n                    Name430,Value430\n                    Name431,Value431\n                    Name432,Value432\n                    Name433,Value433\n                    Name434,Value434\n                    Name435,Value435\n                    Name436,Value436\n                    Name437,Value437\n                    Name438,Value438\n                    Name439,Value439\n                    Name440,Value440\n                    Name441,Value441\n                    Name442,Value442\n                    Name443,Value443\n                    Name444,Value444\n                    Name445,Value445\n                    Name446,Value446\n                    Name447,Value447\n                    Name448,Value448\n                    Name449,Value449\n                    Name450,Value450\n                    Name451,Value451\n                    Name452,Value452\n                    Name453,Value453\n                    Name454,Value454\n                    Name455,Value455\n                    Name456,Value456\n                    Name457,Value457\n                    Name458,Value458\n                    Name459,Value459\n                    Name460,Value460\n                    Name461,Value461\n                    Name462,Value462\n                    Name463,Value463\n                    Name464,Value464\n                    Name465,Value465\n                    Name466,Value466\n                    Name467,Value467\n                    Name468,Value468\n                    Name469,Value469\n                    Name470,Value470\n                    Name471,Value471\n                    Name472,Value472\n                    Name473,Value473\n                    Name474,Value474\n                    Name475,Value475\n                    Name476,Value476\n                    Name477,Value477\n                    Name478,Value478\n                    Name479,Value479\n                    Name480,Value480\n                    Name481,Value481\n                    Name482,Value482\n                    Name483,Value483\n                    Name484,Value484\n                    Name485,Value485\n                    Name486,Value486\n                    Name487,Value487\n                    Name488,Value488\n                    Name489,Value489\n                    Name490,Value490\n                    Name491,Value491\n                    Name492,Value492\n                    Name493,Value493\n                    Name494,Value494\n                    Name495,Value495\n                    Name496,Value496\n                    Name497,Value497\n                    Name498,Value498\n                    Name499,Value499\n                    Name500,Value500\n                    Name501,Value501\n                    Name502,Value502\n                    Name503,Value503\n                    Name504,Value504\n                    Name505,Value505\n                    Name506,Value506\n                    Name507,Value507\n                    Name508,Value508\n                    Name509,Value509\n                    Name510,Value510\n                    Name511,Value511\n                    Name512,Value512\n                    Name513,Value513\n                    Name514,Value514\n                    Name515,Value515\n                    Name516,Value516\n                    Name517,Value517\n                    Name518,Value518\n                    Name519,Value519\n                    Name520,Value520\n                    Name521,Value521\n                    Name522,Value522\n                    Name523,Value523\n                    Name524,Value524\n                    Name525,Value525\n                    Name526,Value526\n                    Name527,Value527\n                    Name528,Value528\n                    Name529,Value529\n                    Name530,Value530\n                    Name531,Value531\n                    Name532,Value532\n                    Name533,Value533\n                    Name534,Value534\n                    Name535,Value535\n                    Name536,Value536\n                    Name537,Value537\n                    Name538,Value538\n                    Name539,Value539\n                    Name540,Value540\n                    Name541,Value541\n                    Name542,Value542\n                    Name543,Value543\n                    Name544,Value544\n                    Name545,Value545\n                    Name546,Value546\n                    Name547,Value547\n                    Name548,Value548\n                    Name549,Value549\n                    Name550,Value550\n                    Name551,Value551\n                    Name552,Value552\n                    Name553,Value553\n                    Name554,Value554\n                    Name555,Value555\n                    Name556,Value556\n                    Name557,Value557\n                    Name558,Value558\n                    Name559,Value559\n                    Name560,Value560\n                    Name561,Value561\n                    Name562,Value562\n                    Name563,Value563\n                    Name564,Value564\n                    Name565,Value565\n                    Name566,Value566\n                    Name567,Value567\n                    Name568,Value568\n                    Name569,Value569\n                    Name570,Value570\n                    Name571,Value571\n                    Name572,Value572\n                    Name573,Value573\n                    Name574,Value574\n                    Name575,Value575\n                    Name576,Value576\n                    Name577,Value577\n                    Name578,Value578\n                    Name579,Value579\n                    Name580,Value580\n                    Name581,Value581\n                    Name582,Value582\n                    Name583,Value583\n                    Name584,Value584\n                    Name585,Value585\n                    Name586,Value586\n                    Name587,Value587\n                    Name588,Value588\n                    Name589,Value589\n                    Name590,Value590\n                    Name591,Value591\n                    Name592,Value592\n                    Name593,Value593\n                    Name594,Value594\n                    Name595,Value595\n                    Name596,Value596\n                    Name597,Value597\n                    Name598,Value598\n                    Name599,Value599\n                    Name600,Value600\n                    Name601,Value601\n                    Name602,Value602\n                    Name603,Value603\n                    Name604,Value604\n                    Name605,Value605\n                    Name606,Value606\n                    Name607,Value607\n                    Name608,Value608\n                    Name609,Value609\n                    Name610,Value610\n                    Name611,Value611\n                    Name612,Value612\n                    Name613,Value613\n                    Name614,Value614\n                    Name615,Value615\n                    Name616,Value616\n                    Name617,Value617\n                    Name618,Value618\n                    Name619,Value619\n                    Name620,Value620\n                    Name621,Value621\n                    Name622,Value622\n                    Name623,Value623\n                    Name624,Value624\n                    Name625,Value625\n                    Name626,Value626\n                    Name627,Value627\n                    Name628,Value628\n                    Name629,Value629\n                    Name630,Value630\n                    Name631,Value631\n                    Name632,Value632\n                    Name633,Value633\n                    Name634,Value634\n                    Name635,Value635\n                    Name636,Value636\n                    Name637,Value637\n                    Name638,Value638\n                    Name639,Value639\n                    Name640,Value640\n                    Name641,Value641\n                    Name642,Value642\n                    Name643,Value643\n                    Name644,Value644\n                    Name645,Value645\n                    Name646,Value646\n                    Name647,Value647\n                    Name648,Value648\n                    Name649,Value649\n                    Name650,Value650\n                    Name651,Value651\n                    Name652,Value652\n                    Name653,Value653\n                    Name654,Value654\n                    Name655,Value655\n                    Name656,Value656\n                    Name657,Value657\n                    Name658,Value658\n                    Name659,Value659\n                    Name660,Value660\n                    Name661,Value661\n                    Name662,Value662\n                    Name663,Value663\n                    Name664,Value664\n                    Name665,Value665\n                    Name666,Value666\n                    Name667,Value667\n                    Name668,Value668\n                    Name669,Value669\n                    Name670,Value670\n                    Name671,Value671\n                    Name672,Value672\n                    Name673,Value673\n                    Name674,Value674\n                    Name675,Value675\n                    Name676,Value676\n                    Name677,Value677\n                    Name678,Value678\n                    Name679,Value679\n                    Name680,Value680\n                    Name681,Value681\n                    Name682,Value682\n                    Name683,Value683\n                    Name684,Value684\n                    Name685,Value685\n                    Name686,Value686\n                    Name687,Value687\n                    Name688,Value688\n                    Name689,Value689\n                    Name690,Value690\n                    Name691,Value691\n                    Name692,Value692\n                    Name693,Value693\n                    Name694,Value694\n                    Name695,Value695\n                    Name696,Value696\n                    Name697,Value697\n                    Name698,Value698\n                    Name699,Value699\n                    Name700,Value700\n                    Name701,Value701\n                    Name702,Value702\n                    Name703,Value703\n                    Name704,Value704\n                    Name705,Value705\n                    Name706,Value706\n                    Name707,Value707\n                    Name708,Value708\n                    Name709,Value709\n                    Name710,Value710\n                    Name711,Value711\n                    Name712,Value712\n                    Name713,Value713\n                    Name714,Value714\n                    Name715,Value715\n                    Name716,Value716\n                    Name717,Value717\n                    Name718,Value718\n                    Name719,Value719\n                    Name720,Value720\n                    Name721,Value721\n                    Name722,Value722\n                    Name723,Value723\n                    Name724,Value724\n                    Name725,Value725\n                    Name726,Value726\n                    Name727,Value727\n                    Name728,Value728\n                    Name729,Value729\n                    Name730,Value730\n                    Name731,Value731\n                    Name732,Value732\n                    Name733,Value733\n                    Name734,Value734\n                    Name735,Value735\n                    Name736,Value736\n                    Name737,Value737\n                    Name738,Value738\n                    Name739,Value739\n                    Name740,Value740\n                    Name741,Value741\n                    Name742,Value742\n                    Name743,Value743\n                    Name744,Value744\n                    Name745,Value745\n                    Name746,Value746\n                    Name747,Value747\n                    Name748,Value748\n                    Name749,Value749\n                    Name750,Value750\n                    Name751,Value751\n                    Name752,Value752\n                    Name753,Value753\n                    Name754,Value754\n                    Name755,Value755\n                    Name756,Value756\n                    Name757,Value757\n                    Name758,Value758\n                    Name759,Value759\n                    Name760,Value760\n                    Name761,Value761\n                    Name762,Value762\n                    Name763,Value763\n                    Name764,Value764\n                    Name765,Value765\n                    Name766,Value766\n                    Name767,Value767\n                    Name768,Value768\n                    Name769,Value769\n                    Name770,Value770\n                    Name771,Value771\n                    Name772,Value772\n                    Name773,Value773\n                    Name774,Value774\n                    Name775,Value775\n                    Name776,Value776\n                    Name777,Value777\n                    Name778,Value778\n                    Name779,Value779\n                    Name780,Value780\n                    Name781,Value781\n                    Name782,Value782\n                    Name783,Value783\n                    Name784,Value784\n                    Name785,Value785\n                    Name786,Value786\n                    Name787,Value787\n                    Name788,Value788\n                    Name789,Value789\n                    Name790,Value790\n                    Name791,Value791\n                    Name792,Value792\n                    Name793,Value793\n                    Name794,Value794\n                    Name795,Value795\n                    Name796,Value796\n                    Name797,Value797\n                    Name798,Value798\n                    Name799,Value799\n                    Name800,Value800\n                    Name801,Value801\n                    Name802,Value802\n                    Name803,Value803\n                    Name804,Value804\n                    Name805,Value805\n                    Name806,Value806\n                    Name807,Value807\n                    Name808,Value808\n                    Name809,Value809\n                    Name810,Value810\n                    Name811,Value811\n                    Name812,Value812\n                    Name813,Value813\n                    Name814,Value814\n                    Name815,Value815\n                    Name816,Value816\n                    Name817,Value817\n                    Name818,Value818\n                    Name819,Value819\n                    Name820,Value820\n                    Name821,Value821\n                    Name822,Value822\n                    Name823,Value823\n                    Name824,Value824\n                    Name825,Value825\n                    Name826,Value826\n                    Name827,Value827\n                    Name828,Value828\n                    Name829,Value829\n                    Name830,Value830\n                    Name831,Value831\n                    Name832,Value832\n                    Name833,Value833\n                    Name834,Value834\n                    Name835,Value835\n                    Name836,Value836\n                    Name837,Value837\n                    Name838,Value838\n                    Name839,Value839\n                    Name840,Value840\n                    Name841,Value841\n                    Name842,Value842\n                    Name843,Value843\n                    Name844,Value844\n                    Name845,Value845\n                    Name846,Value846\n                    Name847,Value847\n                    Name848,Value848\n                    Name849,Value849\n                    Name850,Value850\n                    Name851,Value851\n                    Name852,Value852\n                    Name853,Value853\n                    Name854,Value854\n                    Name855,Value855\n                    Name856,Value856\n                    Name857,Value857\n                    Name858,Value858\n                    Name859,Value859\n                    Name860,Value860\n                    Name861,Value861\n                    Name862,Value862\n                    Name863,Value863\n                    Name864,Value864\n                    Name865,Value865\n                    Name866,Value866\n                    Name867,Value867\n                    Name868,Value868\n                    Name869,Value869\n                    Name870,Value870\n                    Name871,Value871\n                    Name872,Value872\n                    Name873,Value873\n                    Name874,Value874\n                    Name875,Value875\n                    Name876,Value876\n                    Name877,Value877\n                    Name878,Value878\n                    Name879,Value879\n                    Name880,Value880\n                    Name881,Value881\n                    Name882,Value882\n                    Name883,Value883\n                    Name884,Value884\n                    Name885,Value885\n                    Name886,Value886\n                    Name887,Value887\n                    Name888,Value888\n                    Name889,Value889\n                    Name890,Value890\n                    Name891,Value891\n                    Name892,Value892\n                    Name893,Value893\n                    Name894,Value894\n                    Name895,Value895\n                    Name896,Value896\n                    Name897,Value897\n                    Name898,Value898\n                    Name899,Value899\n                    Name900,Value900\n                    Name901,Value901\n                    Name902,Value902\n                    Name903,Value903\n                    Name904,Value904\n                    Name905,Value905\n                    Name906,Value906\n                    Name907,Value907\n                    Name908,Value908\n                    Name909,Value909\n                    Name910,Value910\n                    Name911,Value911\n                    Name912,Value912\n                    Name913,Value913\n                    Name914,Value914\n                    Name915,Value915\n                    Name916,Value916\n                    Name917,Value917\n                    Name918,Value918\n                    Name919,Value919\n                    Name920,Value920\n                    Name921,Value921\n                    Name922,Value922\n                    Name923,Value923\n                    Name924,Value924\n                    Name925,Value925\n                    Name926,Value926\n                    Name927,Value927\n                    Name928,Value928\n                    Name929,Value929\n                    Name930,Value930\n                    Name931,Value931\n                    Name932,Value932\n                    Name933,Value933\n                    Name934,Value934\n                    Name935,Value935\n                    Name936,Value936\n                    Name937,Value937\n                    Name938,Value938\n                    Name939,Value939\n                    Name940,Value940\n                    Name941,Value941\n                    Name942,Value942\n                    Name943,Value943\n                    Name944,Value944\n                    Name945,Value945\n                    Name946,Value946\n                    Name947,Value947\n                    Name948,Value948\n                    Name949,Value949\n                    Name950,Value950\n                    Name951,Value951\n                    Name952,Value952\n                    Name953,Value953\n                    Name954,Value954\n                    Name955,Value955\n                    Name956,Value956\n                    Name957,Value957\n                    Name958,Value958\n                    Name959,Value959\n                    Name960,Value960\n                    Name961,Value961\n                    Name962,Value962\n                    Name963,Value963\n                    Name964,Value964\n                    Name965,Value965\n                    Name966,Value966\n                    Name967,Value967\n                    Name968,Value968\n                    Name969,Value969\n                    Name970,Value970\n                    Name971,Value971\n                    Name972,Value972\n                    Name973,Value973\n                    Name974,Value974\n                    Name975,Value975\n                    Name976,Value976\n                    Name977,Value977\n                    Name978,Value978\n                    Name979,Value979\n                    Name980,Value980\n                    Name981,Value981\n                    Name982,Value982\n                    Name983,Value983\n                    Name984,Value984\n                    Name985,Value985\n                    Name986,Value986\n                    Name987,Value987\n                    Name988,Value988\n                    Name989,Value989\n                    Name990,Value990\n                    Name991,Value991\n                    Name992,Value992\n                    Name993,Value993\n                    Name994,Value994\n                    Name995,Value995\n                    Name996,Value996\n                    Name997,Value997\n                    Name998,Value998\n                    Name999,Value999\n                    Name1000,Value1000\n                }\n                Div(col-sm-6){\n\t\t\t\t\tDiv(){1)}\n                    Table(Source:src1, Columns: \"Name=Name,Value=Value\")\n                }\n                Div(col-sm-6){\n\t\t\t\t\tDiv(){2)}\n                    ForList(Source:src1){\n                        Div(){#Name# = #Value#}\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "tests_source",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "Div(container) {\n    Div(panel){\n        Div(panel-heading){\n            Case №1 Variable In Variable With Hot Replacing\n        }\n        Div(panel-body){\n            Div(row){\n                Div(col-sm-6){\n                    Expected:\n                    Div(){GetVar = 123}\n                    Div(){## = 123}\n                }\n                Div(col-sm-6){\n                    Result:\n                    SetVar(\"Var1\", \"1\")\n                    SetVar(\"Var2\", #Var1#2)\n                    SetVar(\"Var3\", GetVar(\"Var2\")3)\n                    Div(){GetVar = GetVar(\"Var3\")}\n                    Div(){## = #Var3#}\n                    SetVar(\"Var1\", 0)\n                    SetVar(\"Var2\", 0)\n                }\n            }\n        }\n    }\n    \n    Div(panel){\n        Div(panel-heading){\n            Case №2 Some Tags In Variable\n        }\n        Div(panel-body){\n            Div(row){\n                Div(col-sm-6){\n                    Expected:\n                    Div(){## = P(This is p tag)Span(This is span tag)This is text without tag}\n                    Div(){GetVar = P(This is p tag)Span(This is span tag)This is text without tag}\n                }\n                Div(col-sm-6){\n                    Result:\n                    SetVar(\"VarTags\", P(This is p tag)Span(This is span tag)This is text without tag)\n                    Div(){## = #VarTags#}\n                    Div(){GetVar = GetVar(VarTags)}\n                }\n            }\n        }\n    }\n    \n    Div(panel){\n        Div(panel-heading){\n            Case №3 Variable Without Name\n        }\n        Div(panel-body){\n            Div(row){\n                Div(col-sm-6){\n                    Expected: ##\n                }\n                Div(col-sm-6){\n                    Result:\n                    SetVar(\"\", \"This is variable without name\")\n                    GetVar(\"\")\n                    ##\n                }\n            }\n        }\n    }\n    \n    Div(panel){\n        Div(panel-heading){\n            Case №3 Variable HotReplacing\n        }\n        Div(panel-body){\n            Div(row){\n                Div(col-sm-6){\n                    Expected: Value1 Value1 Value2 Value2 Value22 Value222 Value222\n                }\n                Div(col-sm-6){\n                    Result:\n                    \n                    SetVar(\"Name1\", \"Value1\")\n                    GetVar(\"Name1\")\n                    #Name1#\n                    SetVar(\"Name1\", \"Value2\")\n                    GetVar(\"Name1\")\n                    #Name1#\n                    SetVar(\"Name1\", GetVar(\"Name1\")2)\n                    GetVar(\"Name1\")\n                    SetVar(\"Name1\", #Name1#2)\n                    GetVar(\"Name1\")\n                    #Name1#\n                }\n            }\n        }\n    }\n    Div(panel){\n        Div(panel-heading){\n            Case №4 Long Variable Title\n        }\n        Div(panel-body){\n            Div(row){\n                Div(col-sm-6){\n                    Expected:\n                    Div(){## = Some_Mega_Long_Value_Of_The_Variable123#FakeName1#}\n                    Div(){GetVar = Some_Mega_Long_Value_Of_The_Variable123#FakeName1#}\n                }\n                Div(col-sm-6){\n                    Result:\n                    \n                    SetVar(\"Some_Mega_Long_Title_Of_The_Variable123##\", \"Some_Mega_Long_Value_Of_The_Variable123#FakeName1#\")\n                    Div(){## = #Some_Mega_Long_Title_Of_The_Variable123###}\n                    Div(){GetVar = GetVar(\"Some_Mega_Long_Title_Of_The_Variable123##\")}\n                }\n            }\n        }\n    }\n}",
            "Name": "tests_vars",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(container){\n    Div(row){\n        Div(col-sm-12){\n            Form(panel panel-primary){\n                Div(panel-footer){\n                    Button(Page:voting_list, Contract:tests_voting_Create, Class:btn btn-primary, Body: create tests of votings)\n                }\n            }\n        }\n    }\n}",
            "Name": "tests_voting_templates",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "true",
            "Value": "contract tests_Contract {\n    data {\n        TestNum int\n        Name string \"optional\"\n        Value int \"optional\"\n        Field1 string \"optional\"\n        Field2 string \"optional\"\n        Field3 string \"optional\"\n        Field4 string \"optional\"\n        Field5 string \"optional\"\n        Field6 string \"optional\"\n        Field7 string \"optional\"\n        Field8 string \"optional\"\n        Field9 string \"optional\"\n        Field10 string \"optional\"\n        Field11 string \"optional\"\n        Field12 string \"optional\"\n        Field13 string \"optional\"\n        Field14 string \"optional\"\n        Field15 string \"optional\"\n        Field16 string \"optional\"\n        Field17 string \"optional\"\n        Field18 string \"optional\"\n        Field19 string \"optional\"\n        Field20 string \"optional\"\n        Image bytes \"image optional\"\n        Radio string \"optional\"\n        Select string \"optional\"\n        InputMap string \"optional\"\n        \n    }\n    conditions {\n\n    }\n    action {\n        if $TestNum == 2 {\n            if Size($Field1) < 200 {\n                error \"Field1 is less then 200 symbols length\"\n            }\n            if Size($Field2) < 200 {\n                error \"Field2 is less then 200 symbols length\"\n            }\n            if Size($Field3) < 200 {\n                error \"Field3 is less then 200 symbols length\"\n            }\n            if Size($Field4) < 200 {\n                error \"Field4 is less then 200 symbols length\"\n            }\n            if Size($Field5) < 200 {\n                error \"Field5 is less then 200 symbols length\"\n            }\n            if Size($Field6) < 200 {\n                error \"Field6 is less then 200 symbols length\"\n            }\n            if Size($Field7) < 200 {\n                error \"Field7 is less then 200 symbols length\"\n            }\n            if Size($Field8) < 200 {\n                error \"Field8 is less then 200 symbols length\"\n            }\n            if Size($Field9) < 200 {\n                error \"Field9 is less then 200 symbols length\"\n            }\n            if Size($Field10) < 200 {\n                error \"Field10 is less then 200 symbols length\"\n            }\n            if Size($Field11) < 200 {\n                error \"Field11 is less then 200 symbols length\"\n            }\n            if Size($Field12) < 200 {\n                error \"Field12 is less then 200 symbols length\"\n            }\n            if Size($Field13) < 200 {\n                error \"Field13 is less then 200 symbols length\"\n            }\n            if Size($Field14) < 200 {\n                error \"Field14 is less then 200 symbols length\"\n            }\n            if Size($Field15) < 200 {\n                error \"Field15 is less then 200 symbols length\"\n            }\n            if Size($Field16) < 200 {\n                error \"Field16 is less then 200 symbols length\"\n            }\n            if Size($Field17) < 200 {\n                error \"Field17 is less then 200 symbols length\"\n            }\n            if Size($Field18) < 200 {\n                error \"Field18 is less then 200 symbols length\"\n            }\n            if Size($Field19) < 200 {\n                error \"Field19 is less then 200 symbols length\"\n            }\n            if Size($Field20) < 200 {\n                error \"Field20 is less then 200 symbols length\"\n            }\n            info Sprintf(\"All 20 string fields with >=200 symbol length. %v = %v\", $Name, $Value);\n        }\n        if $TestNum == 5 {\n            \n        }\n        if $TestNum == 6 {\n            \n        }\n    }\n}",
            "Name": "tests_Contract",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tests_DecodeBase64String {\n    data {}\n    action {\n        var ENCODED, cleaned, decoded string\n        ENCODED = \"data:;base64,dGVzdCBzdHJpbmc=\"\n        cleaned = Replace(ENCODED, \"data:;base64,\", \"\")\n        decoded = DecodeBase64(cleaned)\n        $result = decoded == \"test string\"\n    }\n}\n",
            "Name": "tests_DecodeBase64String",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tests_FileUpload {\n    data{\n        File1 bytes \"file\"\n        File2 bytes \"file\"\n    }\n    conditions {\n        $ApplicationId = Int(DBFind(\"applications\").Where(\"name='Tests'\").One(\"id\"))\n    }\n    action {\n        var id1 id2 int\n        id1 = UploadBinary(\"ApplicationId,Name,Data,DataMimeType\", $ApplicationId, \"File1\", $File1, $File1MimeType)\n        id2 = UploadBinary(\"ApplicationId,Name,Data,DataMimeType\", $ApplicationId, \"File2\", $File2, $File2MimeType)\n        Println(\"UploadBinary\", id1)\n        Println(\"UploadBinary\", id2)\n    }\n}",
            "Name": "tests_FileUpload",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tests_IfAutocast {\n    conditions {\n        var stringFloat, stringInt, intFloat bool\n        stringFloat = \"100\" == 100.0 && !(\"100\" != 100.0 || \"100\" < 90.2 || \"100\" > 200.2)\n        stringInt = \"100\" == 100 && !(\"100\" != 100 || \"100\" < 90 || \"100\" > 200)\n        intFloat = !(100 != 100.0 || 100 < 99.9 || 100 > 100.1)\n        $result = stringFloat && stringInt && intFloat       \n    }\n}",
            "Name": "tests_IfAutocast",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tests_JsonOperationDB {\n    data{}\n    \n    action {\n        var TABLE string\n        TABLE = \"tests\"\n        var flag map\n        flag[\"insert\"] = \"ok\"\n        var id int\n        id = DBInsert(TABLE, \"json\", flag)\n        \n        flag[\"update\"] = \"ok\"\n        DBUpdate(TABLE, id, \"json\", flag)\n        \n        var found map\n        found = DBFind(TABLE).Where(\"id=? and json->update='ok'\", id).Row()\n        flag[\"found\"] = \"ok\"\n        DBUpdate(TABLE, Int(found[\"id\"]), \"json\", flag)\n        \n        var result map\n        result = DBFind(TABLE).Where(\"id=?\", found[\"id\"]).Row()\n        \n        if result[\"json\"] == `{\"found\": \"ok\", \"insert\": \"ok\", \"update\": \"ok\"}`{\n            $result = true\n        }else{\n            $result = false\n        }\n    }\n}",
            "Name": "tests_JsonOperationDB",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tests_LongStringToInt {\n    data{}\n    \n    action {\n        var numStr string\n        numStr = \"123456789101112131415161718192021222324252627282930\"\n        Println(\"numStr\", Sprintf(\"%v\", numStr))\n        var numInt int\n        numInt = Int(numStr)\n        Println(\"numInt\", Sprintf(\"%v\", numInt))\n        if Sprintf(\"%v\", numStr) == Sprintf(\"%v\", numInt) {\n            $result = true\n        }else{\n            $result = false\n        }\n    }\n}",
            "Name": "tests_LongStringToInt",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tests_Run {\n    data{\n        Date string \"date\"\n    }\n    conditions {\n        var tests array\n        tests[0] = \"tests_JsonOperationDB\"\n        tests[1] = \"tests_IfAutocast\"\n        tests[2] = \"tests_DecodeBase64String\"\n        tests[3] = \"tests_LongStringToInt\"\n        $tests = tests\n    }\n    action {\n        var i int\n        while i < Len($tests) {\n            var result bool\n            var params map\n            result = CallContract($tests[i], params)\n            DBInsert(\"tests\", \"name,date,result\", $tests[i], $Date, Str(result))\n            i=i+1\n        }\n        \n    }\n}",
            "Name": "tests_Run",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tests_voting_Accept{\n    data{\n        VotingTemplateId string \"optional\"\n        KeyId string \"optional\"\n        VotingId string \"optional\"\n    }\n    \n     action{\n        var voting params map\n        voting = DBFind(\"votings\").Where(\"id=?\", Int($VotingId)).Row()\n        params = JSONToMap(voting[\"voting\"])\n        var value1 value2 value3 string\n        value1 = \"voting\"\n        value2 = params[\"description\"]\n        value3 = Sprintf(\"ACCEPT template_id:%v voting_id:%v KeyId:%v\", $VotingTemplateId, $VotingId, $KeyId)\n        DBInsert(\"tests\", \"value1,value2,value3\", value1,value2,value3)\n    }\n}",
            "Name": "tests_voting_Accept",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tests_voting_Create{\n    data{}\n\n    action{\n        var volume quorum vacancies int SUBJ voters candidates INIT ACCEPT PARAMS REJECT CANDIDATE VOTER string\n        volume = 50\n        quorum = 51\n        vacancies = 1\n\n        SUBJ = \"voting template subject\"\n        INIT = \"tests_voting_Init\"\n        ACCEPT = \"tests_voting_Accept\"\n        REJECT = \"tests_voting_Reject\"\n        CANDIDATE = \"Testing Elective role\"\n        VOTER = \"Testing Voter role\"\n\n        candidates = DBFind(\"roles\").Where(\"role_name=? and deleted=0\", CANDIDATE).One(\"id\")\n        if !candidates {\n            candidates = Roles_Create(\"role_name,role_type,icon,company_id\", CANDIDATE, 2, \"\", 0)\n        }\n        voters = DBFind(\"roles\").Where(\"role_name=? and deleted=0\", VOTER).One(\"id\")\n        if !voters {\n            voters = Roles_Create(\"role_name,role_type,icon,company_id\", VOTER, 1, \"\", 0)\n            Roles_Assign(\"rid,member_id\", voters, $key_id)\n        }\n\n        var typeParticipants typeDecision typeVoting templateId kid duration int title tableWritten rowId columnName newValue textDocument string\n        tableWritten = \"tests\"\n        rowId = \"1\"\n        columnName = \"value1\"\n        duration = 1\n        typeDecision = 1\n        typeVoting = 1\n        while typeDecision <= 5 {\n            typeParticipants = 1\n            while typeParticipants <= 3 {\n                if typeParticipants != 2 { // passed with manually entering participants\n                    title = Sprintf(\"New Voting d%v:p%v:v%v\", typeDecision, typeParticipants, typeVoting)\n                    templateId = voting_TemplateStore(\"Title,TypeParticipants,TypeVoting,TypeDecision,Volume,Quorum,Subject,Voters,Candidates,InitContract,Vacancies,ContractAccept,ParamsAccept,ContractReject,ParamsReject\", title, typeParticipants, typeVoting, typeDecision, volume, quorum, SUBJ,Str(voters), Str(candidates), INIT, vacancies, ACCEPT, PARAMS, REJECT, PARAMS)\n\n                    newValue = Sprintf(\"It is new value for template #%v\", templateId)\n                    textDocument = Sprintf(\"Test text Document for voting template #%v\", templateId)\n\n                    voting_TemplateRun(\"TemplateId,Duration,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", templateId, duration, kid, tableWritten, rowId, columnName, newValue, textDocument)\n                }\n                typeParticipants = typeParticipants + 1\n            }\n            typeDecision = typeDecision + 1\n        }\n    }\n}",
            "Name": "tests_voting_Create",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tests_voting_Init{\n    data{}\n    \n    conditions{\n        ContractConditions(\"MainCondition\")\n    }\n    \n    action{\n        DBInsert(\"tests\", \"value1,value2,value3\", \"voting\", \"INIT\", \"init OK\")\n    }\n}",
            "Name": "tests_voting_Init",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tests_voting_Reject{\n    data{\n        VotingTemplateId string \"optional\"\n        KeyId string \"optional\"\n        VotingId string \"optional\"\n    }\n    \n    action{\n        var voting params map\n        voting = DBFind(\"votings\").Where(\"id=?\", Int($VotingId)).Row()\n        params = JSONToMap(voting[\"voting\"])\n        var value1 value2 value3 string\n        value1 = \"voting\"\n        value2 = params[\"description\"]\n        value3 = Sprintf(\"REJECT template_id:%v voting_id:%v KeyId:%v\", $VotingTemplateId, $VotingId, $KeyId)\n        DBInsert(\"tests\", \"value1,value2,value3\", value1,value2,value3)\n    }\n}",
            "Name": "tests_voting_Reject",
            "Type": "contracts"
        }
    ]
}