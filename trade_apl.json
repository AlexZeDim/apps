{
    "name": "Trade APL",
    "conditions": "ContractConditions(\"MainCondition\")",
    "data": [
        {
            "Name": "admin_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$@1ta_settings$, Page:ta_settings, Icon:\"icon-wrench\")",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$@1ta_transfer_admin$, Page:ta_transfer_admin, Icon:\"icon-wallet\")",
            "Type": "menu"
        },
        {
            "Name": "sales",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"key_id_buyer\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"amount\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"currency_type\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"buyer_transferred_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"amount_apl\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"key_id_sale_apl_admin\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"key_id_sale_apl_manager\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"manager_reject_comment\",\n        \"type\": \"text\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"manager_rejected_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"key_id_seller\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"seller_reject_comment\",\n        \"type\": \"text\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"seller_rejected_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"seller_transferred_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"created_at\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "wallets",
            "Columns": "[\n    {\n        \"conditions\":\"true\",\n        \"name\":\"btc\",\n        \"type\":\"money\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"eth\",\n        \"type\":\"money\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"key_id_buyer\",\n        \"type\":\"number\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"created_at\",\n        \"type\":\"number\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"signed_at\",\n        \"type\":\"number\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"rejected_at\",\n        \"type\":\"number\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"key_id_signer\",\n        \"type\":\"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "role_sale_apl_admin",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "role_sale_apl_manager",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "role_seller_apl",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "ta_currency_type",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1btc,@1eth,@1euro",
            "Type": "app_params"
        },
        {
            "Name": "ta_asbl_contract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Trade APL\"}).Columns(\"id\").Vars(application)\nDBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->wallet_id\").Vars(note)\n\n\nSetVar(this_page, ta_asbl_contract)\nSetTitle(\"Страница подписи представителем роли Apla Consensus\")\nDiv(content-wrapper){\n    Div(row mt-sm){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                DBFind(wallets).Where({key_id_buyer:#note_page_params_wallet_id#, rejected_at:0}).Vars(wallet)\n                If(#wallet_id#>0){\n                    Div(panel-body){\n                        дата подписания покупателем: DateTime(#wallet_signed_at#, \"YYYY-MM-DD HH:MI:SS\")\n                    }\n                    Div(panel-footer){\n                        Button(Body: $@1reject$, Class: btn btn-default, Page: #this_page#, Contract: TaAsblAction, Params: \"Action=reject,WalletId=#note_page_params_wallet_id#\")\n                        Button(Body: $@1accept$, Class: btn btn-primary pull-right, Page: #this_page#, Contract: TaAsblAction, Params: \"Action=accept,WalletId=#note_page_params_wallet_id#\")\n                    }\n                }.Else{\n                    Div(panel-body){\n                        wallet не найден\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ta_buyer_congratulation",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Trade APL\"}).Columns(\"id\").Vars(application)\nDBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->wallet_id\").Vars(note)\n\n\nSetVar(this_page, ta_buyer_congratulation)\nDiv(content-wrapper){\n    Div(row mt-sm){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                DBFind(wallets).Where({key_id_signer:{$neq:0}, rejected_at:0}).Vars(wallet)\n                If(#wallet_id#>0){\n                    Div(panel-body){\n                        текст, мол, спасибо, теперь вы можете перевести сумму любым способом, указанным в договоре\n                    }\n                    Div(panel-footer text-center){\n                        Button(Body: $@1readed$, Class: btn btn-primary, Page: #this_page#, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\")\n                    }\n                }.Else{\n                    Div(panel-body){\n                        wallet не найден\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ta_buyer_contract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Trade APL\"}).Columns(\"id\").Vars(application)\nDBFind(wallets).Where({key_id_buyer:#key_id#, rejected_at:0}).Vars(wallet)\n\nSetVar(this_page, ta_buyer_contract)\nSetTitle(\"Страница с договором на которую покупатель переходит при заходе\")\nDiv(content-wrapper){\n    Div(row mt-sm){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                If(#wallet_id#>0){\n                    Div(panel-body){\n                        вы уже заключили договор с Apla\n                    }\n                }.Else{\n                    Div(panel-body){\n                        текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора текст договора\n                    }\n                    Div(panel-footer){\n                        Button(Body: $@1reject$, Class: btn btn-default, Page: #this_page#, Contract: TaBuyerAction, Params: \"Action=reject\")\n                        Button(Body: $@1accept$, Class: btn btn-primary pull-right, Page: #this_page#, Contract: TaBuyerAction, Params: \"Action=accept\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ta_key_check",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group){\n                        Div(text-center text-bold h4 m0){\n                            Span(\"Public key check\")\n                        }\n                    }\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-9 mt-sm col-md-offset-3){\n                                Span(Body: \"Enter public key provided by SnapSwap in the field below and press the Send button\", Class: text-muted)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: public_key){\n                                    Span(\"SnapSwap public key\")\n                                }\n                            }\n                            Div(col-md-9 mt-sm){\n                                Input(Name: public_key, Type: textarea)\n                            }\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-12){\n                            Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Page: @1profile_view, Contract: @1TaKeyCheck).Alert(Text: \"Are you sure your information is correct?\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ta_notification",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Trade APL\"}).Columns(\"id\").Vars(application)\nDBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"notification->header,notification->body,id\").Vars(note)\n\n\nSetVar(this_page, ta_buyer_congratulation)\nDiv(content-wrapper){\n    Div(row mt-sm){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                DBFind(wallets).Where({key_id_signer:{$neq:0}, rejected_at:0}).Vars(wallet)\n                If(#note_id#>0){\n                    Div(panel-body){\n                        Div(){\n                            #note_notification_header#\n                        }\n                        Div(){\n                            #note_notification_body#\n                        }\n                    }\n                    Div(panel-footer text-center){\n                        Button(Body: $@1readed$, Class: btn btn-primary, Page: #this_page#, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\")\n                    }\n                }.Else{\n                    Div(panel-body){\n                        Оповещение не найдено\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ta_reject",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Trade APL\"}).Columns(\"id\").Vars(application)\n\nSetVar(needed_role_id,0)\nIf(GetVar(RoleParam)!=\"\"){\n    SetVar(needed_role_id, AppParam(App:#application_id#, Name:#RoleParam#, Ecosystem: #ecosystem_id#))\n}\nIf(GetVar(notific_id)!=\"\"){\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#NotificId#}).Columns(\"page_params->sale_id\").Vars(note)\n}\nSetVar(sale_id,0)\nIf(#note_id_page_params_sale_id#>0){\n    DBFind(sales).Where({id:#note_id_page_params_sale_id#}).Vars(sale)\n}\n\nDiv(content-wrapper){\n    Form(){\n        If(And(#needed_role_id#>0,#role_id#==#needed_role_id#,#sale_id#>0)){\n            Div(){\n                Input(Name:Comment, Type:textarea)\n            }\n            Div(){\n                Button(Body: $@1back$, Class: btn btn-danger, Page: #back_page#, PageParams: \"notific_id=#notific_id#\")\n                Button(Body: $@1send$, Class: btn btn-primary pull-right, Page: #back_page#, Contract: TaReject, Params: \"RoleParam=#role_param#,NotificId=#notific_id#\")\n            }\n        }.Else{\n            Div(){\n                Button(Body: $@1back$, Class: btn btn-danger, Page: #back_page#, PageParams: \"notific_id=#notific_id#\")\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ta_settings",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Trade APL\"}).Columns(\"id\").Vars(application)\n\nSetVar(this_page, ta_settings).(role_admin,0).(role_manager,0).(role_seller,0)\nSetVar(role_admin, AppParam(App:#application_id#, Name:role_sale_apl_admin, Ecosystem: #ecosystem_id#))\nSetVar(role_manager, AppParam(App:#application_id#, Name:role_sale_apl_manager, Ecosystem: #ecosystem_id#))\nSetVar(role_seller, AppParam(App:#application_id#, Name:role_seller_apl, Ecosystem: #ecosystem_id#))\n\nDBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, deleted:0}).Columns(\"role_name,id\").Limit(100)\n\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-4 text-right mt-sm\").(col_right,\"col-sm-8 text-left\")\nSetTitle($@1ta_settings$)\nDiv(content-wrapper){\n    Div(row mt-sm){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(#row#){\n                        Div(col-sm-12 text-center text-muted){\n                            $@1ta_settings_description$\n                        }\n                    }\n                    Div(#row#){\n                        Div(#col_left#){\n                            $@1role_sale_apl_admin$\n                        }\n                        Div(#col_right#){\n                            Select(Name:RoleAdmin, Source:src_roles, NameColumn: role_name, ValueColumn: id, Value:#role_admin#)\n                        }\n                    }\n                    Div(#row#){\n                        Div(#col_left#){\n                            $@1role_sale_apl_manager$\n                        }\n                        Div(#col_right#){\n                            Select(Name:RoleManager, Source:src_roles, NameColumn: role_name, ValueColumn: id, Value:#role_manager#)\n                        }\n                    }\n                    Div(#row#){\n                        Div(#col_left#){\n                            $@1role_seller_apl$\n                        }\n                        Div(#col_right#){\n                            Select(Name:RoleSeller, Source:src_roles, NameColumn: role_name, ValueColumn: id, Value:#role_seller#)\n                        }\n                    }\n                }\n                Div(panel-footer text-center){\n                    Button(Body: $@1send$, Class: btn btn-primary, Page: #this_page#, Contract: TaSettings)\n                }\n            }\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "ta_transfer_admin",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Trade APL\"}).Columns(\"id\").Vars(application)\n\nSetVar(this_page, ta_transfer_admin)\nSetVar(role_param, role_sale_apl_admin)\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-4 text-right\").(col_right,\"col-sm-8 text-left\")\nSetVar(needed_role_id, AppParam(App:#application_id#, Name:#role_param#, Ecosystem: #ecosystem_id#))\n\nAppParam(App:#application_id#, Name:ta_currency_type, Ecosystem: #ecosystem_id#, Source:currency_type)\nSetTitle($@1ta_transfer_admin$)\nDiv(content-wrapper){\n    Div(row mt-sm){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                If(And(#needed_role_id#>0,#role_id#==#needed_role_id#)){\n                    DBFind(wallets, wallets).Where({key_id_buyer:{$neq:0}, key_id_signer:{$neq:0}, rejected_at:0}).Count(wallets_count).Custom(_name){\n                        Address(#key_id_buyer#)\n                    }\n                    Div(panel-body){\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1wallet$\n                            }\n                            Div(#col_right#){\n                                If(#wallets_count#==0){\n                                    Span($@1wallets$ $@1not_founded$, text-warning)\n                                }.Else{\n                                    Select(Name:WalletId, Source:wallets, NameColumn: _name, ValueColumn: key_id_buyer)\n                                }\n                            }\n                        }\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1amount$\n                            }\n                            Div(#col_right#){\n                                Input(Name:Amount, Type:number)\n                            }\n                        }\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1currency_type$\n                            }\n                            Div(#col_right#){\n                                Select(Name:CurrencyType, Source:currency_type, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1amount_apl$\n                            }\n                            Div(#col_right#){\n                                Input(Name:AmountApl, Type:number)\n                            }\n                        }\n                    }\n                    Div(panel-footer text-center){\n                        If(#wallets_count#==0){\n                            Button(Body: $@1send_to_check$, Class: btn btn-primary disabled, Page: #this_page#)\n                        }.Else{\n                            Button(Body: $@1send_to_check$, Class: btn btn-primary, Page: #this_page#, Contract: TaTransferAdmin)\n                        }\n                    }\n                }.Else{\n                    Div(panel-body text-center){\n                        If(#needed_role_id#>0){\n                            If(#needed_role_id#!=#role_id#){\n                                DBFind(@1app_params).Where({ecosystem:#ecosystem_id#, app_id:#application_id#, name:#role_param#}).Vars(param)\n                                Div(h4){\n                                    this page only for role from parameter LinkPage(Page: @1app_params_edit, PageParams: \"id=#param_id#,back_page=#this_page#\", Body:#role_param#)\n                                }\n                            }\n                        }.Else{\n                            Div(h4){\n                                #role_param# not setted\n                            }\n                            Div(h4){\n                                LinkPage(Body:$@1ta_settings$, Page:ta_settings)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ta_transfer_manager",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Trade APL\"}).Columns(\"id\").Vars(application)\n\nSetVar(this_page, ta_transfer_manager)\nSetVar(role_param, role_sale_apl_manager)\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-4 text-right\").(col_right,\"col-sm-8 text-left\")\nSetVar(needed_role_id, AppParam(App:#application_id#, Name:#role_param#, Ecosystem: #ecosystem_id#))\n\nDBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->sale_id\").Vars(note)\nSetVar(sale_id,0)\nIf(#note_id_page_params_sale_id#>0){\n    DBFind(sales).Where({id:#note_id_page_params_sale_id#}).Vars(sale)\n}\nSetTitle($@1ta_transfer_manager$)\nDiv(content-wrapper){\n    Div(row mt-sm){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                If(And(#needed_role_id#>0,#role_id#==#needed_role_id#,#sale_id#>0)){\n                    Div(panel-body){\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1wallet$\n                            }\n                            Div(#col_right#){\n                                #sale_key_id_buyer#\n                            }\n                        }\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1amount$\n                            }\n                            Div(#col_right#){\n                                #sale_amount#\n                            }\n                        }\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1currency_type$\n                            }\n                            Div(#col_right#){\n                                AppParam(App:#application_id#, Name:ta_currency_type, Ecosystem: #ecosystem_id#, Name: #sale_currency_type#)\n                            }\n                        }\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1amount_apl$\n                            }\n                            Div(#col_right#){\n                                #sale_amount_apl#\n                            }\n                        }\n                        Div(#row# text-muted){\n                            Div(#col_left#){\n                                $@1created_at$\n                            }\n                            Div(#col_right#){\n                                DateTime(#sale_created_at#, Format: YYYY-MM-DD HH:MI:SS)\n                            }\n                        }\n                        Div(#row# text-muted){\n                            Div(#col_left#){\n                                $@1created_by$\n                            }\n                            Div(#col_right#){\n                                #sale_key_id_sale_apl_admin#\n                            }\n                        }\n                    }\n                    Div(panel-footer){\n                        Button(Body: $@1reject$, Class: btn btn-danger, Page: ta_reject, PageParams: \"RoleParam=#role_param#,notific_id=#notific_id#,back_page=#this_page#\").Popup(50,\"Rejected comment\")\n                        Button(Body: $@1accept$, Class: btn btn-primary pull-right, Page: #this_page#, Contract: TaTransferManager, Params: \"SaleId=#sale_id#\")\n                    }\n                }.Else{\n                    Div(panel-body text-center){\n                        If(#needed_role_id#>0){\n                            If(#needed_role_id#!=#role_id#){\n                                DBFind(@1app_params).Where({ecosystem:#ecosystem_id#, app_id:#application_id#, name:#role_param#}).Vars(param)\n                                Div(h4){\n                                    this page only for role from parameter LinkPage(Page: @1app_params_edit, PageParams: \"id=#param_id#,back_page=#this_page#\", Body:#role_param#)\n                                }\n                            }\n                        }.Else{\n                            Div(h4){\n                                #role_param# not setted\n                            }\n                            Div(h4){\n                                LinkPage(Body:$@1ta_settings$, Page:ta_settings)\n                            }\n                        }\n\n                        If(#note_id_page_params_sale_id#>0){\n                            If(#sale_id#>0){}.Else{\n                                sale not found\n                            }\n                        }.Else{\n                            notification not found\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ta_transfer_seller",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Trade APL\"}).Columns(\"id\").Vars(application)\n\nSetVar(this_page, ta_transfer_seller)\nSetVar(role_param, role_seller_apl)\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-4 text-right\").(col_right,\"col-sm-8 text-left\")\nSetVar(needed_role_id, AppParam(App:#application_id#, Name:#role_param#, Ecosystem: #ecosystem_id#))\n\nAppParam(App:#application_id#, Name:ta_currency_type, Ecosystem: #ecosystem_id#, Source:currency_type)\n\nSetTitle($@1ta_transfer_seller$)\nDiv(content-wrapper){\n    Div(row mt-sm){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                DBFind(wallets, wallets).Where({key_id_buyer:{$neq:0}, key_id_signer:{$neq:0}, rejected_at:0}).Vars(wallet).Custom(_name){\n                    Address(#key_id_buyer#)\n                }\n                If(And(#needed_role_id#>0,#role_id#==#needed_role_id#)){\n                    Div(panel-body){\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1wallet$\n                            }\n                            Div(#col_right#){\n                                Select(Name:WalletId, Source:wallets, NameColumn: _name, ValueColumn: key_id_buyer)\n                            }\n                        }\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1amount$\n                            }\n                            Div(#col_right#){\n                                Input(Name:Amount, Type:number)\n                            }\n                        }\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1amount$\n                            }\n                            Div(#col_right#){\n                                Select(Name:CurrencyType, Source:currency_type, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1amount_apl$\n                            }\n                            Div(#col_right#){\n                                Input(Name:AmountApl, Type:number)\n                            }\n                        }\n                        Div(#row# text-muted){\n                            Div(#col_left#){\n                                $@1created_at$\n                            }\n                            Div(#col_right#){\n                                DateTime(#sale_created_at#, Format: YYYY-MM-DD HH:MI:SS)\n                            }\n                        }\n                        Div(#row# text-muted){\n                            Div(#col_left#){\n                                $@1created_by$\n                            }\n                            Div(#col_right#){\n                                #sale_key_id_sale_apl_admin#\n                            }\n                        }\n                        Div(#row# text-muted){\n                            Div(#col_left#){\n                                $@1checked_by$\n                            }\n                            Div(#col_right#){\n                                #sale_key_id_sale_apl_manager#\n                            }\n                        }\n                    }\n                    Div(panel-footer){\n                        Button(Body: $@1reject$, Class: btn btn-danger, Page: ta_reject, PageParams: \"RoleParam=#role_param#,notific_id=#notific_id#,back_page=#this_page#\").Popup(50,\"Rejected comment\")\n                        Button(Body: $@1accept$, Class: btn btn-primary pull-right, Page: #this_page#, Contract: TaTransferSeller, Params: \"SaleId=#sale_id#\")\n                    }\n                }.Else{\n                    Div(panel-body){\n                        If(#needed_role_id#>0){\n                            If(#needed_role_id#!=#role_id#){\n                                DBFind(@1app_params).Where({ecosystem:#ecosystem_id#, app_id:#application_id#, name:#role_param#}).Vars(param)\n                                Div(h4){\n                                    this page only for role from parameter LinkPage(Page: @1app_params_edit, PageParams: \"id=#param_id#,back_page=#this_page#\", Body:#role_param#)\n                                }\n                            }\n                        }.Else{\n                            Div(h4){\n                                #role_param# not setted\n                            }\n                            Div(h4){\n                                LinkPage(Body:$@1ta_settings$, Page:ta_settings)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "TaAsblAction",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TaAsblAction {\n    data {\n        Action string\n        WalletId int\n    }\n    conditions{\n        var basicAppId int\n        basicAppId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).One(\"id\"))\n        if basicAppId == 0{\n            warning LangRes(\"@1app_not_found\", \"en\")\n        }\n        $roleConsensus = Int(AppParam(basicAppId, \"role_apla_consensus_asbl\", 1))\n        if $roleConsensus == 0{\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), \"role_apla_consensus_asbl\")\n        }\n        if !RoleAccess($roleConsensus){\n            warning \"this action allowed only for role id #\" + $roleConsensus\n        }\n        $wallet = DBFind(\"wallets\").Where({id:$WalletId, rejected_at:0}).Row()\n        if !$wallet{\n            warning \"Buyer wallet not found\"\n        }\n        if Int($wallet[\"signed_at\"]) == 0{\n            warning \"Buyer wallet not signed\"\n        }\n        if $wallet[\"key_id_signer\"] > 0{\n            warning \"This wallet was signed by asbl early\"\n        }\n    }\n\n    action {\n        if $Action == \"accept\"{\n            DBUpdate(\"wallets\", Int($wallet[\"id\"]), {key_id_signer:$key_id})\n            // buyer notification\n            var params map\n            params[\"wallet_id\"] = $wallet[\"id\"]\n            @1NotificationsSend(\"member_id,sender,text_header,page_name,params_map,closure_type\", $key_id, 1, \"Your wallet approved\", \"ta_buyer_congratulation\", params, 1)\n\n        }elif $Action == \"reject\"{\n            DBUpdate(\"wallets\", Int($wallet[\"id\"]), {rejected_at:$time})\n        }\n    }\n}\n",
            "Type": "contracts"
        },
        {
            "Name": "TaBuyerAction",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TaBuyerAction {\n    data {\n        Action string\n    }\n    conditions{\n        var basicAppId int\n        basicAppId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).One(\"id\"))\n        if basicAppId == 0{\n            warning LangRes(\"@1app_not_found\", \"en\")\n        }\n        $roleConsensus = Int(AppParam(basicAppId, \"role_apla_consensus_asbl\", 1))\n        if $roleConsensus == 0{\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), \"role_apla_consensus_asbl\")\n        }\n        $wallet = DBFind(\"wallets\").Where({key_id_buyer:$key_id, rejected_at:0}).Row()\n        if !$wallet{\n            warning \"Buyer wallet not found\"\n        }\n    }\n\n    action {\n        if $Action == \"accept\"{\n            DBUpdate(\"wallets\", Int($wallet[\"id\"]), {signed_at:$time})\n            // role Apla Consensus notification\n            var params map title string\n            title = Sprintf(\"Buyer %v signed contract\", IdToAddress($key_id))\n            params[\"wallet_id\"] = $wallet[\"id\"]\n            @1NotificationsSend(\"rid,sender,text_header,page_name,params_map,closure_type\", $roleConsensus, 2, title, \"ta_asbl_contract\", params, 1)\n\n        }elif $Action == \"reject\"{\n            DBUpdate(\"wallets\", Int($wallet[\"id\"]), {rejected_at:$time})\n        }\n    }\n}\n",
            "Type": "contracts"
        },
        {
            "Name": "TaKeyCheck",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TaKeyCheck {\n    data {\n        public_key int\n    }\n\n    conditions {\n        $salesID = Int(DBFind(\"sales\").Where({key_id_buyer: $public_key}).One(\"id\"))\n        if $salesID == 0 {\n            warning \"Sorry, this public key is not valid\"\n        }\n    }\n\n    action {\n        var start_balance snapswap_key_id int\n        start_balance = Money(1000000000000000)\n        snapswap_key_id = 1234567890123456789\n        \n        if DBFind(\"@1keys\").Where({ecosystem: $ecosystem_id, id: $key_id}).One(\"id\") == nil {\n            DBInsert(\"@1keys\", {\"id\": $key_id, \"amount\": start_balance})\n            DBUpdate(\"@1keys\", snapswap_key_id, {\"-amount\": start_balance})\n        } else {\n            warning \"You are already registered\"\n        }\n        \n        DBInsert(\"wallets\", {\"key_id_buyer\": $key_id, \"created_at\": $block_time})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TaReject",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TaReject {\n    data {\n        Comment string\n        RoleParam string\n        NotificId int\n    }\n    func getRoleId(name string) int{\n        var rid int\n        rid = Int(AppParam($appId, name, $ecosystem_id))\n        if rid == 0{\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), name)\n        }\n        return rid\n    }\n    conditions{\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:$ecosystem_id, name:\"Trade APL\"}).One(\"id\"))\n        if $appId == 0{\n            warning LangRes(\"@1app_not_found\", \"en\")\n        }\n        if !($RoleParam == \"role_sale_apl_manager\" || $RoleParam == \"role_seller_apl\"){\n            warning \"invalid role parameter\"\n        }\n        var role noteSaleId int note map\n        role = getRoleId($RoleParam)\n        if !RoleAccess(role){\n            warning \"this action allowed only for role id #\" + role\n        }\n        note = DBFind(\"@1notifications\").Where({id:$NotificId}).Columns(\"page_params->sale_id\").Row()\n        noteSaleId = Int(note[\"page_params.sale_id\"])\n        $sale = DBFind(\"sales\").Where({id:noteSaleId}).Row()\n        if !$sale {\n            warning \"Sale not found\"\n        }\n        $saleId = Int($sale[\"id\"])\n    }\n\n    action {\n        var sale params map title body string prevKeyId int\n        title = Sprintf(\"Sale %v rejected\", $saleId)\n        body = $Comment\n        params[\"sale_id\"] = $saleId\n\n        if $RoleParam == \"role_sale_apl_manager\"{\n            sale[\"key_id_sale_apl_manager\"] = $key_id\n            sale[\"manager_reject_comment\"] = $Comment\n            sale[\"manager_rejected_at\"] = $time\n            prevKeyId = Int($sale[\"key_id_sale_apl_admin\"])\n\n        }elif $RoleParam == \"role_seller_apl\"{\n            sale[\"key_id_seller\"] = $key_id\n            sale[\"seller_reject_comment\"] = $Comment\n            sale[\"seller_rejected_at\"] = $time\n            prevKeyId = Int($sale[\"key_id_sale_apl_manager\"])\n        }\n\n        DBUpdate(\"sales\", $saleId, sale)\n        @1NotificationsSend(\"member_id,sender,text_header,text_body,page_name,params_map,closure_type\", prevKeyId, 1, title, body, \"ta_notification\", params, 1)\n\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TaSettings",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TaSettings {\n    data {\n        RoleAdmin int\n        RoleManager int\n        RoleSeller int\n    }\n    conditions{\n        MainCondition()\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:$ecosystem_id, name:\"Trade APL\"}).One(\"id\"))\n        if $appId == 0{\n            warning LangRes(\"@1app_not_found\", \"en\")\n        }\n    }\n    action {\n        var params paramsNew map name string\n        if $RoleAdmin > 0{\n            name = \"role_sale_apl_admin\"\n            params = DBFind(\"@1app_params\").Where({app_id:$appId, name:name, ecosystem:$ecosystem_id}).Row()\n            paramsNew[\"Id\"] = Int(params[\"id\"])\n            paramsNew[\"Value\"] = Str($RoleAdmin)\n            paramsNew[\"Conditions\"] = params[\"conditions\"]\n            CallContract(\"@1EditAppParam\", paramsNew)\n        }\n        if $RoleManager > 0{\n            name = \"role_sale_apl_manager\"\n            params = DBFind(\"@1app_params\").Where({app_id:$appId, name:name, ecosystem:$ecosystem_id}).Row()\n            paramsNew[\"Id\"] = Int(params[\"id\"])\n            paramsNew[\"Value\"] = Str($RoleManager)\n            paramsNew[\"Conditions\"] = params[\"conditions\"]\n            CallContract(\"@1EditAppParam\", paramsNew)\n        }\n        if $RoleSeller > 0{\n            name = \"role_seller_apl\"\n            params = DBFind(\"@1app_params\").Where({app_id:$appId, name:name, ecosystem:$ecosystem_id}).Row()\n            paramsNew[\"Id\"] = Int(params[\"id\"])\n            paramsNew[\"Value\"] = Str($RoleSeller)\n            paramsNew[\"Conditions\"] = params[\"conditions\"]\n            CallContract(\"@1EditAppParam\", paramsNew)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TaTransferAdmin",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TaTransferAdmin {\n    data {\n        WalletId int\n        Amount int\n        CurrencyType int\n        AmountApl money\n    }\n    func getRoleId(name string) int{\n        var rid int\n        rid = Int(AppParam($appId, name, $ecosystem_id))\n        if rid == 0{\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), name)\n        }\n        return rid\n    }\n    conditions{\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:$ecosystem_id, name:\"Trade APL\"}).One(\"id\"))\n        if $appId == 0{\n            warning LangRes(\"@1app_not_found\", \"en\")\n        }\n        $roleAplManager = getRoleId(\"role_sale_apl_manager\")\n        var role int\n        role = getRoleId(\"role_sale_apl_admin\")\n        if !RoleAccess(role){\n            warning \"this action allowed only for role id #\" + role\n        }\n\n        $wallet = DBFind(\"wallets\").Where({id:$WalletId}).Row()\n        if !$wallet{\n            warning \"Buyer wallet not found\"\n        }\n        if $CurrencyType <= 0 || $CurrencyType > 3{\n            warning \"Invalid Currency Type\"\n        }\n    }\n\n    action {\n        var sale map saleId int\n        sale[\"buyer_key_id\"] = $wallet[\"buyer_key_id\"]\n        sale[\"currency_type\"] = $CurrencyType\n        sale[\"amount\"] = $Amount\n        sale[\"amount_apl\"] = $AmountApl\n        sale[\"key_id_sale_apl_admin\"] = $key_id\n        sale[\"created_at\"] = $time\n\n        saleId = DBInsert(\"sales\", sale)\n\n        // role Apla sales manager notification\n        var params map title page string\n        title = Sprintf(\"Check sale id %v\", saleId)\n        page = \"ta_transfer_manager\"\n        params[\"sale_id\"] = saleId\n        @1NotificationsSend(\"rid,sender,text_header,page_name,params_map,closure_type\", $roleAplManager, 2, title, page, params, 1)\n\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TaTransferManager",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TaTransferManager {\n    data {\n        SaleId int\n    }\n    func getRoleId(name string) int{\n        var rid int\n        rid = Int(AppParam($appId, name, $ecosystem_id))\n        if rid == 0{\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), name)\n        }\n        return rid\n    }\n    conditions{\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:$ecosystem_id, name:\"Trade APL\"}).One(\"id\"))\n        if $appId == 0{\n            warning LangRes(\"@1app_not_found\", \"en\")\n        }\n        $roleAplSeller = getRoleId(\"role_seller_apl\")\n        var role int\n        role = getRoleId(\"role_sale_apl_manager\")\n        if !RoleAccess(role){\n            warning \"this action allowed only for role id #\" + role\n        }\n\n        $sale = DBFind(\"sales\").Where({id:$SaleId}).Row()\n        if !$sale{\n            warning \"Sale not found\"\n        }\n    }\n\n    action {\n        DBUpdate(\"sales\", Int($sale[\"id\"]), {key_id_sale_apl_manager:$key_id})\n\n        // role Apla seller notification\n        var params map title page string\n        title = Sprintf(\"Transfer sale id %v\", $sale[\"id\"])\n        params[\"sale_id\"] = $sale[\"id\"]\n        page = \"ta_transfer_seller\"\n        @1NotificationsSend(\"rid,sender,text_header,page_name,params_map,closure_type\", $roleAplSeller, 2, title, page, params, 1)\n\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TaTransferSeller",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TaTransferSeller {\n    data {\n        SaleId int\n    }\n    func getRoleId(name string) int{\n        var rid int\n        rid = Int(AppParam($appId, name, $ecosystem_id))\n        if rid == 0{\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), name)\n        }\n        return rid\n    }\n    conditions{\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:$ecosystem_id, name:\"Trade APL\"}).One(\"id\"))\n        if $appId == 0{\n            warning LangRes(\"@1app_not_found\", \"en\")\n        }\n\n        var role int\n        role = getRoleId(\"role_seller_apl\")\n        if !RoleAccess(role){\n            warning \"this action allowed only for role id #\" + role\n        }\n\n        $sale = DBFind(\"sales\").Where({id:$SaleId}).Row()\n        if !$sale{\n            warning \"sale not found\"\n        }\n    }\n\n    action {\n        var sale transfer map\n        sale[\"key_id_seller\"] = $key_id\n        sale[\"seller_transferred_at\"] = $time\n        DBUpdate(\"sales\", Int($sale[\"id\"]), sale)\n\n        transfer[\"Amount\"] = sale[\"amount_apl\"]\n        transfer[\"Sender_AccountId\"] = $key_idsale[\"amount\"]\n        transfer[\"Recipient_AccountId\"] = sale[\"key_id_buyer\"]\n        CallContract(\"@1TokensTransfer\", transfer)\n    }\n}",
            "Type": "contracts"
        }
    ]
}