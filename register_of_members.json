{
    "name": "Register of members",
    "conditions": "ContractConditions(\"DeveloperCondition\")",
    "data": [
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"DeveloperCondition\")",
            "Value": "MenuItem(Title: \"Реестр членов партии\", Page: rom_members, Icon:\"icon-list\")",
            "Type": "menu"
        },
        {
            "Name": "rom_member_add",
            "Conditions": "ContractConditions(\"DeveloperCondition\")",
            "Value": "SetVar(volunteer_role_id, EcosysParam(Name:role_volunteer))\nSetVar(donor_role_id, EcosysParam(Name:role_donor))\nSetVar(member_role_id, EcosysParam(Name:role_member))\nSetVar(regional_role_id, EcosysParam(Name:role_regional))\nSetVar(federal_role_id, EcosysParam(Name:role_federal))\n\nForm(){\n    Div(row){\n        Div(col-md-2 mt-lg text-right){\n            Label(For: Pub){\n                LangRes(@1pub_key)\n            }\n        }\n        Div(col-md-10){\n            Input(Name: Pub, Type: textarea)\n        }\n    }\n    Div(row mt){\n        Div(col-md-2 mt-lg text-right){\n            Label(For: wallet_eth){\n                LangRes(@1ts_wallet_eth)\n            }\n        }\n        Div(col-md-10){\n            Input(Name: wallet_eth, Type: textarea).Validate(minLength:40, maxLength:44)\n            InputErr(Name: wallet_btc, minLength: $@1validate_wallet_eth$, maxLength: $@1validate_wallet_eth$)\n        }\n    }\n    Div(mt pull-right){\n        Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1ts_free_wallets)\n        Button(Body: LangRes(@1add), Class: btn btn-primary, Page: @1ts_free_wallets, Contract: @1TsFreeWalletAdd)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "rom_members",
            "Conditions": "ContractConditions(\"DeveloperCondition\")",
            "Value": "SetVar(this_page, rom_members).(this_table, @1members)\nInclude(@1pager_header)\n\nSetVar(volunteer_role_id, EcosysParam(Name:role_volunteer))\nSetVar(donor_role_id, EcosysParam(Name:role_donor))\nSetVar(member_role_id, EcosysParam(Name:role_member))\nSetVar(regional_role_id, EcosysParam(Name:role_regional))\nSetVar(federal_role_id, EcosysParam(Name:role_federal))\n\nSetTitle(\"Реестр членов партии\")\n\nIf(And(#snapswap_role_id#>0,#role_id#==#snapswap_role_id#)){\n    AddToolButton(Title:$@1ts_add_public_key$, Page: @1ts_key_approve, Icon: icon-wallet).Popup(Header: $@1ts_add_public_key$, Width: \"50\")\n}\n\nIf(GetVar(search)!=\"\"){\n    SetVar(where, {$and: [{\"key_id_buyer\":{$neq:0}}, {$or:[{\"pub_buyer\": {$like: #search#}},{\"wallet_btc\": {$like: #search#}},{\"wallet_eth\": {$like: #search#}}]}]})\n}.Else{\n    SetVar(where, {\"key_id_buyer\":{$neq:0}}).(search,)\n}\n\nDiv(list-group-item ml-lg mr-lg pt-lg){\n    SetVar(search_name, LangRes(@1pub_key) \\ LangRes(@1wallet))\n    Include(@1search)\n}\n\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_rat){\n    If(#rejected_at#>0){\n        DateTime(#rejected_at#, Format: YYYY-MM-DD HH:MI:SS)\n    }.Else{\n        Span(Class: text-muted, Body: --)\n    }\n}.Custom(_sat){\n    If(#signed_at#>0){\n        DateTime(#signed_at#, Format: YYYY-MM-DD HH:MI:SS)\n    }\n}.Custom(_cat){\n    If(#created_at#>0){\n        Span(Class:text-muted, Body:DateTime(#created_at#, Format: YYYY-MM-DD HH:MI:SS))\n    }\n}.Custom(_buyer){\n    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#key_id_buyer#\"){\n        Address(#key_id_buyer#)\n    }\n    Div(){\n        Span(Class: h6 text-muted, Body: PUB:)\n        Span(Class: h6 text-muted ml-sm, Body: #pub_short_buyer#)\n    }\n}.Custom(_signer){\n    If(#key_id_signer#!=0){\n        Span(Class:text-success, Body: Address(#key_id_signer#))\n    }\n}.Custom(_wlts){\n    Div(){\n        Span(Class: h6 text-muted, Body: BTC:)\n        Span(Class: h6 ml-sm, Body: #wallet_btc#)\n    }\n    Div(){\n        Span(Class: h6 text-muted, Body: ETH:)\n        Span(Class: h6 ml-sm, Body: #wallet_eth#)\n    }\n}.Count(count)\n\nDiv(fullscreen){\n    Div(table-responsive ml-lg mr-lg){\n        Div(list-group-item){\n            If(#count# > 0){\n                Table(src, \"$@1id$=id,$@1key_id_investor$=_buyer,$@1wallets$=_wlts,$@1created_at$=_cat,$@1signed_at$=_sat,$@1rejected_at$=_rat,$@1key_id_consensus$=_signer\")\n            }.Else{\n                Div(Class: text-center h4 text-muted, Body: \"$@1wallets$ $@1not_founded$\")\n            }                       \n        }.Style(\n            margin-top:-15px;\n            tbody > tr:nth-of-type(odd) {\n                background-color: #f8f9fc;\n            }\n        )\n    }\n}\nDiv(mt-sm ml-lg mr-sm mb-sm){\n    Include(@1pager)\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "RomAdd",
            "Conditions": "ContractConditions(\"DeveloperCondition\")",
            "Value": "contract RomAdd {\n    data {\n        Action string\n    }\n    conditions{\n        var basicAppId int\n        basicAppId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).One(\"id\"))\n        if basicAppId == 0{\n            warning LangRes(\"@1app_not_found\", \"en\")\n        }\n        $roleConsensus = Int(EcosysParam(\"role_apla_consensus_asbl\"))\n        if $roleConsensus == 0{\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), \"role_apla_consensus_asbl\")\n        }\n        $wallet = DBFind(\"ts_wallets\").Where({key_id_buyer:$key_id, rejected_at:0}).Row()\n        if !$wallet{\n            warning \"Buyer wallet not found\"\n        }\n    }\n\n    action {\n        if $Action == \"accept\"{\n            DBUpdate(\"ts_wallets\", Int($wallet[\"id\"]), {signed_at:$time})\n            // role Apla Consensus notification\n            var params map title string\n            title = Sprintf(\"Buyer %v signed contract\", IdToAddress($key_id))\n            params[\"wallet_id\"] = $wallet[\"id\"]\n            @1NotificationsSend(\"rid,sender,text_header,page_name,params_map,closure_type\", $roleConsensus, 1, title, \"ts_consensus_contract\", params, 1)\n\n        }elif $Action == \"reject\"{\n            DBUpdate(\"ts_wallets\", Int($wallet[\"id\"]), {rejected_at:$time})\n        }\n\n        var notes array i int note map\n        notes = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->member_id\":$key_id, page_name:\"@1ts_buyer_contract\", closed:0}).Columns(\"id\")\n        while i < Len(notes){\n            note = notes[i]\n            @1NotificationsClose(\"notific_id\",Int(note[\"id\"]))\n            i = i + 1\n        }\n    }\n}\n",
            "Type": "contracts"
        }
    ]
}