{
    "blocks": [],
    "contracts": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Notifications_Roles_Close {\n    data {\n        notific_id int\n    }\n\n    conditions {\n        $notifications_map = DBFind(\"notifications\").Columns(\"id,date_start_processing,processing_info->member_id,closed\").Where(\"id=$\", $notific_id).Row()\n        if !$notifications_map {\n            warning \"Notification not found\"\n        }\n\n        if $notifications_map[\"date_start_processing\"] == \"\" {\n            warning \"Sorry, processing of this notification has not yet begun\"\n        }\n\n        if $notifications_map[\"processing_info.member_id\"] != $key_id {\n            warning \"Sorry, processing of this notice began another member\"\n        }\n\n        if $notifications_map[\"closed\"] > 0 {\n            warning \"Sorry, this notification has already been closed before\"\n        }\n    }\n\n    action {\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_closed,closed\", $block_time, 1)\n    }\n}",
            "Name": "Notifications_Roles_Close"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Notifications_Roles_Processing {\n    data {\n        notific_id int\n    }\n\n    conditions {\n        $notifications_map = DBFind(\"notifications\").Where(\"id=$\", $notific_id).Row()\n        if !$notifications_map {\n            warning \"Notification not found\"\n        }\n\n        if $notifications_map[\"date_start_processing\"] != \"\" {\n            warning \"Sorry, processing of this notification has already begun\"\n        }\n\n        $participant_id = DBFind(\"roles_participants\").Where(\"role->id=$ and member->member_id=$ and deleted=0\", Int($notifications_map[\"role_id\"]), $key_id).One(\"id\")\n        if $participant_id == 0 {\n            warning \"Sorry, you are not part of the role for which this notification is intended\"\n        }\n\n        $processing_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        if !$processing_map {\n            warning \"Member not found\"\n        }\n    }\n\n    action {\n        var processing_info map\n        processing_info[\"member_id\"] = $processing_map[\"id\"]\n        processing_info[\"member_name\"] = $processing_map[\"member_name\"]\n        processing_info[\"image_id\"] = $processing_map[\"image_id\"]\n\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_start_processing,processing_info\", $block_time, processing_info)\n    }\n}",
            "Name": "Notifications_Roles_Processing"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Notifications_Single_Send_map {\n    data {\n        member_id int\n        sender int\n        icon_name string\n        text_header string\n        text_body string \"optional\"\n        page_name string\n        params_map map\n    }\n\n    conditions {\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\n        if !$member_map {\n            warning \"Member not found\"\n        }\n\n        if $sender == 1 {\n            $sender_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n            if !$sender_map {\n                warning \"Member not found\"\n            }\n        }\n        if $sender == 2 {\n            // !!! need to fix role_id to the global variable !!!!\n            $sender_map = DBFind(\"roles\").Where(\"id = $\", 1).Row()\n            if !$sender_map {\n                warning \"Member not found\"\n            }\n        }\n    }\n\n    action {\n        var recipient map\n        recipient[\"member_id\"] = $member_map[\"id\"]\n        recipient[\"member_name\"] = $member_map[\"member_name\"]\n        recipient[\"image_id\"] = $member_map[\"image_id\"]\n\n        var sender map\n        if $sender == 1 {\n            sender[\"type\"] = 1\n            sender[\"member_id\"] = $sender_map[\"id\"]\n            sender[\"member_name\"] = $sender_map[\"member_name\"]\n            sender[\"image_id\"] = $sender_map[\"image_id\"]\n        }\n        if $sender == 2 {\n            sender[\"type\"] = 2\n            sender[\"role_id\"] = $sender_map[\"id\"]\n            sender[\"role_name\"] = $sender_map[\"role_name\"]\n            sender[\"image_id\"] = $sender_map[\"image_id\"]\n        }\n\n        var notification map\n        notification[\"header\"] = $text_header\n        notification[\"type\"] = 1\n        notification[\"icon\"] = $icon_name\n        notification[\"body\"] = $text_body\n\n        DBInsert(\"notifications\", \"recipient,sender,notification,page_name,page_params,timestamp date_created\",\n            recipient, sender, notification, $page_name, $params_map, $block_time)\n    }\n}",
            "Name": "Notifications_Single_Send_map"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Notifications_Single_Send_str {\n    data {\n        member_id int\n        sender int\n        icon_name string\n        text_header string\n        text_body string \"optional\"\n        page_name string\n        params_val string \"optional\"\n    }\n\n    conditions {}\n\n    action {\n        var params_map map\n        if Size($params_val) > 0 {\n            params_map = JSONToMap($params_val)\n        }\n        Notifications_Single_Send_map(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\",\n            $member_id, $sender, $icon_name, $text_header, $text_body, $page_name, params_map)\n    }\n}",
            "Name": "Notifications_Single_Send_str"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Notifications_Single_Close {\n    data {\n        notific_id int\n    }\n\n    conditions {\n        $processing_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        if !$processing_map {\n            warning \"Member not found\"\n        }\n    }\n\n    action {\n        var processing_info map\n        processing_info[\"member_id\"] = $processing_map[\"id\"]\n        processing_info[\"member_name\"] = $processing_map[\"member_name\"]\n        processing_info[\"image_id\"] = $processing_map[\"image_id\"]\n\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_start_processing,processing_info,timestamp date_closed,closed\",\n            $block_time, processing_info, $block_time, 1)\n    }\n}",
            "Name": "Notifications_Single_Close"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Notifications_Roles_Send_map {\n    data {\n        rid int\n        closure_type int\n        sender int\n        icon_name string\n        text_header string\n        text_body string \"optional\"\n        page_name string\n        params_map map\n    }\n    \n    conditions {\n        $roles_map = DBFind(\"roles\").Where(\"id = $\", $rid).Row()\n        if !$roles_map {\n            warning \"Role not found\"\n        }\n        \n        $participant_id = DBFind(\"roles_participants\").Where(\"role->id=$ and deleted=0\", $rid).One(\"id\")\n        if !$participant_id {\n            warning \"Role does not contain members\"\n        }\n        \n        if $sender == 1 {\n            $sender_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n            if !$sender_map {\n                warning \"Member not found\"\n            }\n        }\n        if $sender == 2 {\n            // !!! need to fix role_id to the global variable !!!!\n            $sender_map = DBFind(\"roles\").Where(\"id = $\", 1).Row()\n            if !$sender_map {\n                warning \"Member not found\"\n            }\n        }\n    }\n    \n    action {\n        //closure_type - Single\n        if $closure_type == 1 {\n            var recipient map\n            recipient[\"role_id\"] = $roles_map[\"id\"]\n            recipient[\"role_name\"] = $roles_map[\"role_name\"]\n            recipient[\"image_id\"] = $roles_map[\"image_id\"]\n            \n            var sender map\n            if $sender == 1 {\n                sender[\"type\"] = 1\n                sender[\"member_id\"] = $sender_map[\"id\"]\n                sender[\"member_name\"] = $sender_map[\"member_name\"]\n                sender[\"image_id\"] = $sender_map[\"image_id\"]\n            }\n            if $sender == 2 {\n                sender[\"type\"] = 2\n                sender[\"role_id\"] = $sender_map[\"id\"]\n                sender[\"role_name\"] = $sender_map[\"role_name\"]\n                sender[\"image_id\"] = $sender_map[\"image_id\"]\n            }\n            \n            var notification map\n            notification[\"header\"] = $text_header\n            notification[\"type\"] = 2\n            notification[\"icon\"] = $icon_name\n            notification[\"body\"] = $text_body\n            \n            DBInsert(\"notifications\", \"recipient,sender,notification,page_name,page_params,timestamp date_created\",\n            recipient, sender, notification, $page_name, $params_map, $block_time)\n        }\n        //closure_type - Multiple\n        else {\n            var participants array\n            participants = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id = $ and deleted=0\", $rid)\n            \n            var i int\n            while i < Len(participants) {\n                var p map\n                p = participants[i]\n                Notifications_Single_Send_str(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\",\n                Int(p[\"member.member_id\"]), $sender, $icon_name, $text_header, $text_body, $page_name, $params_map)\n                \n                i = i + 1\n            }\n        }\n    }\n}",
            "Name": "Notifications_Roles_Send_map"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Notifications_Roles_Send_str {\n    data {\n        rid int\n        closure_type int\n        sender int\n        icon_name string\n        text_header string\n        text_body string \"optional\"\n        page_name string\n        params_val string \"optional\"\n    }\n\n    conditions {}\n\n    action {\n        var params_map map\n        if Size($params_val) > 0 {\n            params_map = JSONToMap($params_val)\n        }\n        Notifications_Roles_Send_map(\"rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map\",\n            $rid, $closure_type, $sender, $icon_name, $text_header, $text_body, $page_name, params_map)\n    }\n}",
            "Name": "Notifications_Roles_Send_str"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UploadBinary {\n    data {\n        Name string\n        Data string\n        AppID int\n    }\n\n    conditions {\n        $Id = Int(DBFind(\"binaries\").Columns(\"id\").Where(\"app_id = ? AND member_id = ? AND name = ?\", $AppID, $key_id, $Name).One(\"id\"))\n    }\n    \n    action {\n        var hash string\n        hash = MD5($Data)\n\n        if $Id != 0 {\n            DBUpdate(\"binaries\", $Id, \"data,hash\", $Data, hash)\n        } else {\n            $Id = DBInsert(\"binaries\", \"app_id,member_id,name,data,hash\", $AppID, $key_id, $Name, $Data, hash)\n        }\n        $result = $Id \n    }\n}",
            "Name": "UploadBinary"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RoleConditions {\n    data{\n        role string\n    }\n    conditions {\n        var assigned string\n        assigned = DBFind(\"roles_assign\").Where(\"role_name=? and member_id=? and delete=0\", $role, $key_id).One(\"id\")\n\t\tif !assigned {\n            warning Sprintf(\"This action allowed only for role: %v\", $role)\n        }\n    }\n}",
            "Name": "RoleConditions"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Assign {\n    data {\n        rid int\n        member_id int\n    }\n    \n    conditions {\n        $role_map = DBFind(\"roles\").Columns(\"id,deleted,role_type,role_name,image_id,creator->member_id\").Where(\"id = $\", $rid).Row()\n        if !$role_map {\n            warning \"Role not found\"\n        }\n        \n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\n        if !$member_map {\n            warning \"Member not found\"\n        }\n        \n        $appointer_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        if !$appointer_map {\n            warning \"Appointer not found\"\n        }\n        \n        if $role_map[\"deleted\"] == 1 {\n            warning \"This role has been deleted. The appointment of members is impossible\"\n        }\n        \n        var specialRules map\n        specialRules[\"sysparams_AcceptValidator\"] = \"Validator\"\n        specialRules[\"sysparams_DelegateRefresh\"] = \"Delegate\"\n        specialRules[\"sysparams_CandidateValidatorRequest\"] = \"Candidate for validators\"\n        specialRules[\"voting_TemplateRun\"] = \"Investor with voting rights\"\n        \n        if !(specialRules[$original_contract] == $role_map[\"role_name\"]) {\n            if $role_map[\"role_type\"] != 1 && $role_map[\"role_type\"] != 4 {\n                warning \"This role is not assignable. The appointment of members is impossible\"\n            }\n            // check creator of the role\n            if $role_map[\"creator.member_id\"] != $key_id {\n                warning \"Sorry, you are not the creator of this role. The appointment of members is impossible\"\n            }\n        }\n        \n        $assign_id = DBFind(\"roles_participants\").Where(\"role->id=$ and member->member_id=$ and deleted=0\", $rid, $member_id).One(\"id\")\n        if $assign_id {\n            warning \"This member has already been added\"\n        }\n        \n    }\n    \n    action {\n        var role map\n        role[\"id\"] = $role_map[\"id\"]\n        role[\"type\"] = $role_map[\"role_type\"]\n        role[\"name\"] = $role_map[\"role_name\"]\n        role[\"image_id\"] = $role_map[\"image_id\"]\n        \n        var member map\n        member[\"member_id\"] = $member_map[\"id\"]\n        member[\"member_name\"] = $member_map[\"member_name\"]\n        member[\"image_id\"] = $member_map[\"image_id\"]\n        \n        var appointed map\n        appointed[\"member_id\"] = $appointer_map[\"id\"]\n        appointed[\"member_name\"] = $appointer_map[\"member_name\"]\n        appointed[\"image_id\"] = $appointer_map[\"image_id\"]\n        \n        DBInsert(\"roles_participants\", \"role,member,appointed,timestamp date_created\", role, member, appointed, $block_time)\n    }\n}",
            "Name": "Roles_Assign"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Profile_Edit {\n    data {\n        member_name string\n        member_image string \"image\"\n        information string \"optional\"\n    }\n\n    conditions {\n        var app_name string\n        app_name = \"Basic application\" \n\n        $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        $app_id = DBFind(\"applications\").Where(\"name = $ AND deleted = 0\", app_name).One(\"id\")\n\n        if !$member_map {\n            // check member_name \n            $member_id = DBFind(\"members\").Where(\"member_name = $\", $member_name).One(\"id\")\n            if $member_id {\n                warning \"This member name is busy. Enter another member name, please\"\n            }\n\n            // check avatar \n            if Size($member_image) == 0 {\n                warning \"Avatar was not received\"\n            }\n        }\n    }\n\n    action {\n        var memberInfo map\n        var image_id int\n        var image_name string\n        image_name = \"avatar\" \n\n        if $member_map {\n            image_id = Int($member_map[\"image_id\"]) \n            if Size($member_image) > 0 {\n                image_id = UploadBinary(\"Name,Data,AppID,MemberID\", image_name, $member_image, Int($app_id), $key_id)\n            }\n            DBUpdate(\"members\", Int($member_map[\"id\"]), \"member_info->information,image_id\", $information, image_id)\n        } else {\n            memberInfo[\"information\"] = $information\n            image_id = UploadBinary(\"Name,Data,AppID,MemberID\", image_name, $member_image, Int($app_id), $key_id)\n            DBInsert(\"members\", \"id,member_name,image_id,member_info\", $key_id, $member_name, image_id, memberInfo)\n        }\n    }\n}",
            "Name": "Profile_Edit"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Unassign {\n    data {\n        row_id int\n    }\n    \n    conditions {\n        // check record\n        var assigned, role map\n        assigned = DBFind(\"roles_participants\").Columns(\"id,role->id\").Where(\"id=$\", $row_id).Row()\n        if !assigned {\n            warning \"Participant not found\"\n        }\n        \n        role = DBFind(\"roles\").Columns(\"id,creator->member_id\").Where(\"id=?\", assigned[\"role.id\"]).Row()\n        if !role {\n            warning \"Role not found in the roles registry\"\n        }\n        \n        var specialRules map\n        specialRules[\"sysparams_AcceptValidator\"] = \"Validator\"\n        specialRules[\"sysparams_DelegateRefresh\"] = \"Delegate\"\n        specialRules[\"sysparams_CandidateValidatorRequest\"] = \"Candidate for validators\"\n        specialRules[\"sysparams_InvestorRefresh\"] = \"Investor with voting rights\"\n        specialRules[\"sysparams_ValidatorResign\"] = \"Validator\"\n        \n        if !(specialRules[$original_contract] == role[\"role_name\"]) {\n            // check creator of the role\n            if role[\"creator.member_id\"] != $key_id {\n                warning \"Sorry, you are not the creator of this role\"\n            }\n        }\n    }\n    \n    action {\n        // delete the member\n        DBUpdate(\"roles_participants\", $row_id, \"deleted,timestamp date_deleted\", 1, $block_time)\n    }\n}",
            "Name": "Roles_Unassign"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Del {\n    data {\n        rid int\n    }\n    \n    conditions {        \n        var role map\n        role = DBFind(\"roles\").Columns(\"id,role_type,creator->member_id\").Where(\"id=?\", $rid).Row()\n        if !role {\n            warning \"Role not found\"\n        }\n        \n        if role[\"role_type\"] == 3 {\n            warning \"System role can not be removed\"\n        }\n        \n        if role[\"creator.member_id\"] != $key_id {\n            warning \"Sorry, you are not the creator of this role\"\n        }\n    }\n    \n    action {\n        var participants array\n        participants = DBFind(\"roles_participants\").Columns(\"id\").Where(\"role->id=? and deleted=0\", $rid)\n        \n        // delete all participants\n        var i int\n        while i < Len(participants) {\n            var p map\n            p = participants[i]\n            Roles_Unassign(\"row_id\", Int(p[\"id\"]))\n            i = i + 1\n        }\n        \n        DBUpdate(\"roles\", $rid, \"deleted,timestamp date_deleted\", 1, $block_time)\n    }\n}",
            "Name": "Roles_Del"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokenTransfer {\n    data {\n        Amount money\n        Sender_AccountId int\n        Recipient_AccountId int\n        Comment string \"optional\"\n        Signature string \"optional hidden\"\n    }\n    \n    conditions {\n        //check amount\n        if $Amount == 0 {\n            error \"Amount is zero\"\n        }\n        if $Amount < 0 {\n            error \"Amount is negative\"\n        }\n        \n        //check the sender\n        var sender string\n        sender = DBFind(\"keys\").Where(\"id=$\", $Sender_AccountId).One(\"id\")\n        if !sender {\n            error Sprintf(\"Sender %v is invalid\", $Sender_AccountId)\n        }\n        \n        //check balance\n        $sender_balance = Money(DBFind(\"keys\").Where(\"id=$\", $Sender_AccountId).One(\"amount\"))\n        if $Amount > $sender_balance {\n            error Sprintf(\"Money is not enough %v < %v\", $sender_balance, $Amount)\n        }\n        \n        //check the recipient\n        var recipient string\n        recipient = DBFind(\"keys\").Where(\"id=$\", $Recipient_AccountId).One(\"id\")\n        if !recipient {\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_AccountId)\n        }\n    }\n    \n    action {\n        DBUpdate(\"keys\", $Sender_AccountId, \"-amount\", $Amount)\n        DBUpdate(\"keys\", $Recipient_AccountId, \"+amount\", $Amount)\n        DBInsert(\"history\", \"sender_id,recipient_id,amount,comment,block_id,txhash\", $Sender_AccountId, $Recipient_AccountId, $Amount, $Comment, $block, $txhash)\n    }\n}",
            "Name": "TokenTransfer"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SendTokens {\n    data {\n        Amount money\n        Recipient_Account string\n        Signature string \"signature:TokenTransfer\"\n    }\n\n    conditions {\n        $recipient = AddressToId($Recipient_Account)\n        if $recipient == 0 {\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_Account)\n        }\n    }\n\n    action {\n        TokenTransfer(\"Amount,Sender_AccountId,Recipient_AccountId,Signature\", $Amount, $key_id, $recipient, $Signature)\n    }\n}",
            "Name": "SendTokens"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Create {\n    data {\n        role_name string\n        role_type int\n        icon string \"image,optional\"\n        company_id int \"optional\"\n    }\n    \n    conditions {\n        // system role\n        if $role_type == 3 {\n            warning \"System role can not be created\"\n        }\n        \n        // company role\n        if $role_type == 4 {\n            // check param\n            if $company_id == 0 {\n                warning \"On this page you can not create a role for the company. Go to the company's view page to create a role\"\n            }\n            \n            // check creator of the company\n            if $company_id != $key_id {\n                warning \"Sorry, you are not the creator of this company\"\n            }\n        }\n        \n        $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        if !$member_map {\n            warning \"You are not a member of the ecosystem\"\n        }\n    }\n    \n    action {\n        var creator map\n        creator[\"member_id\"] = $member_map[\"id\"]\n        creator[\"member_name\"] = $member_map[\"member_name\"]\n        creator[\"image_id\"] = $member_map[\"image_id\"]\n        \n        // insert role\n        if $role_type == 4 {\n            $rid = DBInsert(\"roles\", \"role_name,role_type,creator,timestamp date_created,company_id\", $role_name, $role_type, creator, $block_time, $company_id)\n        } else {\n            $rid = DBInsert(\"roles\", \"role_name,role_type,creator,timestamp date_created,company_id\", $role_name, $role_type, creator, $block_time, 0)\n        }\n\n        // insert image\n        var imageId int\n        if Size($icon) > 0 {\n            var app_name string\n            app_name = \"Basic application\"\n\n            var image_name string\n            image_name = \"role-\" + Str($rid) + \" \" + MD5($icon)\n\n            $app_id = DBFind(\"applications\").Where(\"name = $ AND deleted = 0\", app_name).One(\"id\")\n            imageId = UploadBinary(\"Name,Data,AppID,MemberID\", image_name, $icon, Int($app_id), $key_id)\n        }\n\n        // update image\n        DBUpdate(\"roles\", $rid,  \"image_id\", imageId)\n\n        // result\n        $result = $rid\n    }\n}",
            "Name": "Roles_Create"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract catalog_ecosystems_Add {\n    data {\n        Ecosystem_name string\n        Ecosystem_number int\n        Logo string \"image\"\n        Ecosystem_type int\n        Description string\n        Conditions string\n        Flag_free int\n        Vde_form_address string \"optional\"\n        Vde_page string \"optional\"\n        Web_form_address string \"optional\"\n        Web_page string \"optional\"\n        Email string \"optional\"\n        Phone string \"optional\"\n    }\n    conditions {\n        var FOUNDER_ACCOUNT, DELEGATE_ACCOUNT string\n        FOUNDER_ACCOUNT = \"founder_account\"\n        DELEGATE_ACCOUNT = \"delegate_account\"\n        \n        if Size($Email) > 0 {\n            var emailParts int\n            emailParts = Split($Email, \"@\")\n            if Len(emailParts) != 2 {\n                warning \"Invalid email\"\n            }\n        }\n        \n        if Size($Logo) == 0 {\n            warning \"Required logo\"\n        }\n        var ecoExists map\n        ecoExists = DBFind(\"catalog_ecosystems\").Where(\"ecosystem_number=? and deleted=0\", $Ecosystem_number).Row()\n        if ecoExists {\n            info \"The ecosystem with same number already added\"\n        }\n\n        var isFounder, isDelegate bool\n        var founder, delegate map\n        founder = DBFind(\"parameters\").Where(\"name=?\", FOUNDER_ACCOUNT).Ecosystem($Ecosystem_number).Row()\n        isFounder = founder[\"value\"] == $key_id\n        \n        delegate = DBFind(\"parameters\").Where(\"name=?\", DELEGATE_ACCOUNT).Ecosystem($Ecosystem_number).Row()\n        if delegate {\n            isDelegate = delegate[\"value\"] == $key_id\n        }\n        if !(isFounder || isDelegate) {\n            warning \"Sorry, you can not add this ecosystem\"\n        }\n    }\n    \n    action {\n        var ecosystem_info map\n        ecosystem_info[\"description\"] = $Description\n        ecosystem_info[\"conditions\"] = $Conditions\n        ecosystem_info[\"email\"] = $Email\n        ecosystem_info[\"phone\"] = $Phone\n        \n        var url_address map\n        url_address[\"web_page\"] = $Web_page\n        url_address[\"web_form_address\"] = $Web_form_address\n        url_address[\"vde_page\"] = $Vde_page\n        url_address[\"vde_form_address\"] = $Vde_form_address\n        \n        var image_id int\n        image_id = DBInsert(\"binaries\", \"data\", $Logo)\n        \n        DBInsert(\"catalog_ecosystems\", \"ecosystem_name,ecosystem_number,ecosystem_type,image_id,ecosystem_info,url_address,flag_free\",\n        $Ecosystem_name, $Ecosystem_number, $Ecosystem_type, image_id, ecosystem_info, url_address, $Flag_free)\n    }\n}",
            "Name": "catalog_ecosystems_Add"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract catalog_ecosystems_Request {\n    data {\n        ecosystem_num int\n        pub_key string\n        comment string \"optional\"\n    }\n    \n    conditions {\n        if $ecosystem_num <= 1 {\n            warning \"Invalid number of Ecosystem\"\n        }\n        var requested string\n        requested = DBFind(\"membership_requests\").Where(\"member_id=?\", $key_id).Ecosystem($ecosystem_num).One(\"id\")\n        if requested {\n            warning \"Request was sent earlier\"\n        }\n        var id int\n        id = PubToID($pub_key)\n        if id != $key_id {\n            warning \"Invalid Public key\"\n        }\n    }\n    \n    action {\n        DBInsert($table_name, \"member_id,pub_key,comment\", $key_id, $pub_key, $comment)\n    }\n}",
            "Name": "catalog_ecosystems_Request"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_CheckDecision {\n    data {\n        votingID int\n    }\n    func runContract(cont, p string){\n        if Size(cont) > 0 {\n            var params map\n            if Size(p) > 0 {\n                params = JSONToMap(p)\n            }\n            CallContract(cont, params)\n        }\n    }\n    func percentPartOfTotal(part, total int) int {\n        if total == 0{ total = 1 }\n        var percent int\n        percent = Int((part * 100)/total)\n        if percent > 100 { percent = 100 }\n        return percent\n    }\n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"voting->name,voting->type,voting->quorum,voting->type_decision,flags->success,progress->number_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=? and (CAST(progress->percent_voters as INTEGER)>=CAST(voting->quorum as INTEGER) or date_ended<now())\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting has not expired. Try again later, please\"\n        }\n\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id=$\", $votingID).One(\"id\")\n        if !$subject_id {\n            warning \"Subject of voting is not found\"\n        }\n\n        $voting_name = $voting_map[\"voting.name\"]\n        $voting_type = Int($voting_map[\"voting.type\"]) //system or custom\n        $quorum = Int($voting_map[\"voting.quorum\"])\n        $type_decision = Int($voting_map[\"voting.type_decision\"])\n        $optional_role_id = Int($voting_map[\"optional.role_id\"])\n        $number_role_vacancies = Int($voting_map[\"optional.role_vacancies\"])\n        $number_voters = Int($voting_map[\"progress.number_voters\"]) // already voted\n        $contract_accept = $voting_map[\"optional.contract_accept\"]\n        $contract_reject = $voting_map[\"optional.contract_reject\"]\n        $param_accept = $voting_map[\"optional.contract_accept_params\"]\n        $param_reject = $voting_map[\"optional.contract_reject_params\"]\n        $flag_success = $voting_map[\"flags.success\"]\n    }\n\n    action {\n        // if notifications have been sent, then close it\n        var notes array\n        notes = DBFind(\"notifications\").Where(\"page_name='voting_view' and page_params::jsonb->voting_id=? and closed=0\", $votingID)\n        var i int\n        while i < Len(notes) {\n            var note map\n            note = notes[i]\n            Notifications_Single_Close(\"notific_id\", Int(note[\"id\"]))\n            i = i + 1\n        }\n\n        var percent_voters, flag_decision int\n        flag_decision = -2 // decision can not be made (not enough participants to make a decision)\n        if $flag_success == 1 { //now enough participants to make a decision\n\n            if $type_decision == 1 || $type_decision == 2 {\n                var candidates_added_count int\n                candidates_added_count = 0 // candidates who have already been added\n                flag_decision = -1 // none of the candidates has been added yet\n\n                var subjects array\n                subjects = DBFind(\"votings_subject\").Columns(\"voting_id,number_accept,subject->member_id,subject->member_name,subject->image_id\").Where(\"voting_id=$\", $votingID).Order(\"number_accept DESC\")\n                i = 0\n                while i < Len(subjects) {\n                    var subject map\n                    subject = subjects[i]\n\n                    // if there are still vacancies\n                    if candidates_added_count < $number_role_vacancies {\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n\n                        if percent_voters >= $quorum {\n                            // added candidate to the role\n                            var role map\n                            role = DBFind(\"roles\").Columns(\"id,role_type,role_name,image_id\").Where(\"id=$\", $optional_role_id).Row()\n                            if role {\n                                var member, assignedMember map\n                                member[\"member_id\"] = subject[\"subject.member_id\"]\n                                assignedMember = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=? and deleted=0\", member[\"member_id\"], role[\"id\"]).Row()\n\n                                if !assignedMember {\n                                    member[\"member_name\"] = subject[\"subject.member_name\"]\n                                    member[\"image_id\"] = subject[\"subject.image_id\"]\n\n                                    var rolePart map\n                                    rolePart[\"id\"] = role[\"id\"]\n                                    rolePart[\"type\"] = role[\"role_type\"]\n                                    rolePart[\"name\"] = role[\"role_name\"]\n                                    rolePart[\"image_id\"] = role[\"image_id\"]\n\n                                    var appointed map\n                                    appointed[\"voting_id\"] = $votingID\n                                    appointed[\"voting_name\"] = $voting_name\n\n                                    // add a candidate to the role\n                                    DBInsert(\"roles_participants\", \"role,member,appointed,timestamp date_created\", rolePart, member, appointed, $block_time)\n\n                                    candidates_added_count = candidates_added_count + 1\n                                    // if at least one of the candidates was added to the role, then the voting decision is considered successful\n                                    flag_decision = 1\n                                }\n                            }\n                        }\n                    }\n                    i = i + 1\n                }\n            }\n\n            if $type_decision == 3 {\n                var subject map\n                subject = DBFind(\"votings_subject\").Columns(\"id,number_accept\").Where(\"voting_id=$\", $votingID).Row()\n                if subject {\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n                    if percent_voters >= $quorum {\n                        flag_decision = 1 // accepted\n                    } else {\n                        flag_decision = -1 // rejected\n                    }\n                }\n            }\n\n            if $type_decision == 4 {\n                var subject map\n                subject = DBFind(\"votings_subject\").Columns(\"id,number_accept,subject->table,subject->table_id,subject->column,subject->column_value\").Where(\"voting_id=$\", $votingID).Row()\n                if subject {\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n                    if percent_voters >= $quorum {\n                        flag_decision = 1 // accepted\n\n                        var column string\n                        column = Str(subject[\"subject.column\"])\n                        $colValue = Str(subject[\"subject.column_value\"])\n                        // type of voting - custom\n                        if $voting_type == 1 {\n                            // ALWAYS CHECK THE PERMISSION\n                            var colType string\n                            colType = GetColumnType(subject[\"subject.table\"], column)\n                            if colType == \"number\"{\n                                $colValue = Int($colValue)\n                            }\n                            if colType == \"money\"{\n                                $colValue = Money($colValue)\n                            }\n                            if colType == \"double\" {\n                                $colValue = Float($colValue)\n                            }\n                            DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), column, $colValue)\n                        }\n\n                        // type of voting - system\n                        if $voting_type == 2 {\n                            DBUpdateSysParam(column, $colValue, \"\")\n                        }\n                    } else {\n                        flag_decision = -1 // rejected\n                    }\n                }\n            }\n\n            if $type_decision == 5 {\n                var subject map\n                subject = DBFind(\"votings_subject\").Columns(\"id,number_accept,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Where(\"voting_id=$\", $votingID).Row()\n                if subject {\n                    $contract_accept = subject[\"subject.contract_accept\"]\n                    $contract_reject = subject[\"subject.contract_reject\"]\n                    $param_accept = subject[\"subject.contract_accept_params\"]\n                    $param_reject = subject[\"subject.contract_reject_params\"]\n\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n                    if percent_voters >= $quorum {\n                        flag_decision = 1 // accepted\n                    } else {\n                        flag_decision = -1 // rejected\n                    }\n                }\n            }\n\n            if flag_decision == 1 {\n                runContract($contract_accept, $param_accept)\n            } else {\n                runContract($contract_reject, $param_reject)\n            }\n        }\n\n        var voting, flags map\n        voting = DBFind(\"votings\").Columns(\"flags\").Where(\"id=?\", $votingID).Row()\n        flags = JSONToMap(voting[\"flags\"])\n        flags[\"decision\"] = flag_decision\n        DBUpdate(\"votings\", $votingID, \"flags\", flags)\n        // DBUpdate(\"votings\", $votingID, \"flags->decision\", flag_decision)\n    }\n}",
            "Name": "voting_CheckDecision"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_UpdateDataForGraphs {\n    data {\n        votingID int\n    }\n    \n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n  \n    func percentPartOfTotal(part, total int) int {\n        if total == 0{ total = 1 }\n        var percent int\n        percent = Int((part * 100)/total)\n        if percent > 100 { percent = 100 }\n        return percent\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"flags,voting,progress\").Where(\"id=?\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting is not found\"\n        }\n    }\n    \n    action {\n        var progress, voting, flags map\n        progress = safeJsonToMap($voting_map[\"progress\"])\n        voting = safeJsonToMap($voting_map[\"voting\"])\n        flags = safeJsonToMap($voting_map[\"flags\"])\n        \n        var flag_success, percent_success, percent_voters, number_voters, quorum int\n        // increment count of voters\n        quorum = Int(voting[\"quorum\"])\n        number_voters = Int(progress[\"number_voters\"]) + 1\n        percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\n        percent_success = percentPartOfTotal(percent_voters, Int(voting[\"volume\"]))\n        \n        // update the flag of success\n        if percent_success == 100 {\n            flag_success = 1\n        }\n        progress[\"percent_voters\"] = percent_voters\n        progress[\"percent_success\"] = percent_success\n        progress[\"number_voters\"] = number_voters\n        flags[\"success\"] = flag_success\n        \n        DBUpdate(\"votings\", $votingID, \"progress,flags\", progress, flags)\n        \n        if (percent_voters >= quorum && quorum > 50) || percent_voters == 100 {\n            // if a quorum is more than 50% we can immediately make the decision\n            // OR\n            // if all participants have voted we can not wait until the end of the voting period\n            \n            voting_CheckDecision(\"votingID\", $votingID)\n        }\n    }\n}",
            "Name": "voting_UpdateDataForGraphs"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_AcceptCandidates {\n    data {\n        votingID int\n        candidateID int\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,flags\").Where(\"id=?\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting is not found\"\n        }\n        \n        $subject_map = DBFind(\"votings_subject\").Where(\"voting_id=$ and subject->member_id=$\", $votingID, $candidateID).Row()\n        if !$subject_map {\n            warning \"Subject of voting is not found\"\n        }\n        \n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\n        if !$participant_id {\n            warning \"You are not a participant in this voting\"\n        }\n    }\n    \n    action {\n        var flags map\n        flags = JSONToMap($voting_map[\"flags\"])\n        // if notifications have been sent, then close it\n        if flags[\"notifics\"] == 1 {\n            \n            $notific_id = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name=$ and page_params->voting_id=$ and closed=$\", $key_id, \"voting_view\", $votingID, 0).One(\"id\")\n            \n            if $notific_id {\n                Notifications_Single_Close(\"notific_id\", Int($notific_id))\n            }\n        }\n        \n        // check the decision\n        if flags[\"decision\"] == 1 {\n            warning \"Decision was taken. Voting is now not possible\"\n        }\n        \n        // check start-end of voting time\n        var voting_start, voting_end string\n        voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\n        voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\n        if !voting_start {\n            warning \"Voting has not yet begun. Try again later, please\"\n        }\n        if !voting_end {\n            warning \"Voting has expired. Voting is now not possible\"\n        }\n        \n        //-----------------------------------------------------------------------------------------------\n        \n        // write the result of the voting\n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, $candidateID)\n        \n        // increment count of accept\n        DBUpdate(\"votings_subject\", Int($subject_map[\"id\"]), \"+number_accept\", 1)\n        \n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\n    }\n}",
            "Name": "voting_AcceptCandidates"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_Invite {\n    data {\n        votingID int\n        var_id int //0, member_id, role_id\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    func addVotingMember(fullMember map, votingId int) {\n        var member map\n        member[\"member_id\"] = fullMember[\"id\"]\n        member[\"member_name\"] = fullMember[\"member_name\"]\n        member[\"image_id\"] = fullMember[\"image_id\"]\n        DBInsert(\"votings_participants\", \"voting_id,member\", votingId, member)\n    }\n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended\").Where(\"id=$ and date_ended > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting has expired. Can not add new participants\"\n        }\n        \n        $type_participants = $voting_map[\"voting.type_participants\"]\n        $type_voting = $voting_map[\"voting.type\"]\n        $number_participants = Int($voting_map[\"progress.number_participants\"])\n        \n        if $number_participants > 1 && $type_voting == 2 {\n            warning \"This vote is a system. Add new participants are not possible\"\n        }\n        var isAdded string\n        if $type_participants == 2 { \n            isAdded = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $var_id).One(\"id\")\n            if isAdded {\n                warning \"Member has already been added before\"\n            }\n        }\n        \n        if $type_participants == 3 { \n            isAdded = DBFind(\"votings_participants\").Where(\"voting_id=$\", $votingID).One(\"id\")\n            if isAdded {\n                warning \"Voting participants have already been added before\"\n            }\n        }\n    }\n    \n    action {\n        var i int\n        if $type_participants == 1 { // everybody\n            var members array\n            members = DBFind(\"members\")\n            i=0\n            while i < Len(members) {\n                addVotingMember(members[i], $votingID)\n                $number_participants = $number_participants + 1\n                i = i + 1\n            }\n        }\n        \n        if $type_participants == 2 { // manual\n            var member map\n            member = DBFind(\"members\").Where(\"id=?\", $var_id).Row()\n            if member {\n                addVotingMember(member, $votingID)\n                $number_participants = $number_participants + 1\n            }\n        }\n        \n        if $type_participants == 3 { // role\n            var roles array\n            roles = DBFind(\"roles_participants\").Where(\"role->id=$ and deleted=0\", $var_id).Order(\"id\")\n            i=0\n            while i < Len(roles) {\n                var role map\n                role = roles[i]\n                DBInsert(\"votings_participants\", \"voting_id,member\", $votingID, role[\"member\"])\n                $number_participants = $number_participants + 1\n                i = i + 1\n            }\n        }\n        \n        var progress map\n        progress = safeJsonToMap($voting_map[\"progress\"])\n        progress[\"number_participants\"] = $number_participants\n        DBUpdate(\"votings\", $votingID, \"progress\", progress)\n    }\n}",
            "Name": "voting_Invite"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_Delete {\n    data {\n        votingID int\n    }\n\n    conditions {\n        var voting map\n        $voting_map = DBFind(\"votings\").Columns(\"creator->member_id,date_started,id\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting already started. Delete voting impossible\"\n        }\n\n        if $voting_map[\"creator.member_id\"] != $key_id {\n            warning \"You are not the creator of the voting\"\n        }\n    }\n\n    action {\n        DBUpdate(\"votings\", $votingID, \"deleted\", 1)\n    }\n}",
            "Name": "voting_Delete"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_CreateNew {\n    data {\n        voting_name string\n        voting_type int\n        type_participants int\n        type_decision int\n        \n        volume int\n        quorum int\n        \n        now_date string \"date\"\n        start_time string \"date\"\n        start_date string \"date\"\n        end_date string \"date\"\n        end_time string \"date\"\n        \n        description string \"optional\"\n    }\n    \n    func conditions {\n        $date_started = $start_date + \" \" + $start_time\n        $date_ended = $end_date + \" \" + $end_time\n        var m string\n        \n        if $now_date >= $date_started {\n            m = Sprintf(\"Voting start date [%v] is less than the current date [%v]\", $date_started, $now_date)\n            warning m\n        }\n        \n        if $date_started >= $date_ended {\n            m = Sprintf(\"Voting end date [%v] is less than the start date [%v]\", $date_ended, $date_started)\n            warning m\n        }\n        \n        if ($volume < 50) || ($volume > 100) {\n            m = Sprintf(\"Volume [%v] should be in the range from 50 to 100\", $volume)\n            warning m\n        }\n        \n        if ($quorum < 5) || ($quorum > 100) {\n            m = Sprintf(\"Quorum [%v] should be in the range from 5 to 100\", $quorum)\n            warning m\n        }\n        \n        $member_map = DBFind(\"members\").Where(\"id=$\", $key_id).Row()\n        if !$member_map {\n            warning \"You are not a member of the ecosystem\"\n        }\n    }\n    \n    func action {\n        var voting map\n        voting[\"name\"] = $voting_name\n        voting[\"type\"] = $voting_type\n        voting[\"description\"] = $description\n        voting[\"type_participants\"] = $type_participants\n        voting[\"type_decision\"] = $type_decision\n        voting[\"volume\"] = $volume\n        voting[\"quorum\"] = $quorum\n        \n        var progress map\n        progress[\"number_participants\"] = \"0\"\n        progress[\"number_voters\"] = \"0\"\n        progress[\"percent_success\"] = \"0\"\n        progress[\"percent_voters\"] = \"0\"\n        \n        var flags map\n        flags[\"success\"] = \"0\"\n        flags[\"decision\"] = \"0\"\n        flags[\"full_data\"] = \"0\"\n        flags[\"notifics\"] = \"0\"\n        \n        var creator map\n        creator[\"member_id\"] = $member_map[\"id\"]\n        creator[\"member_name\"] = $member_map[\"member_name\"]\n        creator[\"image_id\"] = $member_map[\"image_id\"]\n        \n        var votingId int\n        votingId = DBInsert(\"votings\", \"voting,progress,flags,creator,date_started,date_ended\", voting, progress, flags, creator, $date_started, $date_ended)\n        \n        // if all members are voting participants\n        if $type_participants == 1 {\n            voting_Invite(\"votingID,var_id\", votingId, 0)\n        }\n        $result = votingId\n    }\n}",
            "Name": "voting_CreateNew"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_AcceptDecision {\n    data {\n        votingID int\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,flags->decision,flags->notifics\").Where(\"id=?\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting is not found\"\n        }\n        \n        $subject_map = DBFind(\"votings_subject\").Where(\"voting_id=$\", $votingID).Row()\n        if !$subject_map {\n            warning \"Subject of voting is not found\"\n        }\n        \n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\n        if !$participant_id {\n            warning \"You are not a participant in this voting\"\n        }\n    }\n    \n    action {\n        // if notifications have been sent, then close it\n        if $voting_map[\"flags.notifics\"] == 1 {\n            var noteId string\n            noteId = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name=$ and page_params->voting_id=$ and closed=$\", $key_id, \"voting_view\", $votingID, 0).One(\"id\")\n            if noteId {\n                Notifications_Single_Close(\"notific_id\", Int(noteId))\n            }\n        }\n        \n        // check the decision\n        if $voting_map[\"flags.decision\"] == 1 {\n            warning \"Decision was taken. Voting is now not possible\"\n        }\n        \n        // check start-end of voting time\n        var voting_start, voting_end string\n        voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\n        voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\n        if !voting_start {\n            warning \"Voting has not yet begun. Try again later, please\"\n        }\n        if !voting_end {\n            warning \"Voting has expired. Voting is now not possible\"\n        }\n                \n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, 1)\n        \n        // increment count of accept\n        DBUpdate(\"votings_subject\", Int($subject_map[\"id\"]), \"+number_accept\", 1)\n        \n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\n    }\n}",
            "Name": "voting_AcceptDecision"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SendNotifics {\n    data {\n        votingID int\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,date_ended\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\n        if !$voting_map {\n            warning \"Voting has expired. Notifications can not be sent\"\n        }\n        \n        $voting_map = DBFind(\"votings\").Columns(\"voting->name,creator->member_id,flags->notifics,flags,date_started\").Where(\"id=$ and date_started < now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting has not yet begun. Try again later, please\"\n        }\n        if $voting_map[\"creator.member_id\"] != $key_id {\n            warning \"You are not the creator of the voting\"\n        }\n        if $voting_map[\"flags.notifics\"] == 1 {\n            warning \"Notifications have already been sent\"\n        }\n        \n        $voting_name = $voting_map[\"voting.name\"]\n    }\n    \n    action {\n        var participants array\n        participants = DBFind(\"votings_participants\").Where(\"voting_id=$ and decision=$\", $votingID, 0)\n        var i int\n        while i < Len(participants) {\n            var participant, member, params map\n            participant = participants[i]\n            member = safeJsonToMap(participant[\"member\"])\n            params[\"voting_id\"] = $votingID\n            Notifications_Single_Send_map(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", Int(member[\"member_id\"]), 1, \"fa-check\", \"Voting\", $voting_name, \"voting_view\", params)\n            \n            i = i + 1\n        }\n        \n        var flags map\n        flags = safeJsonToMap($voting_map[\"flags\"])\n        flags[\"notifics\"] = 1\n        DBUpdate(\"votings\", $votingID, \"flags\", flags)\n    }\n}",
            "Name": "voting_SendNotifics"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectCandidates {\n    data {\n        votingID int\n        memberID int\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,date_started,optional,voting->type,flags->full_data\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting already started. Can not edit document\"\n        }\n        \n        if $voting_map[\"flags.full_data\"] == 1 && $voting_map[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n        \n        if $memberID == 0 {\n            $memberID = $key_id\n        }\n        \n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id=$ and subject->member_id=$\", $votingID, $memberID).One(\"id\")\n        if $subject_id {\n            warning \"This candidature for this role has already been added before\"\n        }\n        \n        $member_map = DBFind(\"members\").Where(\"id = $\", $memberID).Row()\n        if !$member_map {\n            warning \"Member not found\"\n        }\n    }\n    \n    action {\n        \n        var subject map\n        subject[\"member_id\"] = $member_map[\"id\"]\n        subject[\"member_name\"] = $member_map[\"member_name\"]\n        subject[\"image_id\"] = $member_map[\"image_id\"]\n        \n        DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\n        \n        var optional map\n        optional = safeJsonToMap($voting_map[\"optional\"])\n        \n        var number_candidates int\n        if optional[\"number_candidates\"]{\n            number_candidates = Int(optional[\"number_candidates\"])\n            number_candidates = number_candidates + 1\n        } else {\n            number_candidates = 1\n        }\n        \n        optional[\"number_candidates\"] = number_candidates\n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\n        \n        //voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Name": "voting_SubjectCandidates"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectCheckFulldata {\n    data {\n        votingID int\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,optional,voting->type,voting->type_decision,flags\").Where(\"id=?\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting is not found\"\n        }\n        \n        $type_decision = $voting_map[\"voting.type_decision\"]\n        if $type_decision < 1 || $type_decision > 5 {\n            warning \"invalid type of decision\"\n        }\n        \n        $subject_map = DBFind(\"votings_subject\").Where(\"voting_id=?\", $votingID).Row()\n        if !$subject_map {\n            warning \"Subject of voting is not found\"\n        }\n    }\n    \n    action {\n        var flags, subject map\n        flags = safeJsonToMap($voting_map[\"flags\"])\n        if $type_decision > 2 && $type_decision <= 5 {\n            subject = safeJsonToMap($subject_map[\"subject\"])\n        }\n        \n        var fullData string\n        \n        if $type_decision == 1 || $type_decision == 2 {\n            var optional map\n            optional = safeJsonToMap($voting_map[\"optional\"])\n            \n            if optional[\"number_candidates\"] > 0 && optional[\"role_vacancies\"] > 0 && optional[\"role_id\"] > 0 {\n                fullData = 1\n            }\n        }\n        \n        if $type_decision == 3 {\n            if subject[\"text\"] != \"\" && subject[\"hash\"] != \"\" {\n                fullData = 1\n            }\n        }\n        \n        if $type_decision == 4 {\n            if $voting_map[\"voting.type\"] == 1{ // personal\n                if subject[\"table\"] != \"\" && subject[\"table_id\"] != \"\" && subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\n                    fullData = 1\n                }\n            }\n            if $voting_map[\"voting.type\"] == 2 { // system\n                if subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\n                    fullData = 1\n                }\n            }\n        }\n        \n        if $type_decision == 5 {\n            if subject[\"contract_accept\"] != \"\" && subject[\"contract_reject\"] != \"\" {\n                fullData = 1\n            }\n        }\n        \n        if fullData == 1 {\n            flags[\"full_data\"] = 1\n            DBUpdate(\"votings\", $votingID, \"flags\", flags)\n        }\n    }\n}",
            "Name": "voting_SubjectCheckFulldata"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectContract {\n    data {\n        votingID int\n        \n        contract_accept string\n        contract_accept_params string \"optional\"\n        \n        contract_reject string\n        contract_reject_params string \"optional\"\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,date_started,voting->type,flags->full_data\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting already started. Can not edit document\"\n        }\n        \n        if $voting_map[\"flags.full_data\"] == 1 && $voting_map[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n    }\n    \n    action {\n        var accept_params, reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n\n        var subject map\n        subject[\"contract_accept\"] = $contract_accept\n        subject[\"contract_accept_params\"] = accept_params\n        subject[\"contract_reject\"] = $contract_reject\n        subject[\"contract_reject_params\"] = reject_params\n        \n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n        if !$subject_id {\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\n        } else {\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\n        }\n        \n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Name": "voting_SubjectContract"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectDocument {\n    data {\n        votingID int\n        text_document string\n        \n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n    }\n    \n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,date_started,flags->full_data,voting->type,optional\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting already started. Can not edit document\"\n        }\n        \n        if $voting_map[\"flags.full_data\"] == 1 && $voting_map[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n    }\n    \n    action {\n        var subject map\n        subject[\"text\"] = $text_document\n        subject[\"hash\"] = Sha256($text_document)\n        \n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n        if !$subject_id {\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\n        } else {\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\n        }\n        var accept_params, reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n\n        var optional map\n        optional = safeJsonToMap($voting_map[\"optional\"])\n        \n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = accept_params\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = reject_params\n        \n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\n        \n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Name": "voting_SubjectDocument"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectFormal {\n    data {\n        votingID int\n        \n        description string \"optional\"\n        table_to_written string\n        row_id string\n        column_name string\n        written_value string\n        \n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n    }\n    \n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,date_started,flags->full_data,voting->type,optional\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting already started. Can not edit document\"\n        }\n        \n        if $voting_map[\"flags.full_data\"] == 1 && $voting_map[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n    }\n    \n    action {\n        var subject map\n        subject[\"description\"] = $description\n        subject[\"table\"] = $table_to_written\n        subject[\"table_id\"] = $row_id\n        subject[\"column\"] = $column_name\n        subject[\"column_value\"] = $written_value\n        \n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n        if !$subject_id {\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\n        } else {\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\n        }\n        \n        var accept_params, reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n        \n        var optional map\n        optional = safeJsonToMap($voting_map[\"optional\"])\n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = accept_params\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = reject_params\n        \n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\n        \n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Name": "voting_SubjectFormal"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectSettings {\n    data {\n        votingID int\n        \n        roleID int\n        vacancies int\n        \n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        if $vacancies < 1 {\n            warning \"Number of vacancies can not be less than 1\"\n        }\n        \n        $voting_map = DBFind(\"votings\").Columns(\"optional,voting->type,flags->full_data\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        \n        if !$voting_map {\n            warning \"Voting already started. Can not edit document\"\n        }\n        \n        if $voting_map[\"flags.full_data\"] == 1 && $voting_map[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n        var role map\n        role = DBFind(\"roles\").Where(\"id=? and deleted=0\", $roleID).Row()\n        if !role {\n            warning \"Specified role not found\"\n        }\n        \n        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role\n        if !(role[\"role_type\"] == 2 || role[\"role_type\"] == 3) {\n            warning \"The chosen role is not elective or has been removed\"\n        }\n    }\n    \n    action {\n        var optional map\n        optional = safeJsonToMap($voting_map[\"optional\"])\n        \n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = safeJsonToMap($contract_accept_params)\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = safeJsonToMap($contract_reject_params)\n        optional[\"role_id\"] = $roleID\n        optional[\"role_vacancies\"] = $vacancies\n        \n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\n        \n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Name": "voting_SubjectSettings"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_RejectDecision {\n    data {\n        votingID int\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"flags->decision,flags->notifics\").Where(\"id=$\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting is not found\"\n        }\n        \n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\n        if !$participant_id {\n            warning \"You are not a participant in this voting\"\n        }\n    }\n    \n    action {\n        if $voting_map[\"flags.notifics\"] == 1 {\n            // close sent notifications\n            var notific_id string\n            notific_id = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name='voting_view' and page_params->voting_id=$ and closed=0\", $key_id, $votingID).One(\"id\")\n            if notific_id {\n                Notifications_Single_Close(\"notific_id\", Int(notific_id))\n            }\n        }\n        \n        if $voting_map[\"flags.decision\"] == 1 {\n            warning \"Decision was taken. Voting is now not possible\"\n        }\n        var voting_start, voting_end string\n        voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\n        voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\n        if !voting_start {\n            warning \"Voting has not yet begun. Try again later, please\"\n        }\n        if !voting_end {\n            warning \"Voting has expired. Voting is now not possible\"\n        }\n        \n        \n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, -1)\n        \n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\n    }\n}",
            "Name": "voting_RejectDecision"
        }
    ],
    "data": [],
    "languages": [],
    "menus": [
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$profile$, Page:profile_view, Icon:\"fa icon-user\")\nMenuItem(Title:$membership$, Page:members_list, Icon:\"fa icon-people\")\nMenuGroup(Title:$notifications$, Icon:\"fa fa-bell-o\"){\n    MenuItem(Title:$single_notifics$, Page:notifications_single, Icon:\"fa fa-bell-o\")\n    MenuItem(Title:$role_notifics$, Page:notifications_roles, Icon:\"fa fa-bullhorn\")\n    MenuItem(Title:$test_page$, Page:notifications_testpage, Icon:\"icon-settings\")\n}\nMenuItem(Title:$roles$, Page:roles_list, Icon:\"fa fa-list-ul\")\nMenuItem(Title: $catalog_ecosystems$, Page: catalog_ecosystems, Icon:\"fa fa-book\")\nMenuGroup(Title:$admin$, Icon:\"fa icon-settings\"){\n\tMenuItem(Title:$tokens_transfer$, Page:money_transfer, Icon:\"icon-energy\")\n\tMenuItem(Title:$new_ecosystem$, Page:ecosystem_new, Icon:\"icon-globe\")\n}\nMenuGroup(Title:$voting$, Icon:\"fa fa-edit\"){\n    MenuItem(Title:$voting$, Page:voting_list, Icon:\"fa fa-edit\")\n}",
            "Name": "default_menu"
        }
    ],
    "pages": [
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\nDiv(content-wrapper){\n    SetTitle($catalog_ecosystems$)\n    AddToolButton(Title: $add$, Page: catalog_ecosystems_add, Icon: icon-plus)\n\n    If(#param_flag_free#==0){\n        SetVar(Name: v_where, Value: \"deleted=0\")\n    }.ElseIf(#param_flag_free#==1){\n        SetVar(Name: v_where, Value: \"deleted=0 and flag_free=1\")\n    }.ElseIf(#param_flag_free#==2){\n        SetVar(Name: v_where, Value: \"deleted=0 and flag_free=2\")\n    }.Else{\n        SetVar(Name: v_where, Value: \"deleted=0\")\n        SetVar(Name: param_flag_free, Value: 0)\n    }\n    \n    Div(row){\n        Div(col-md-12 text-left){\n            Div(btn-group){\n                If(#param_flag_free#==0){\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems, PageParams: \"param_flag_free=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems, PageParams: \"param_flag_free=0\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#param_flag_free#==1){\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=1\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#param_flag_free#==2){\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=2\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=2\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n            }\n        }\n    }\n\n\tForm(panel panel-primary){\n\t\tDiv(panel-body){\n\t\t\tDBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_number,ecosystem_name,ecosystem_type,image_id,flag_free\").Where(#v_where#).Custom(custom_logo){\n\t\t\t\tDBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#image_id#\").Vars(img)\n\t\t\t\tImage(Src: \"#img_data#\").Style(width:100px;)\n\t\t\t}.Custom(custom_name){\n\t\t\t\tLinkPage(Page: catalog_ecosystems_view, PageParams: \"v_id=#id#\"){\n\t\t\t\t\tSpan(Class: h5 text-bold, Body: #ecosystem_name#)\n\t\t\t\t}\n\t\t\t}.Custom(custom_type){\n\t\t\t\tSpan(AppParam(App:#app_id#, Name: catalog_ecosystems_type, Index: #ecosystem_type#))\n\t\t\t}.Custom(custom_free){\n\t\t\t\tSpan(AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Index: #flag_free#))\n\t\t\t}.Custom(custom_ecosystem){\n\t\t\t\tSpan(Class: h5, Body: #ecosystem_number#)\n\t\t\t}.Order(\"ecosystem_number\")\n\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12){\n\t\t\t\t\tTable(Source: src_catalog, Columns:\"$ecosystem_number$=custom_ecosystem,$logo$=custom_logo,$name$=custom_name,$type$=custom_type,$freetype$=custom_free\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
            "Name": "catalog_ecosystems",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name: ecosystems, Source: src_num)\nDBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\nAppParam(App:#app_id#, Name: catalog_ecosystems_type, Source: src_type)\nAppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Source: src_freetype)\nData(section1, \"name,type,res,req,src\"){\n    Ecosystem_number,select_validate,ecosystem,*,src_num\n    Logo,image,catalog_ecosystems_logo,*,\n    Ecosystem_name,input,catalog_ecosystems_name,*,\n    Ecosystem_type,select,catalog_ecosystems_type,*,src_type\n}\nData(section2, \"name,type,res,req,src\"){\n    Flag_free,radio,catalog_ecosystems_freetype,*,src_freetype\n}\nData(section3, \"name,type,res,req,src\"){\n    Description,textarea,catalog_ecosystems_description,*,\n    Conditions,textarea,catalog_ecosystems_conditions,*,\n}\nData(section4, \"name,type,res,req,src\"){\n    Vde_page,input,vde_page,,\n    Vde_form_address,input,vde_form_desc,,\n}\nData(section5, \"name,type,res,req,src\"){\n    Web_page,input,web_page,,\n    Web_form_address,input,web_form_desc,,\n}\nData(section6, \"name,type,res,req,src\"){\n    Email,input,catalog_ecosystems_contact_email,,\n    Phone,input,catalog_ecosystems_contact_phone,,\n}\nData(sections, \"section_name\"){\n    section1\n    section2\n    section3\n    section4\n    section5\n    section6\n}\nDiv(content-wrapper){\n    \n    SetTitle($catalog_ecosystems_form$)\n    Div(breadcrumb){\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $catalog_ecosystems_form$)\n    }\n    \n    Div(row){\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    ForList(sections){\n                        Div(list-group-item){\n                            ForList(#section_name#){\n                                Div(row){\n                                    Div(col-md-5 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(#res#))\n                                            If(#req#==*){\n                                                Span(Class: text-danger, Body:*)\n                                            }\n                                        }\n                                    }\n                                    Div(col-md-7 mb-sm text-left){\n                                        If(#type#==select_validate){\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id).Validate(required)\n                                            InputErr(Name: #name#, required: need)\n                                        }\n                                        If(#type#==select){\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\n                                        }\n                                        If(#type#==image){\n                                            ImageInput(Name: #name#, Width: 300, Ratio: 2/1)\n                                        }\n                                        If(#type#==input){\n                                            Input(Name: #name#)\n                                        }\n                                        If(#type#==textarea){\n                                            Input(Name: #name#, Type:textarea)\n                                        }\n                                        If(#type#==radio){\n                                            RadioGroup(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems)\n                    Button(Contract: catalog_ecosystems_Add, Class: btn btn-primary, Page: catalog_ecosystems, Body: $send$)\n                }\n            }\n        }\n    }\n}",
            "Name": "catalog_ecosystems_add",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"ecosystem_name,ecosystem_number\").Where(\"id=#v_id#\").Vars(prefix)\n    \n    SetTitle($request_membership$)\n    Div(breadcrumb){\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        LinkPage(#prefix_ecosystem_name#, catalog_ecosystems_view,, \"v_id=#v_id#\")\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $request_membership$)\n    }\n    \n    Div(row){\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(request_membership)}\n                Form(panel-body){\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: pub_key){\n                                    Span(Body: LangRes(pub_key))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 text-left){\n                                Input(Class: form-control, Type: text, Name: pub_key)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: comment){\n                                    Span(Body: LangRes(comment))\n                                }\n                            }\n                            Div(col-md-9 text-left){\n                                Input(Name: comment, Class: form-control, Type: textarea, Value: no)\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems_view, PageParams: \"v_id=#v_id#\")\n                        Button(Body: LangRes(send), Class: btn btn-primary, Contract: catalog_ecosystems_Request, Params: \"ecosystem_num=#prefix_ecosystem_number#\", Page: catalog_ecosystems_view, PageParams: \"v_id=#v_id#\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "catalog_ecosystems_request",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_name,ecosystem_type,ecosystem_number,image_id,flag_free,ecosystem_info->email,ecosystem_info->phone,ecosystem_info->description,ecosystem_info->conditions,url_address->vde_form_address,url_address->web_page,url_address->vde_page,url_address->web_form_address\").Where(\"id=#v_id#\").Vars(prefix)\n    \n    SetTitle($catalog_ecosystems_number$: #prefix_ecosystem_name#)\n    Div(breadcrumb){\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #prefix_ecosystem_name#)\n    }\n    \n    Div(row){\n        Div(col-md-10 col-md-offset-1){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    Span(Class: text-bold h3, Body: #prefix_ecosystem_name# (##prefix_ecosystem_number#))\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-12 mt-sm text-center){\n                                If(#prefix_image_id# > 0){\n                                    DBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#prefix_image_id#\").Vars(img)\n                                    Image(Src: \"#img_data#\").Style(width: 300px;)\n                                }\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(type)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_type, Index: #prefix_ecosystem_type#))\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(catalog_ecosystems_description)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_description#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(catalog_ecosystems_freetype)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Index: #prefix_flag_free#))\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(catalog_ecosystems_conditions)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_conditions#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_form_desc))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_form_address#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_page))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_page#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(web_form_desc))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_form_address#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(web_page))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_page#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_email))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_email#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_phone))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_phone#)\n                            }\n                        }\n                    }\n                }\n                DBFind(Name: keys, Source: src_keys).Where(\"id = #key_id#\").Vars(key)\n                If(#key_amount# > 0){\n                    DBFind(Name: membership_requests, Source: src_membership).Ecosystem(\"#prefix_ecosystem_number#\").Where(\"member_id = #key_id#\").Vars(request)\n                    If(#request_id#>0){\n                        Div(row form-group){\n                            Div(col-md-12 mt-sm text-center){\n                                If(#request_status# == 0){\n                                    Em(Class: fa fa-question-circle fa-5x text-warning)\n                                    Div(text-center h4 text-bold text-warning, Body: LangRes(request_wating))\n                                }\n                                If(#request_status# == 1){\n                                    Em(Class: fa fa-check-circle fa-5x text-success)\n                                    Div(text-center h4 text-bold text-success, Body: LangRes(request_accepted))\n                                }\n                                If(#request_status# == -1){\n                                    Em(Class: fa fa-minus-circle fa-5x text-danger)\n                                    Div(text-center h4 text-bold text-danger, Body: LangRes(request_rejected))\n                                }\n                            }\n                        }\n                        \n                    }.Else{\n                        Div(row form-group){\n                            Div(col-md-12 mt-sm text-center){\n                                Em(Class: fa fa-exclamation-circle fa-5x text-primary)\n                                Div(text-center h4 text-bold text-primary, Body: LangRes(request_not_sent))\n                            }\n                        }\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(send), Class: btn btn-primary, Page: catalog_ecosystems_request, PageParams: \"v_id=#v_id#\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "catalog_ecosystems_view",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    \n    SetTitle(New Ecosystem)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: New Ecosystem)\n    }\n    \n    Div(row){\n        Div(col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4){\n            Form(panel panel-primary){\n                Div(panel-heading){New Ecosystem}\n                Div(panel-body){\n                    Div(row){\n                        Div(col-md-3 mt-sm text-right){\n                            Label(For: Name){$name$}\n                        }\n                        Div(col-md-9 mc-sm text-left){\n                            Input(Placeholder: Name of Ecosystem, Name:Name)\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(create), Class: btn btn-primary, Contract: NewEcosystem)\n                }\n            }\n        }\n    }\n}",
            "Name": "ecosystem_new",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle($membership$)\n    \n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"member_name='#v_Search#'\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"id!=0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n    \n    DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id\").Custom(custom_id){\n        Span(Class: h5, Body: #id#)\n    }.Custom(custom_member_id){\n        SetVar(Name: style_text, Value: \"text-normal\")\n        SetVar(Name: style_link, Value: \"text-primary\")\n        Span(Class: #style_text#, Body: Address(#id#))\n    }.Custom(custom_username){\n        SetVar(Name: img_id, Value: 0)\n        DBFind(Name: binaries, Source: src_binaries).Columns(\"name,app_id,id\").Where(\"id=#image_id#\").Vars(img)\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#id#\"){\n            If(#img_id#>0){\n                Image(Src: Binary(Name: #img_name#,AppID:#img_app_id#, MemberID: #key_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(#member_name#)\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                    Span(#member_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Where(#v_Where#).Order(\"member_name\")\n    \n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-1 mt-sm text-right){\n                    Label(For: Search){\n                        Span(Body: LangRes(name))\n                    }\n                }\n                Div(col-md-11){\n                    Div(input-group){\n                        Input(Name: Search, Value: #v_Search#)\n                        Div(input-group-btn){\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: members_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_member, Columns: \"$username$=custom_username,$id$=custom_id,$address$=custom_member_id\")\n                }\n            }\n            If(GetVar(isSearch) == 1){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: members_list, PageParams: \"isSearch=0\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "members_list",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(Money transfer)\nDiv(content-wrapper){\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: Money transfer)\n    }\n    Div(row){\n        Div(col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: Money transfer)\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(Recipient)\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: Recipient, Placeholder: \"xxxx-xxxx-xxxx-xxxx\")\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(Pub)\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: Pub)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(Amount)\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: Amount, Placeholder: \"0\", Value: \"50000000000000000000000\")\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Contract: \"@1MoneyTransfer\", Body: Send, Class: btn btn-primary)\n                }\n            }\n        }\n        DBFind(Name: keys, Source: src_key)\n        Div(col-md-12){\n            Div(table-responsive){\n                Table(Source: src_key)\n            }\n        }\n    }\n}",
            "Name": "money_transfer",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name: notifications, Source: notifications_members).Columns(\"id,page_name,notification->icon,notification->header,notification->body\").Where(\"closed=0 and notification->type='1' and recipient->member_id='#key_id#'\")\nForList(notifications_members){\n\tDiv(list-group-item){\n\t\tLinkPage(Page: #page_name#, PageParams: \"notific_id=#id#\"){\n\t\t\tDiv(media-box){\n\t\t\t\tDiv(pull-left){\n\t\t\t\t\tEm(Class: fa #notification.icon# fa-1x text-primary)\n\t\t\t\t}\n\t\t\t\tDiv(media-box-body clearfix){\n\t\t\t\t\tDiv(Class: m0 text-normal, Body: #notification.header#)\n\t\t\t\t\tDiv(Class: m0 text-muted h6, Body: #notification.body#)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nDBFind(Name: notifications, Source: notifications_roles).Columns(\"id,page_name,notification->icon,notification->header,notification->body,recipient->role_id\").Where(\"closed=0 and notification->type='2' and (date_start_processing is null or processing_info->member_id='#key_id#')\")\nForList(notifications_roles){\n    DBFind(Name: roles_participants, Source: src_roles).Columns(\"id\").Where(\"member->member_id='#key_id#' and role->id='#recipient.role_id#' and deleted=0\").Vars(prefix)\n    If(#prefix_id# > 0){\n\t\tDiv(list-group-item){\n\t\t\tLinkPage(Page: #page_name#, PageParams: \"notific_id=#id#\"){\n\t\t\t\tDiv(media-box){\n\t\t\t\t\tDiv(pull-left){\n\t\t\t\t\t\tEm(Class: fa #notification.icon# fa-1x text-primary)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(media-box-body clearfix){ \n\t\t\t\t\t\tDiv(Class: m0 text-normal, Body: #notification.header#)\n\t\t\t\t\t\tDiv(Class: m0 text-muted h6, Body: #notification.body#)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n}",
            "Name": "notifications",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle($role_notifics$)\n    AddToolButton(Title: $send$, Page: notifications_roles_send, Icon: icon-plus)\n    \n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"notification->type='2' and recipient->role_name='#v_Search#'\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"notification->type='2'\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n    \n    DBFind(Name: notifications, Source: src_notifications).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(custom_id){\n        If(#closed# == 0){\n            SetVar(Name: style_text, Value: \"text-normal\")\n            SetVar(Name: style_link, Value: \"text-primary\")\n        }.Else{\n            SetVar(Name: style_text, Value: \"text-muted\")\n            SetVar(Name: style_link, Value: \"text-muted\")\n        }\n        Span(Class: #style_text#, Body: #id#)\n    }.Custom(custom_recipient){\n        SetVar(Name: img_id, Value: 0)\n        DBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#recipient.image_id#\").Vars(img)\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\n            If(#img_id#>0){\n                Image(Src: \"#img_data#\").Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(#recipient.role_name#)\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\n                    Span(#recipient.role_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Custom(custom_sender){\n        If(#sender.type#==1){\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\n                Span(Body: #sender.member_name#)\n            }\n        }\n        If(#sender.type#==2){\n            LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\n                Span(Body: #sender.role_name#)\n            }\n        }\n    }.Custom(custom_icon){\n        Em(Class: fa #notification.icon# fa-2x #style_text#)\n    }.Custom(custom_page){\n        LinkPage(Class: #style_link# h5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\n            Span(Body: #page_name#)\n        }\n    }.Custom(custom_date){\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\n    }.Custom(custom_processing){\n        If(#date_start_processing# == NULL){\n            P(Class: #style_text# h6 m0, Body: $not_started$)\n        }.Else{\n            P(Class: #style_text# h6 m0, Body: $started$ #processing_info.member_name# $at$)\n            P(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n    }.Custom(custom_status){\n        If(#closed# == 0){\n            If(#date_start_processing# == NULL){\n                Span(Class: #style_text#, Body: LangRes(active))\n            }.Else{\n                Span(Class: #style_text#, Body: LangRes(processing))\n            }\n        }.Else{\n            Span(Class: #style_text#, Body: LangRes(сlosed))\n        }\n    }.Custom(actions){\n        Div(text-right){\n            If(#closed# == 0){\n                If(#date_start_processing# == NULL){\n                    Button(Body: Em(Class: fa fa-recycle), Class: btn btn-default, Contract: Notifications_Roles_Processing, Params: \"notific_id=#id#\", Page: notifications_roles).Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }.Else{\n                    Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Notifications_Roles_Close, Params: \"notific_id=#id#\", Page: notifications_roles).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }\n    }.Where(#v_Where#).Order(\"closed ASC, id ASC\")\n    \n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-1 mt-sm text-right){\n                    Label(For: Search){\n                        Span(Body: LangRes(recipient))\n                    }\n                }\n                Div(col-md-11){\n                    Div(input-group){\n                        Input(Name: Search, Value: #v_Search#)\n                        Div(input-group-btn){\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: notifications_roles, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_notifications, Columns: \"$id$=custom_id,$icon$=custom_icon,$recipient$=custom_recipient,$page_name$=custom_page,$sender$=custom_sender,$processing$=custom_processing,$sent$/$сlosed$=custom_date,$status$=custom_status,=actions\")\n                }\n            }\n            If(GetVar(isSearch) == 1){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_roles, PageParams: \"isSearch=0\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "notifications_roles",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\nDiv(content-wrapper){\n    \n    SetTitle($role_notifics$)\n    Div(breadcrumb){\n        LinkPage($role_notifics$, notifications_roles)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $send$)\n    }\n    \n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(role_notifics)}\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(recipient))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                DBFind(Name: roles, Source: source_roles).Columns(\"id,role_name\").Where(\"deleted=0\")\n                                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(closure_type))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_closure, Source: src_closure_type)\n                                Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(sender))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_sender, Source: src_sender)\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(icon))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_icon, Source: src_icon)\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(header))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(body_text))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: text_body, Value: \"Body text\")\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(page_name))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: page_name, Value: \"notifications_testpage\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: params_val, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_roles)\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_roles, Contract: Notifications_Roles_Send_str)\n                }\n            }\n        }\n    }\n}",
            "Name": "notifications_roles_send",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle($single_notifics$)\n    AddToolButton(Title: $send$, Page: notifications_single_send, Icon: icon-plus)\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"notification->type='1' and recipient->member_name='#v_Search#'\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"notification->type='1'\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n    \n    DBFind(Name: notifications, Source: src_notifications).Columns(\"id,recipient->member_id,recipient->member_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\n        If(#closed# == 0){\n            SetVar(Name: style_text, Value: \"text-normal\")\n            SetVar(Name: style_link, Value: \"text-primary\")\n        }.Else{\n            SetVar(Name: style_text, Value: \"text-muted\")\n            SetVar(Name: style_link, Value: \"text-muted\")\n        }\n        Span(Class: #style_text#, Body: #id#)\n    }.Custom(custom_recipient){\n        SetVar(Name: img_id, Value: 0)\n        DBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#recipient.image_id#\").Vars(img)\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#recipient.member_id#\"){\n            If(#img_id#>0){\n                Image(Src: \"#img_data#\", Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(#recipient.member_name#)\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                    Span(#recipient.member_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Custom(custom_sender){\n        If(#sender.type#==1){\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\n                Span(Body: #sender.member_name#)\n            }\n        }\n        If(#sender.type#==2){\n            LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\n                Span(Body: #sender.role_name#)\n            }\n        }\n    }.Custom(custom_icon){\n        Em(Class: fa #notification.icon# fa-2x #style_text#)\n    }.Custom(custom_page){\n        LinkPage(Class: #style_link# h5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\n            Span(Body: #page_name#)\n        }\n    }.Custom(custom_date){\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\n    }.Custom(custom_status){\n        If(#closed# == 0){\n            Span(Class: #style_text#, Body: LangRes(active))\n        }.Else{\n            Span(Class: #style_text#, Body: LangRes(сlosed))\n        }\n    }.Custom(actions){\n        Div(pull-right){\n            If(#closed# == 0){\n                Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Notifications_Single_Close, Params: \"notific_id=#id#\", Page: notifications_single).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n            }\n        }\n    }.Where(#v_Where#).Order(\"closed ASC, id ASC\")\n    \n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-1 mt-sm text-right){\n                    Label(For: Search){\n                        Span(Body: LangRes(recipient))\n                    }\n                }\n                Div(col-md-11){\n                    Div(input-group){\n                        Input(Name: Search, Value: #v_Search#)\n                        Div(input-group-btn){\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: notifications_single, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_notifications, Columns: \"$id$=custom_id,$icon$=custom_icon,$recipient$=custom_recipient,$page_name$=custom_page,$sender$=custom_sender,$sent$/$сlosed$=custom_date,$status$=custom_status,=actions\")\n                }\n            }\n            If(GetVar(isSearch) == 1){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_single, PageParams: \"isSearch=0\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "notifications_single",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\nDiv(content-wrapper){\n    \n    SetTitle($single_notifics$)\n    Div(breadcrumb){\n        LinkPage($single_notifics$, notifications_single)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $send$)\n    }\n    \n    Div(row){\n        Div(col-md-6 col-md-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(single_notifics)}\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(recipient)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                DBFind(Name: members, Source: source_members).Columns(\"id,member_name\")\n                                Select(Name: member_id, Source: source_members, NameColumn: member_name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(sender)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_sender, Source: src_sender)\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(icon)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_icon, Source: src_icon)\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(header)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(body_text))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: text_body, Value: \"Body text\")\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(page_name)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: page_name, Value: \"notifications_testpage\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: params_val, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_single)\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_single, Contract: Notifications_Single_Send_str)\n                }\n            }\n        }\n    }\n}",
            "Name": "notifications_single_send",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\nDiv(content-wrapper){\n    SetTitle($test_page$)\n    \n    If(#notific_id# > 0){\n        DBFind(Name: notifications, Source: src_notifications).Columns(\"id,notification->type,notification->header,page_params->param_int,page_params->param_str,date_start_processing,closed\").Where(\"id=#notific_id#\").Vars(prefix)\n        SetVar(Name: notific_type, Value: #prefix_notification_type#)\n        SetVar(Name: notific_header, Value: #prefix_notification_header#)\n        SetVar(Name: notific_val_int, Value: #prefix_page_params_param_int#)\n        SetVar(Name: notific_val_str, Value: #prefix_page_params_param_str#)\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n        SetVar(Name: notific_id, Value: \"0\")\n        SetVar(Name: notific_type, Value: \"0\")\n        SetVar(Name: notific_header, Value: \"null\")\n        SetVar(Name: notific_val_int, Value: \"null\")\n        SetVar(Name: notific_val_str, Value: \"null\")\n    }\n    \n    Div(row){\n        Div(col-md-6 col-md-offset-3){\n            Form(panel panel-default){\n                Div(panel-body){\n                    Div(list-group-item text-center){\n                        Span(Class: h3, Body: #notific_header#)\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(id))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_id#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(type))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#notific_type# > 0){\n                                    Span(Class: h4, Body: AppParam(App:#app_id#, Name: notification_type, Index: #notific_type#))\n                                }.Else{\n                                    Span(Class: h4, Body: #notific_type#)\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(value_number))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_val_int#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(value_string))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_val_str#)\n                            }\n                        }\n                    }\n                }\n                If(#notific_type# == 1){\n                    If(#prefix_closed# == 0){\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(close), Class: btn btn-primary, Contract: Notifications_Single_Close, Params: \"notific_id=#notific_id#\", Page: notifications_single).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                        }\n                    }\n                }\n                If(#notific_type# == 2){\n                    If(#prefix_closed# == 0){\n                        Div(panel-footer text-right){\n                            If(#prefix_date_start_processing# == \"\"){\n                                Button(Body: LangRes(begin), Class: btn btn-primary, Contract: Notifications_Roles_Processing, Params: \"notific_id=#notific_id#\", Page: notifications_roles).Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }.Else{\n                                Button(Body: LangRes(close), Class: btn btn-primary, Contract: Notifications_Roles_Close, Params: \"notific_id=#notific_id#\", Page: notifications_roles).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "notifications_testpage",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle($editing_profile$)\n    Div(breadcrumb){\n        LinkPage($user_info$, profile_view)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $editing_profile$)\n    }\n    \n    If(Or(#v_member_id#>0,#v_member_id#<0)){\n        DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id,member_info->information\").Where(\"id=#v_member_id#\").Vars(prefix)\n    }.Else{\n        DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id,member_info->information\").Where(\"id=#key_id#\").Vars(prefix)\n    }\n    \n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: LangRes(editing_profile))\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: member_name){\n                                    Span(Body: LangRes(member_name))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                If(GetVar(prefix_member_name)>0){\n                                    Input(Name: member_name, Value: #prefix_member_name#, Disabled: true)\n                                }.Else{\n                                    Input(Name: member_name).Validate(minLength:5, maxLength:20)\n                                    InputErr(Name: member_name, minLength: $validate_member_name$, maxLength: $validate_member_name$)\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: member_image){\n                                    Span(Body: LangRes(member_image))\n                                    If(Or(#prefix_id#>0,#prefix_id#<0)){\n                                    }.Else{\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                ImageInput(Name: member_image, Width: 100, Ratio: 1/1)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-lg text-right){\n                                Label(For: information){\n                                    Span(Body: LangRes(information))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                If(GetVar(prefix_member_info_information)){\n                                    Input(Name: information, Type: textarea, Value: #prefix_member_info_information#)\n                                }.Else{\n                                    Input(Name: information, Type: textarea)\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(save), Class: btn btn-primary, Contract: Profile_Edit, Page: members_list,).Alert(Text: $want_save_changes$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }\n    }\n}",
            "Name": "profile_edit",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle($user_info$)\n    \n    If(Or(#v_member_id#>0,#v_member_id#<0)){\n    }.Else{\n        SetVar(Name: v_member_id, Value: #key_id#)\n    }\n    DBFind(Name: members, Source: src_member).Where(\"id=#v_member_id#\").Vars(prefix)\n    DBFind(Name: keys, Source: src_keys).Where(\"id=#key_id#\").Vars(tokens)\n    \n    If(#prefix_image_id#>0){\n        DBFind(Name: binaries, Source: src_binaries).Columns(\"id,data\").Where(\"id=#prefix_image_id#\").Vars(img)\n    }\n    If(Or(#prefix_id#>0,#prefix_id#<0)){\n    }.Else{\n        SetVar(Name: prefix_member_name, Value: \"\")\n    }\n    \n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    Span(Class: h3, Body: LangRes(user_info))\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-12 mt-sm text-center){\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\n                                    If(#prefix_id# == #key_id#){\n                                        Button(Class: btn btn-link, Page: profile_edit, PageParams: \"v_member_id=#key_id#\"){\n                                            If(#img_id#>0){\n                                                Image(Src: \"#img_data#\", Class: img-circle).Style(width: 80px; border: 1px solid #5A5D63;)\n                                            }.Else{\n                                                Span(Class: fa icon-user fa-5x text-primary)\n                                            }\n                                            Div(m0 h3 text-bold){#prefix_member_name#}\n                                        }\n                                    }.Else{\n                                        If(#img_id#>0){\n                                            Image(Src: \"#img_data#\", Class: img-circle).Style(width: 80px; border: 1px solid #5A5D63;)\n                                        }.Else{\n                                            Span(Class: fa icon-user fa-5x)\n                                        }\n                                        Div(m0 h3 text-bold){#prefix_member_name#}\n                                    }\n                                }.Else{\n                                    Button(Class: btn btn-link, Page: profile_edit){\n                                        Span(Class: h3 text-bold, Body: LangRes(editing_profile))\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item text-center){\n                        Div(text-muted m0 h5, Body: LangRes(address))\n                        Span(Class: h5 text-bold, Body: Address(#prefix_id#))\n                    }\n                    Div(list-group-item text-center){\n                        Div(text-muted m0 h5, Body: LangRes(roles))\n                        DBFind(Name: roles_participants, Source: src_check).Columns(\"id\").Where(\"member->member_id='#v_member_id#' and deleted=0\").Vars(check)\n                        If(#check_id#>0){\n                            DBFind(Name: roles_participants, Source: src_roles).Columns(\"role->id,role->name\").Where(\"member->member_id='#v_member_id#' and deleted=0\").Order(\"id\")\n                            ForList(src_roles){\n                                Span(){\n                                    LinkPage(Page: roles_view, PageParams: \"v_role_id=#role.id#\"){\n                                        Span(Class: h5 text-bold, Body: \"#role.name#\")\n                                    }\n                                }.Style(margin-right: 5px; margin-left: 5px;)\n                            }\n                        }.Else{\n                            Span(LangRes(no))\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "profile_view",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\nDiv(content-wrapper){\n    \n    If(#v_role_id# > 0){\n        DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name,role_type\").Where(\"id=#v_role_id#\").Vars(prefix)\n        \n        SetTitle($assign$)\n        Div(breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#prefix_role_name#, roles_view,, \"v_role_id=#v_role_id#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $assign$)\n        }\n        \n        Div(row){\n            Div(col-md-6 col-md-offset-3){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(assign)}\n                    Div(panel-body){\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(role))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Type: hidden, Name: rid, Value: #prefix_id#)\n                                    SetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\n                                    Input(Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: true)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(type)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    SetVar(Name: var_prefix_role_type, Value: AppParam(App:#app_id#, Name: roles_types, Index: #prefix_role_type#))\n                                    Input(Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: true)\n                                    If(#prefix_role_type# != 1){\n                                        P(Class: m0 text-danger h6, Body: LangRes(appointment_impossible))\n                                    }\n                                }\n                            }\n                            If(#prefix_role_type# == 1){\n                                Div(row){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(member)).(Class: text-danger, Body:*)\n                                        }\n                                    }\n                                    Div(col-md-9 text-left){\n                                        DBFind(Name: members, Source: source_members).Columns(\"id,member_name\").Custom(custom_username){\n                                            #member_name# (Address(#id#) )\n                                        }\n                                        Select(Name: member_id, Source: source_members, NameColumn: custom_username, ValueColumn: id)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\")\n                        If(#prefix_role_type# == 1){\n                            Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: Roles_Assign, Params: \"member_id=Val(member_id)\").Alert(Text: $want_assign_member_to_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "roles_assign",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\nDiv(content-wrapper){\n\n    SetTitle($new_role$)\n    Div(breadcrumb){\n        LinkPage($roles$, roles_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $new_role$)\n    }\n\n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: LangRes(new_role))\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(name)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: role_name).Validate(minLength:3, maxLength:30)\n                                InputErr(Name: role_name, minLength: $validate_role_name$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(type)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 text-left){\n                                AppParam(App:#app_id#, Name: roles_types, Source: src_roles)\n                                Select(Name: role_type, Source: src_roles, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    If(#image_upload_worked#==1){\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(icon))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    ImageInput(Name: icon, Width: 100, Ratio: 1/1)\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_list, Contract: Roles_Create).Alert(Text: $want_create_new_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }\n    }\n}",
            "Name": "roles_create",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\nDiv(content-wrapper){\n    SetTitle($roles$)\n    AddToolButton(Title: $create$, Page: roles_create, Icon: icon-plus)\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"role_name='#v_Search#'\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"id>0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n    \n    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name,role_type,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted\").Custom(custom_id){\n        If(#deleted# == 0){\n            SetVar(Name: style_text, Value: \"text-normal\")\n            SetVar(Name: style_link, Value: \"text-primary\")\n        }.Else{\n            SetVar(Name: style_text, Value: \"text-muted\")\n            SetVar(Name: style_link, Value: \"text-muted\")\n        }\n        Span(Class: #style_text#, Body: #id#)\n    }.Custom(custom_creator){\n        If(#role_type#==3){\n        }.Else{\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\n                Span(Body: #creator.member_name#)\n            }\n        }\n    }.Custom(custom_name){\n        SetVar(Name: img_id, Value: 0)\n        DBFind(Name: binaries, Source: src_binaries).Columns(\"id,data\").Where(\"id=#image_id#\").Vars(img)\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#id#\"){\n            If(#img_id#>0){\n                Image(Src: \"#img_data#\").Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(#role_name#)\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\n                    Span(#role_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Custom(custom_date){\n        Div(#style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n        Div(#style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\n    }.Custom(custom_type){\n        Span(Class: #style_text#, Body: AppParam(App:#app_id#, Name: roles_types, Index: #role_type#))\n    }.Custom(custom_status){\n        If(#deleted# == 0){\n            Span(Class: #style_text#, Body: LangRes(active))\n        }.Else{\n            Span(Class: #style_text#, Body: LangRes(deleted))\n        }\n    }.Custom(actions){\n        Div(pull-right){\n            If(And(#deleted#==0,#role_type#!=3)){\n                Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Roles_Del, Params: \"rid=#id#\", Page: roles_list).Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n            }\n        }\n    }.Where(#v_Where#).Order(\"deleted ASC, id ASC\")\n    \n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-1 mt-sm text-right){\n                    Label(For: Search){\n                        Span(Body: LangRes(name))\n                    }\n                }\n                Div(col-md-11){\n                    Div(input-group){\n                        Input(Name: Search, Value: #v_Search#)\n                        Div(input-group-btn){\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: roles_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_roles, Columns: \"$id$=custom_id,$name$=custom_name,$type$=custom_type,$creator$=custom_creator,$created$ / $deleted$=custom_date,$status$=custom_status,=actions\")\n                }\n            }\n            If(GetVar(isSearch) == 1){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: roles_list, PageParams: \"isSearch=0\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "roles_list",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    \n    If(#v_role_id# > 0){\n        DBFind(Name: roles, Source: src_roles).Columns(\"role_name,role_type,deleted\").Where(\"id=#v_role_id#\").Vars(prefix)\n        \n        SetTitle($role$: #prefix_role_name#)\n        Div(breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #prefix_role_name#)\n        }\n        \n        DBFind(Name: roles_participants, Source: src_participants).Columns(\"id,member->member_id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\n            If(#deleted# == 0){\n                SetVar(Name: style_text, Value: \"text-normal\")\n                SetVar(Name: style_link, Value: \"text-primary\")\n            }.Else{\n                SetVar(Name: style_text, Value: \"text-muted\")\n                SetVar(Name: style_link, Value: \"text-muted\")\n            }\n            Span(Class: #style_text#, Body: #id#)\n        }.Custom(custom_appointed){\n            If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\n                LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#appointed.member_id#\"){\n                    Span(Body: #appointed.member_name#)\n                }\n            }\n            If(#appointed.voting_id#>0){\n                LinkPage(Page: voting_view, PageParams: \"vID=#appointed.voting_id#\"){\n                    Span(Class: h5 text-bold, Body: #appointed.voting_name#)\n                }\n            }\n        }.Custom(custom_member){\n            SetVar(Name: img_id, Value: 0)\n            If(#member.image_id#>0){\n                DBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#member.image_id#\").Vars(img)\n            }\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\n                If(#img_id#>0){\n                    Image(Src: \"#img_data#\", Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    Span(#member.member_name#)\n                }.Else{\n                    Div(){\n                        Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                        Span(#member.member_name#)\n                    }.Style(display:flex; align-items:center;)\n                }\n            }\n        }.Custom(custom_address){\n            Span(Class: #style_text#, Body: Address(#member.member_id#))\n        }.Custom(custom_date){\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Custom(custom_status){\n            If(#deleted# == 0){\n                Span(Class: #style_text#, Body: LangRes(active))\n            }.Else{\n                Span(Class: #style_text#, Body: LangRes(deleted))\n            }\n        }.Custom(actions){\n            Div(pull-right){\n                If(And(#deleted#==0,#prefix_role_type#!=3)){\n                    Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Roles_Unassign, Params: \"row_id=#id#\", Page: roles_view, PageParams: \"v_role_id=#v_role_id#\").Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }.Where(\"role->id='#v_role_id#'\").Order(\"deleted ASC, id ASC\")\n        \n        Form(panel panel-primary){\n            Div(panel-body){\n                Table(Source: src_participants, Columns: \"$id$=custom_id,$member$=custom_member,$address$=custom_address,$appointed$=custom_appointed,$appointed$ / $deleted$=custom_date,$status$=custom_status,=actions\")\n            }\n            Div(panel-footer text-right){\n                Button(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\n                If(#prefix_deleted#==0){\n                    Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_assign, PageParams: \"v_role_id=#v_role_id#\")\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "roles_view",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\nDiv(content-wrapper){\n    \n    SetTitle($new_voting$)\n    Div(breadcrumb){\n        LinkPage($voting$, voting_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $new_voting$)\n    }\n    \n    Div(row){\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(new_voting)}\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(name))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: voting_name, Value: New voting)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(decision)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                AppParam(App:#app_id#, Name: type_voting_decisions, Source: type_voting_decisions)\n                                Select(Name: type_decision, Source: type_voting_decisions, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(participants)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#app_id#, Name: type_voting_participants, Source: type_voting_participants)\n                                Select(Name: type_participants, Source: type_voting_participants, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                   Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(voting_volume)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: volume, Type: number, Value: 75)\n                                P(Class: m0 text-muted, Body: $voting_volume_desc$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(voting_quorum)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: quorum, Type: number, Value: 50)\n                                P(Class: m0 text-muted, Body: $voting_quorum_desc$)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(date_start)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-5 mb-sm text-left){\n                                Input(Name: start_date, Type: date, Value: Now(\"YYYY-MM-DD\", 3 days))\n                            }\n                            Div(col-md-4 mb-sm text-left){\n                                Input(Name: start_time, Type: time, Value: Now(\"HH:MI\"))\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(date_end)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-5 mc-sm text-left){\n                                Input(Name: end_date, Type: date, Value: Now(\"YYYY-MM-DD\", 21 days))\n                            }\n                            Div(col-md-4 mc-sm text-left){\n                                Input(Name: end_time, Type: time, Value: Now(\"HH:MI\"))\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-lg text-right){\n                                Label(){\n                                    Span(Body: LangRes(description))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: description, Type: textarea)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Input(Name: now_date, Type: hidden, Value: Now(\"YYYY-MM-DD HH:MI\"))\n                    Input(Name: voting_type, Type: hidden, Value: 1)\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: voting_list)\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_list, Contract: voting_CreateNew)\n                }\n            }\n        }\n    }\n}",
            "Name": "voting_create",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\n        \n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(row mt-sm){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(row mt-sm){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(candidates))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 text-left){\n                                Div(input-group){\n                                    Input(Name: can_apply_voting, Disabled: 1, Value: \"$can_apply_voting$\")\n                                    Div(input-group-btn){\n                                        Button(Body: LangRes(apply), Class: btn btn-primary, Page: voting_decision_candidates, PageParams: \"vID=#vID#\", Contract: voting_SubjectCandidates)\n                                    }\n                                }\n                            }\n                        }\n                        Div(row mt-sm){\n                            Div(col-lg-8 col-lg-offset-3){\n                                DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\n                                    Address(#subject.member_id#)\n                                }.Custom(custom_member){\n                                    LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\n                                        Span(Body: #subject.member_name#)\n                                    }\n                                }\n                                Table(src_voting_subject, \"$candidates$=custom_member,$address$=custom_address\")\n                            }\n                        }\n                        Div(form-group){\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(role))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"role_type=2 and deleted=0\")\n                                    Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                                }\n                            }\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(vacancies))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: vacancies, Type: Number, Value: #instance_optional_role_vacancies#)\n                                }\n                            }\n                        }\n                        Div(form-group){\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: memberID, Type: hidden, Value: 0)\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "voting_decision_candidates",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name\").Where(\"id=#vID#\").Vars(instance)\n        DBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Where(\"voting_id=#vID#\").Vars(prefix)\n        \n        If(#prefix_id#>0){\n        }.Else{\n            SetVar(Name: prefix_subject_contract_accept, Value: \"\")\n            SetVar(Name: prefix_subject_contract_accept_params, Value: \"\")\n            SetVar(Name: prefix_subject_contract_reject, Value: \"\")\n            SetVar(Name: prefix_subject_contract_reject_params, Value: \"\")\n        }\n        \n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(contract_accept)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: contract_accept, Value: #prefix_subject_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: contract_accept_params, Value: #prefix_subject_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                            }\n                        }\n                        \n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_reject, Value: #prefix_subject_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #prefix_subject_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectContract)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "voting_decision_contract",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\n        DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->text\").Where(\"voting_id=#vID#\").Vars(prefix)\n        \n        If(#prefix_id#>0){\n        }.Else{\n            SetVar(Name: prefix_subject_text, Value: \"\")\n        }\n        \n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-12 mt-sm){\n                                    Label(){\n                                        Span(Body: LangRes(text_document))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                    Input(Name: text_document, Type: textarea, Value: #prefix_subject_text#)\n                                }\n                            }\n                        }\n                        Div(form-group){\n                            Div(row mb-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row mb-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                            Div(row mb-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        \n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectDocument)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "voting_decision_document",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\n        \n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(candidates)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Div(input-group){\n                                        DBFind(Name: members, Source: src_members).Columns(\"id,member_name\").Custom(custom_username){\n                                            #member_name# (Address(#id#) )\n                                        }\n                                        Select(Name: memberID, Source: src_members, NameColumn: custom_username, ValueColumn: id)\n                                        Div(input-group-btn){\n                                            Button(Body: LangRes(add), Class: btn btn-primary, Page: voting_decision_election, PageParams: \"vID=#vID#\", Contract: voting_SubjectCandidates)\n                                        }\n                                    }\n                                }\n                            }\n                            Div(row df){\n                                Div(col-lg-8 col-lg-offset-3){\n                                    DBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\n                                        Address(#subject.member_id#)\n                                    }.Custom(custom_member){\n                                        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\n                                            Span(Body: #subject.member_name#)\n                                        }\n                                    }\n                                    Table(src_subject, \"$candidates$=custom_member,$address$=custom_address\")\n                                }\n                            }\n                        }\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(role)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"role_type=2 and deleted=0\")\n                                    Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                                }\n                            }\n                            \n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(vacancies)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\n                                }\n                            }\n                        }\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "voting_decision_election",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\n        DBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->column,subject->column_value,subject->table_id,subject->table,subject->description\").Where(\"voting_id=#vID#\").Vars(prefix)\n        \n        If(#prefix_id#>0){\n        }.Else{\n            SetVar(Name: prefix_subject_description, Value: \"\")\n            SetVar(Name: prefix_subject_table, Value: \"\")\n            SetVar(Name: prefix_subject_table_id, Value: \"\")\n            SetVar(Name: prefix_subject_column, Value: \"\")\n            SetVar(Name: prefix_subject_column_value, Value: \"\")\n        }\n        \n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(table_to_written))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: table_to_written, Value: #prefix_subject_table#, Placeholder: \"$table_to_written_desc$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(row_id))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: row_id, Class: form-control, Type: number, Value: #prefix_subject_table_id#, Placeholder: \"$row_id_desc$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(column_name))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: column_name, Value: #prefix_subject_column#, Placeholder: \"$column_name_desc$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(written_value))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: written_value, Value: #prefix_subject_column_value#, Placeholder: \"$written_value_desc$\")\n                                }\n                            }\n                        }\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-lg text-right){\n                                    Label(){\n                                        Span(Body: LangRes(description))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: description, Class: form-control, Type: textarea, Value: #prefix_subject_description#)\n                                }\n                            }\n                        }\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectFormal)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "voting_decision_formal",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,voting->type_participants\").Where(\"id=#vID#\").Vars(instance)\n        \n        SetTitle($participants$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $participants$)\n        }\n        \n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(participants)}\n                    Div(panel-body){\n                        Div(form-group){\n                            If(#instance_voting_type_participants# == 1){\n                                Div(row){\n                                    Div(col-md-12){\n                                        Input(Name: voting_all_members, Disabled: 1, Value: \"$voting_all_members$\")\n                                    }\n                                }\n                            }\n                            If(#instance_voting_type_participants# == 2){\n                                Div(row){\n                                    Div(col-md-12){\n                                        Label(){\n                                            Span(Body: LangRes(select_member))\n                                            Span(Class: text-danger, Body:*)\n                                        }\n                                        DBFind(Name: members, Source: src_members).Columns(\"id,member_name\").Custom(custom_username){\n                                            #member_name# (Address(#id#) )\n                                        }\n                                        Select(Name: var_id, Source: src_members, NameColumn: custom_username, ValueColumn: id)\n                                    }\n                                }\n                            }\n                            If(#instance_voting_type_participants# == 3){\n                                Div(row){\n                                    Div(col-md-12){\n                                        Label(){\n                                            Span(Body: LangRes(select_role))\n                                            Span(Class: text-danger, Body:*)\n                                        }\n                                        DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"deleted=0\")\n                                        Select(Name: var_id, Source: src_roles, NameColumn: role_name, ValueColumn: id)\n                                    }\n                                }\n                            }\n                        }\n                        DBFind(Name: votings_participants, Source: src_participants).Columns(\"id\").Where(\"voting_id=#vID#\").Vars(participant)\n                        If(#participant_id#>0){\n                            Div(form-group){\n                                Div(row){\n                                    Div(col-md-12){\n                                        DBFind(Name: votings_participants, Source: src_participants).Columns(\"id,member->member_id,member->member_name\").Where(\"voting_id=#vID#\").Custom(custom_id){\n                                            Span(Body: #id#)\n                                        }.Custom(custom_member){\n                                            LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\n                                                Span(Body: #member.member_name#)\n                                            }\n                                        }\n                                        Table(src_participants, \"$id$=custom_id,$member_name$=custom_member\")\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        If(#instance_voting_type_participants# == 2){\n                            Button(Body: LangRes(add_member), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\n                        }\n                        If(#instance_voting_type_participants# == 3){\n                            Button(Body: LangRes(add_role), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "voting_invite",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\nDiv(content-wrapper){\n    SetTitle($voting$)\n    AddToolButton(Title: $create$, Page: voting_create, Icon: icon-plus)\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"voting->name='#v_Search#' and deleted=0\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"deleted=0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n    \n    DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,voting->type,voting->type_decision,voting->type_participants,flags->notifics,flags->success,flags->decision,progress->percent_success,creator->member_id,creator->member_name,date_started,date_ended,deleted\").Custom(custom_id){\n        Span(Class: h5, Body: #id#)\n        SetVar(Name: vDateNow, Value: Now(\"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vStartDate, Value: DateTime(DateTime: #date_started#, Format: \"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vEndDate, Value: DateTime(#date_ended#, \"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vCmpStartDate, Value: CmpTime(#vStartDate#,#vDateNow#))\n        SetVar(Name: vCmpEndDate, Value: CmpTime(#vEndDate#,#vDateNow#))\n    }.Custom(custom_name){\n        LinkPage(Page: voting_view, PageParams: \"vID=#id#\"){\n            Span(Class: h5 text-bold, Body: #voting.name#)\n        }\n    }.Custom(custom_subject){\n        If(Or(#vCmpStartDate#<=0,#voting.type#==2)){\n            Span(Class: h6, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n        }.Else{\n            If(#voting.type_decision# == 1){\n                LinkPage(Page: voting_decision_candidates, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n                }\n            }\n            If(#voting.type_decision# == 2){\n                LinkPage(Page: voting_decision_election, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n                }\n            }\n            If(#voting.type_decision# == 3){\n                LinkPage(Page: voting_decision_document, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n                }\n            }\n            If(#voting.type_decision# == 4){\n                LinkPage(Page: voting_decision_formal, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n                }\n            }\n            If(#voting.type_decision# == 5){\n                LinkPage(Page: voting_decision_contract, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n                }\n            }\n        }\n    }.Custom(custom_participants){\n        If(Or(#vCmpStartDate#<=0,#voting.type#==2)){\n            Span(Class: h6, Body: AppParam(App:#app_id#, Name: type_voting_participants, Index: #voting.type_participants#))\n        }.Else{\n            LinkPage(Page: voting_invite, PageParams: \"vID=#id#\"){\n                Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_participants, Index: #voting.type_participants#))\n            }\n        }\n    }.Custom(custom_notifics){\n        If(#flags.notifics# == 1){\n            Div(Class: text-center text-bold, Body: LangRes(yes))\n        }.Else{\n            If(And(#flags.success#!=1,#vCmpEndDate#>0,#vCmpStartDate#<0,#creator.member_id#==#key_id#)){\n                Div(Class: text-center, Body: Button(Body: LangRes(send), Class: btn btn-primary, Contract: voting_SendNotifics, Params: \"votingID=#id#\", Page: voting_list))\n            }.Else{\n                Div(Class: text-center text-bold, Body: LangRes(no))\n            }\n        }\n    }.Custom(custom_creator){\n        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\n            Span(Body: #creator.member_name#)\n        }\n    }.Custom(custom_date){\n        If(#vCmpStartDate# < 0){\n            Div(Class: text-muted, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: text-bold, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n        If(#vCmpEndDate# < 0){\n            Div(Class: text-muted, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: text-bold, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n    }.Custom(custom_type){\n        Span(Class: h6, Body: AppParam(App:#app_id#, Name: type_voting, Index: #voting.type#))\n    }.Custom(custom_progress){\n        Div(Class: text-center h5 text-bold, Body: #progress.percent_success# %)\n    }.Custom(custom_decision){\n        If(#flags.decision# == 0){\n            If(And(#vCmpEndDate#<0,#creator.member_id#==#key_id#)){\n                Div(Class: text-center, Body: Button(Body: LangRes(decision), Class: btn btn-primary, Contract: voting_CheckDecision, Params: \"votingID=#id#\", Page: voting_list))\n            }.Else{\n                Div(Class: text-muted text-center, Body: LangRes(no))\n            }\n        }\n        If(#flags.decision# == -2){\n            Div(Class: text-muted text-center, Body: LangRes(not_enough_votes))\n        }\n        If(#flags.decision# == 1){\n            Div(Class: text-success text-center, Body: LangRes(accepted))\n        }\n        If(#flags.decision# == -1){\n            Div(Class: text-danger text-center, Body: LangRes(rejected))\n        }\n    }.Custom(custom_status){\n        If(#flags.success# == 1){\n            Div(Class: text-success text-center, Body: LangRes(success))\n        }.Else{\n            If(#vCmpEndDate# < 0){\n                Div(Class: text-muted text-center, Body: LangRes(finished))\n            }.Else{\n                If(#vCmpStartDate# < 0){\n                    Div(text-center){\n                        Button(Class: btn btn-link, Page: voting_view, PageParams: \"vID=#id#\"){\n                            Span(Class: h4, Body: Em(Class: fa icon-eye))\n                        }\n                    }\n                }.Else{\n                    Div(Class: text-warning text-center, Body: LangRes(waiting))\n                }\n            }\n        }\n    }.Custom(actions){\n        Div(text-right){\n            If(#vCmpStartDate# > 0){\n                Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: voting_Delete, Params: \"votingID=#id#\", Page: voting_list).Alert(Text: $want_delete_voting$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n            }\n        }\n    }.Where(#v_Where#).Order(id desc)\n    \n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-1 mt-sm text-right){\n                    Label(For: Search){\n                        Span(Body: LangRes(name))\n                    }\n                }\n                Div(col-md-11){\n                    Div(input-group){\n                        Input(Name: Search, Value: #v_Search#)\n                        Div(input-group-btn){\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: voting_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(src_voting, \"$id$=custom_id,$name$=custom_name,$type$=custom_type,$subject_voting$=custom_subject,$participants$=custom_participants,$date_start$/$date_end$=custom_date,$creator$=custom_creator,$notifications$=custom_notifics,$progress$=custom_progress,$decision$=custom_decision,$status$=custom_status,=actions\")\n                }\n            }\n            If(GetVar(isSearch) == 1){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-default, Page: voting_list, PageParams: \"isSearch=0\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "voting_list",
            "Menu": "default_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\nDiv(content-wrapper){\n    If(#notific_id#>0){\n        DBFind(Name: notifications, Source: src_notifications).Where(\"id=#notific_id#\").Columns(\"page_params->voting_id\").Vars(notific)\n        SetVar(Name: vID, Value: #notific_page_params_voting_id#)\n    }\n    \n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,voting->volume,voting->quorum,voting->type,voting->type_decision,voting->description,optional->role_id,optional->role_vacancies,optional->number_candidates,optional->contract_accept,optional->contract_reject,progress->number_participants,progress->number_voters,progress->percent_success,progress->percent_voters,flags->success,flags->full_data,flags->decision,flags->notifics,date_started,date_ended\").Where(\"id=#vID#\").Vars(instance)\n        \n        SetTitle(#instance_voting_name#)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #instance_voting_name#)\n        }\n        \n        SetVar(Name: vDateNow, Value: Now(\"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vStartDate, Value: DateTime(DateTime: #instance_date_started#, Format: \"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vEndDate, Value: DateTime(#instance_date_ended#, \"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vCmpStartDate, Value: CmpTime(#vStartDate#,#vDateNow#))\n        SetVar(Name: vCmpEndDate, Value: CmpTime(#vEndDate#,#vDateNow#))\n        \n        DBFind(Name: votings_participants, Source: src_check).Columns(\"id\").Where(\"voting_id=#vID# and member->member_id='#key_id#' and decision=0\").Vars(participant)\n        If(And(#vCmpStartDate#<0,#vCmpEndDate#>0,#instance_flags_full_data#==1,#instance_flags_decision#==0,#participant_id#>0)){\n            SetVar(Name: vOpportunityVote, Value: 1)\n        }.Else{\n            SetVar(Name: vOpportunityVote, Value: 0)\n        }\n        \n        Div(row){\n            Div(col-lg-10 col-lg-offset-1){\n                Form(panel panel-default){\n                    Input(Type: hidden, Name: votingID, Value: #vID#)\n                    \n                    Div(list-group-item text-center){\n                        P(Class: h3 text-bold m0, Body: #instance_voting_name#)\n                        Div(row){\n                            Div(col-md-12 mt-sm){\n                                P(Class: h5 text-muted m0, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #instance_voting_type_decision#))\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                P(Class: h5 text-muted m0, Body: LangRes(description))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                P(Class: h5 text-muted m0, Body: #instance_voting_description#)\n                            }\n                        }\n                    }\n                    \n                    Div(list-group-item text-center){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                P(Class: h4 text-normal m0, Body: LangRes(type))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                P(Class: h4 text-normal m0, Body: AppParam(App:#app_id#, Name: type_voting, Index: #instance_voting_type#))\n                            }\n                        }\n                        If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2,#instance_voting_type_decision#==3,#instance_voting_type_decision#==4)){\n                            Div(row){\n                                Div(col-md-6 mt-sm text-right){\n                                    P(Class: h4 text-normal m0, Body: LangRes(contract_accept))\n                                }\n                                Div(col-md-6 mt-sm text-left){\n                                    If(#instance_optional_contract_accept# == \"\"){\n                                        P(Class: h4 text-muted m0, Body: LangRes(optional))\n                                    }.Else{\n                                        P(Class: h4 text-normal m0, Body: #instance_optional_contract_accept#)\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-6 mt-sm text-right){\n                                    P(Class: h4 text-normal m0, Body: LangRes(contract_reject))\n                                }\n                                Div(col-md-6 mt-sm text-left){\n                                    If(#instance_optional_contract_reject# == \"\"){\n                                        P(Class: h4 text-muted m0, Body: LangRes(optional))\n                                    }.Else{\n                                        P(Class: h4 text-normal m0, Body: #instance_optional_contract_reject#)\n                                    }\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                P(Class: h4 text-normal m0, Body: LangRes(filled))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#instance_flags_full_data# == 1){\n                                    P(Class: h4 text-success m0, Body: LangRes(yes))\n                                }.Else{\n                                    P(Class: h4 text-danger m0, Body: LangRes(no))\n                                }\n                            }\n                        }\n                        If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){\n                            Div(row){\n                                Div(col-md-6 mt-sm text-right){\n                                    P(Class: h5 text-normal m0){\n                                        Span(Body: LangRes(role))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-6 mt-sm text-left){\n                                    If(#instance_optional_role_id# > 0){\n                                        DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"id=#instance_optional_role_id#\").Vars(prefix)\n                                        P(Class: h5 text-normal m0, Body: #prefix_role_name# (LangRes(id): #prefix_id#))\n                                    }.Else{\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-6 mt-sm text-right){\n                                    P(Class: h5 text-normal m0){\n                                        Span(Body: LangRes(vacancies))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-6 mt-sm text-left){\n                                    If(#instance_optional_role_vacancies# > 0){\n                                        P(Class: h5 text-normal m0, Body: #instance_optional_role_vacancies#)\n                                    }.Else{\n                                        P(Class: h5 text-danger m0, Body: #instance_optional_role_vacancies#)\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-6 mt-sm text-right){\n                                    P(Class: h5 text-normal m0){\n                                        Span(Body: LangRes(candidates))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-6 mt-sm text-left){\n                                    If(#instance_optional_number_candidates# > 0){\n                                        P(Class: h5 text-normal m0, Body: #instance_optional_number_candidates#)\n                                    }.Else{\n                                        P(Class: h5 text-danger m0, Body: #instance_optional_number_candidates#)\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\n                                    DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\n                                        Span(Class: h6, Body: Address(#subject.member_id#))\n                                    }.Custom(custom_member){\n                                        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\n                                            Span(Body: #subject.member_name#)\n                                        }\n                                    }.Custom(custom_voting){\n                                        If(#vOpportunityVote#==1){\n                                            Button(Body: LangRes(vote), Class: btn btn-success, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_AcceptCandidates, Params: \"candidateID=#subject.member_id#\")\n                                        }\n                                    }.Order(\"id\")\n                                    Table(src_voting_subject, \"=custom_member,=custom_address,=custom_voting\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-12 mt-sm){\n                                    If(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\n                                        If(#instance_voting_type_decision#==1){\n                                            Button(Class: btn btn-link, Page: voting_decision_candidates, PageParams: \"vID=#vID#\"){\n                                                Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n                                            }\n                                        }\n                                        If(#instance_voting_type_decision#==2){\n                                            Button(Class: btn btn-link, Page: voting_decision_election, PageParams: \"vID=#vID#\"){\n                                                Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        If(#instance_voting_type_decision#==3){\n                            DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->text,subject->hash\").Where(\"voting_id=#vID#\").Vars(subject)\n                            Div(row){\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2 mt-lg){\n                                    Div(list-group-item){\n                                        If(#subject_id# > 0){\n                                            P(Class: h5 text-normal m0, Body: #subject_subject_text#)\n                                        }.Else{\n                                            P(Class: h5 text-danger m0, Body: LangRes(empty))\n                                        }\n                                    }\n                                    Div(list-group-item){\n                                        If(#subject_id# > 0){\n                                            P(Class: h6 text-muted m0, Body: Hash: #subject_subject_hash#)\n                                        }.Else{\n                                            P(Class: h6 text-muted m0, Body: Hash: LangRes(empty))\n                                        }\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-12 mt-sm){\n                                    If(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\n                                        Button(Class: btn btn-link, Page: voting_decision_document, PageParams: \"vID=#vID#\"){\n                                            Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n                                        }\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\n                                    If(#vOpportunityVote#==1){\n                                        Div(pull-left){\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n                                        }\n                                        Div(pull-right){\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        If(#instance_voting_type_decision#==4){\n                            DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->description,subject->table,subject->table_id,subject->column,subject->column_value\").Where(\"voting_id=#vID#\").Vars(subject)\n                            Div(row){\n                                Div(col-md-6 mt-sm text-right){\n                                    P(Class: h5 text-normal m0){\n                                        Span(Body: LangRes(table_to_written))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-6 mt-sm text-left){\n                                    If(#subject_id# > 0){\n                                        P(Class: h5 text-normal m0, Body: #subject_subject_table#)\n                                    }.Else{\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\n                                    }\n                                }\n                            }\n                            If(#instance_voting_type#==1){\n                                Div(row){\n                                    Div(col-md-6 mt-sm text-right){\n                                        P(Class: h5 text-normal m0){\n                                            Span(Body: LangRes(row_id))\n                                            Span(Class: text-danger, Body:*)\n                                        }\n                                    }\n                                    Div(col-md-6 mt-sm text-left){\n                                        If(#subject_id# > 0){\n                                            P(Class: h5 text-normal m0, Body: #subject_subject_table_id#)\n                                        }.Else{\n                                            P(Class: h5 text-danger m0, Body: LangRes(empty))\n                                        }\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-6 mt-sm text-right){\n                                    P(Class: h5 text-normal m0){\n                                        If(#instance_voting_type#==1){\n                                            Span(Body: LangRes(column_name))\n                                        }.Else{\n                                            Span(Body: LangRes(parameter_name))\n                                        }\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-6 mt-sm text-left){\n                                    If(#subject_id# > 0){\n                                        P(Class: h5 text-normal m0, Body: #subject_subject_column#)\n                                    }.Else{\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-6 mt-sm text-right){\n                                    P(Class: h5 text-normal m0){\n                                        Span(Body: LangRes(written_value))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-6 mt-sm text-left){\n                                    If(#subject_id# > 0){\n                                        P(Class: h5 text-normal m0, Body: #subject_subject_column_value#)\n                                    }.Else{\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-6 mt-sm text-right){\n                                    P(Class: h5 text-normal m0){\n                                        Span(Body: LangRes(description))\n                                    }\n                                }\n                                Div(col-md-6 mt-sm text-left){\n                                    If(#subject_id# > 0){\n                                        If(#subject_subject_description# == \"\"){\n                                            P(Class: h5 text-muted m0, Body: LangRes(optional))\n                                        }.Else{\n                                            P(Class: h5 text-normal m0, Body: #subject_subject_description#)\n                                        }\n                                    }.Else{\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-12 mt-sm){\n                                    If(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\n                                        Button(Class: btn btn-link, Page: voting_decision_formal, PageParams: \"vID=#vID#\"){\n                                            Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n                                        }\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\n                                    If(#vOpportunityVote#==1){\n                                        Div(pull-left){\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n                                        }\n                                        Div(pull-right){\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        If(#instance_voting_type_decision#==5){\n                            DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->contract_accept,subject->contract_reject\").Where(\"voting_id=#vID#\").Vars(subject)\n                            Div(row){\n                                Div(col-md-6 mt-sm text-right){\n                                    P(Class: h5 text-normal m0){\n                                        Span(Body: LangRes(contract_accept))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-6 mt-sm text-left){\n                                    If(#subject_id# > 0){\n                                        P(Class: h5 text-normal m0, Body: #subject_subject_contract_accept#)\n                                    }.Else{\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-6 mt-sm text-right){\n                                    P(Class: h5 text-normal m0){\n                                        Span(Body: LangRes(contract_reject))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-6 mt-sm text-left){\n                                    If(#subject_id# > 0){\n                                        P(Class: h5 text-normal m0, Body: #subject_subject_contract_reject#)\n                                    }.Else{\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-12 mt-sm){\n                                    If(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\n                                        Button(Class: btn btn-link, Page: voting_decision_contract, PageParams: \"vID=#vID#\"){\n                                            Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n                                        }\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\n                                    If(#vOpportunityVote#==1){\n                                        Div(pull-left){\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n                                        }\n                                        Div(pull-right){\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    Div(list-group-item text-center){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(status))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#instance_flags_success#==1){\n                                    P(Class: h5 text-success m0, Body: LangRes(success))\n                                }.Else{\n                                    If(#vCmpEndDate#<0){\n                                        P(Class: h5 text-muted m0, Body: LangRes(finished))\n                                    }.Else{\n                                        If(#vCmpStartDate#<0){\n                                            P(Class: h5 text-success m0, Body: LangRes(started))\n                                        }.Else{\n                                            P(Class: h5 text-warning m0, Body: LangRes(waiting))\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(notifications))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#instance_flags_notifics#==1){\n                                    P(Class: h5 text-normal m0, Body: LangRes(yes))\n                                }.Else{\n                                    P(Class: h5 text-normal m0, Body: LangRes(no))\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(decision))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#instance_flags_decision#==-2){\n                                    P(Class: h5 text-normal m0, Body: LangRes(not_enough_votes))\n                                }\n                                If(#instance_flags_decision#==-1){\n                                    P(Class: h5 text-danger m0, Body: LangRes(rejected))\n                                }\n                                If(#instance_flags_decision#==0){\n                                    P(Class: h5 text-normal m0, Body: LangRes(no))\n                                }\n                                If(#instance_flags_decision#==1){\n                                    P(Class: h5 text-success m0, Body: LangRes(accepted))\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(date_start))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#vCmpStartDate#<0){\n                                    P(Class: h5 text-muted m0, Body: DateTime(DateTime: #instance_date_started#, Format: \"DD.MM.YYYY HH:MI\"))\n                                }.Else{\n                                    P(Class: h5 text-normal m0, Body: DateTime(DateTime: #instance_date_started#, Format: \"DD.MM.YYYY HH:MI\"))\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(date_end))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#vCmpEndDate#<0){\n                                    P(Class: h5 text-muted m0, Body: DateTime(DateTime: #instance_date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\n                                }.Else{\n                                    P(Class: h5 text-normal m0, Body: DateTime(DateTime: #instance_date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(voting_volume))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #instance_voting_volume#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(voting_quorum))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #instance_voting_quorum#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(participants))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#instance_progress_number_participants# > 0){\n                                    P(Class: h5 text-normal m0, Body: #instance_progress_number_participants#)\n                                }.Else{\n                                    P(Class: h5 text-danger m0, Body: #instance_progress_number_participants#)\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\n                                DBFind(Name: votings_participants, Source: src_voting_participants).Columns(\"id,member->member_id,member->member_name,decision_date,decision\").Where(\"voting_id=#vID#\").Custom(custom_address){\n                                    P(Class: h6 m0, Body: Address(#member.member_id#))\n                                }.Custom(custom_member){\n                                    LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\n                                        Span(Body: #member.member_name#)\n                                    }\n                                }.Custom(custom_decision){\n                                    \n                                    If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){\n                                        If(#decision#==0){\n                                            P(Class: h6 m0, Body: LangRes(did_not_vote))\n                                        }.Else{\n                                            P(Class: text-success text-center h6 m0, Body: $vote_for_candidate$:)\n                                            P(Class: text-success text-center h6 m0, Body: Address(#decision#) )\n                                            P(Class: text-success text-center h6 m0, Body: $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n                                        }\n                                    }\n                                    If(#instance_voting_type_decision#==3){\n                                        If(#decision#==0){\n                                            P(Class: h6 m0, Body: LangRes(did_not_vote))\n                                        }\n                                        If(#decision#==1){\n                                            P(Class: text-success h6 m0, Body: $document_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n                                        }\n                                        If(#decision#==-1){\n                                            P(Class: text-danger h6 m0, Body: $document_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n                                        }\n                                    }\n                                    If(#instance_voting_type_decision#==4){\n                                        If(#decision#==0){\n                                            P(Class: h6 m0, Body: LangRes(did_not_vote))\n                                        }\n                                        If(#decision#==1){\n                                            P(Class: text-success h6 m0, Body: $decision_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n                                        }\n                                        If(#decision#==-1){\n                                            P(Class: text-danger h6 m0, Body: $decision_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n                                        }\n                                    }\n                                    If(#instance_voting_type_decision#==5){\n                                        If(#decision#==0){\n                                            P(Class: h6 m0, Body: LangRes(did_not_vote))\n                                        }\n                                        If(#decision#==1){\n                                            P(Class: text-success h6 m0, Body: $contract_accepted$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n                                        }\n                                        If(#decision#==-1){\n                                            P(Class: text-danger h6 m0, Body: $contract_rejected$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n                                        }\n                                    }\n                                }.Order(\"id\")\n                                Table(src_voting_participants, \"=custom_member,=custom_decision\")\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-12 mt-sm){\n                                If(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\n                                    Button(Class: btn btn-link, Page: voting_invite, PageParams: \"vID=#vID#\"){\n                                        Span(Class: h5 text-bold, Body: LangRes(participants_add))\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    Div(list-group-item text-center){\n                        Div(row){\n                            Div(col-md-1 mt-sm)\n                            Div(col-md-5 mt-sm text-center){\n                                P(Class: h4 text-normal m0, Body: LangRes(voted))\n                            }\n                            Div(col-md-5 mt-sm text-center){\n                                P(Class: h4 text-normal m0, Body: LangRes(progress))\n                            }\n                            Div(col-md-1 mt-sm)\n                        }\n                        Div(row){\n                            Div(col-md-1 mt-sm)\n                            Div(col-md-5 mt-sm text-center){\n                                P(Class: h6 text-muted m0, Body: LangRes(voting_graph_voted))\n                            }\n                            Div(col-md-5 mt-sm text-center){\n                                P(Class: h6 text-muted m0, Body: LangRes(voting_graph_progress))\n                            }\n                            Div(col-md-1 mt-sm)\n                        }\n                        Div(row){\n                            Div(col-md-1 mt-sm)\n                            Div(col-md-5 mt-sm text-center){\n                                P(Class: h3 text-normal m0, Body: #instance_progress_number_voters# / #instance_progress_percent_voters#)\n                            }\n                            Div(col-md-5 mt-sm text-center){\n                                P(Class: h3 text-normal m0, Body: #instance_progress_percent_success# / 100)\n                            }\n                            Div(col-md-1 mt-sm)\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "voting_view",
            "Menu": "default_menu"
        }
    ],
    "parameters": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "APL_not_required,APL_required",
            "Name": "catalog_ecosystems_freetype"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "public_org,business,finance",
            "Name": "catalog_ecosystems_type"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,multiple",
            "Name": "notification_closure"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Name": "notification_icon"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "notification_sender_member,notification_sender_role",
            "Name": "notification_sender"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,role",
            "Name": "notification_type"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "assigned_role,elective_role,system_role,company_role",
            "Name": "roles_types"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "type_voting_custom,type_voting_system",
            "Name": "type_voting"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "voting_decisions_candidate_requests,voting_decisions_candidate_manual,voting_decisions_document,voting_decisions_db,voting_decisions_contract",
            "Name": "type_voting_decisions"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "voting_participants_everybody,voting_participants_manual,voting_participants_role",
            "Name": "type_voting_participants"
        }
    ],
    "tables": [
        {
            "Name": "catalog_ecosystems",
            "Columns": "[{\"name\":\"url_address\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_info\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"ecosystem_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"ecosystem_number\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"image_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"flag_free\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "votings",
            "Columns": "[{\"name\":\"date_ended\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"date_started\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"flags\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"voting\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"creator\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"optional\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"progress\",\"type\":\"json\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "votings_participants",
            "Columns": "[{\"name\":\"member\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"decision\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"decision_date\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "votings_subject",
            "Columns": "[{\"name\":\"subject\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"number_accept\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}