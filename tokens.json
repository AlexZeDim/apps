{
    "name": "Tokens",
    "data": [
        {
            "Name": "default_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title: $@1emission_tokens$, Page: t_tokens, Icon:fa fa-list-ul)",
            "Type": "menu"
        },
        {
            "Name": "data_input",
            "Trans": "{\"en\": \"Data input\", \"ru\": \"Ввод данных\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_new",
            "Trans": "{\"en\": \"New emission\", \"ru\": \"Новая эмиссия\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_tokens",
            "Trans": "{\"en\": \"Emission tokens\", \"ru\": \"Эмиссия токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "multiple",
            "Trans": "{\"en\": \"multiple\", \"ru\": \"многоразовый\"}",
            "Type": "languages"
        },
        {
            "Name": "singletime",
            "Trans": "{\"en\": \"single-time\", \"ru\": \"одноразовый\"}",
            "Type": "languages"
        },
        {
            "Name": "template_creation_error_x_unspecified",
            "Trans": "{\"en\": \"Creation error: %v unspecified\", \"ru\": \"Ошибка создания: %v не определено\"}",
            "Type": "languages"
        },
        {
            "Name": "type_emission",
            "Trans": "{\"en\": \"Emission type\", \"ru\": \"Тип эмиссии\"}",
            "Type": "languages"
        },
        {
            "Name": "type_withdraw",
            "Trans": "{\"en\": \"Withdraw type\", \"ru\": \"Тип гашения\"}",
            "Type": "languages"
        },
        {
            "Name": "with_withdrawal",
            "Trans": "{\"en\": \"with withdrawal\", \"ru\": \"с гашением\"}",
            "Type": "languages"
        },
        {
            "Name": "without_withdrawal",
            "Trans": "{\"en\": \"without withdrawal\", \"ru\": \"без гашения\"}",
            "Type": "languages"
        },
        {
            "Name": "tokens",
            "Columns": "[\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"ecosystem\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"title\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"amount\",\n        \"type\": \"json\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"type_emission\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"limited\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"type_withdraw\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "type_emission",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1singletime,@1multiple",
            "Type": "app_params"
        },
        {
            "Name": "type_withdraw",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1without_withdrawal,@1with_withdrawal",
            "Type": "app_params"
        },
        {
            "Name": "t_token_edit",
            "Conditions": "true",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Tokens\", deleted:0}).Vars(application)\nAppParam(App:#application_id#, Name:type_emission, Source:type_emission)\nAppParam(App:#application_id#, Name:type_withdraw, Source:type_withdraw)\nSetVar(btn_title,$@1create$).(item_type_emission,).(item_title,).(item_amount,).(item_limited,).(item_ecosystem,).(item_type_withdraw,)\nSetVar(this_page,@1t_token_edit).(back_page,@1t_tokens)\n\nIf(GetVar(Id)){\n    DBFind(tokens).Where({id:#Id#}).Vars(item)\n    SetVar(btn_title,$@1save$)\n}\nForm(){\n    If(GetVar(Id)){\n        Input(Name: Id, Type:hidden, Value: #Id#)\n    }\n    Div(row mt-sm){\n        Div(col-sm-4 mt-sm text-right){\n            LangRes(@1title)\n            Span(*,text-danger)\n        }\n        Div(col-sm-8 text-left){\n            Input(Name: Title, Type:text, Value: #item_title#)\n        }\n    }\n    Div(row mt-sm){\n        Div(col-sm-4 mt-sm text-right){\n            LangRes(@1type_emission)\n            Span(*,text-danger)\n        }\n        Div(col-sm-8 text-left){\n            Select(Name: TypeEmission, Source:type_emission, NameColumn: name, ValueColumn: id, Value: #item_type_emission#)\n        }\n    }\n    Div(row mt-sm){\n        Div(col-sm-4 mt-sm text-right){\n            LangRes(@1type_withdraw)\n            Span(*,text-danger)\n\n        }\n        Div(col-sm-8 text-left){\n            Select(Name: TypeWithdraw, Source:type_withdraw, NameColumn: name, ValueColumn: id, Value: #item_type_withdraw#)\n        }\n    }\n    Div(row mt-sm){\n        Div(col-sm-4 mt-sm text-right){\n            LangRes(@1amount)\n            Span(*,text-danger)\n        }\n        Div(col-sm-8 text-left){\n            Input(Name: Amount, Type:money, Value: #item_amount#)\n        }\n    }\n    Div(row mt-sm){\n        Div(col-sm-4 mt-sm text-right){\n            LangRes(@1limited)\n        }\n        Div(col-sm-8 text-left){\n            If(GetVar(Id)==\"\"){\n                Div(row){\n                    Div(col-md-6){\n                        Input(Name: LimitedDate, Type:number, Type: date)\n                    }\n                    Div(col-md-6){\n                        Input(Name: LimitedTime, Type:number, Type: time)\n                    }\n                }\n            }.Else{\n                DateTime(DateTime: #item_limited#, Format: YYYY-MM-DD HH:MI:SS)\n            }\n        }\n    }\n    Div(mt-lg){\n        Button(Body: $@1back$, Page: #back_page#, Class: btn btn-default)\n        Button(Body: #btn_title#, Page: #back_page#, Class: btn btn-primary pull-right, Contract: TTokenEdit)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "t_token_view",
            "Conditions": "true",
            "Value": "TODO: this\n\nDBFind(@1applications).Columns(\"id\").Where({name:\"Tokens\", deleted:0}).Vars(application)\nIf(GetVar(Id)){\n    DBFind(tokens).Where({id:#Id#}).Vars(item)\n}\nSetVar(title,$@1view$ ##Id#)\nSetTitle(#title#)\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: $@1tokens$, Page: t_tokens)\n        Span(/, mh)\n        Span(#title#, text-muted)\n    }\n    If(GetVar(Id)){\n        Div(row){\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                Div(panel panel-primary){\n                    Div(panel-heading){\n                        LangRes(@1data_view)\n                    }\n                    Div(panel-body){\n                        Div(row mt-sm){\n                            Div(col-sm-4 text-right text-bold){\n                                LangRes(@1type_emission)\n                            }\n                            Div(col-sm-8 text-left){\n                                AppParam(App:#application_id#, Name:type_emission, Index:#item_type_emission#)\n                            }\n                        }\n\n                        Div(row mt-sm){\n                            Div(col-sm-4 text-right text-bold){\n                                LangRes(@1title)\n                            }\n                            Div(col-sm-8 text-left){\n                                #item_title#\n                            }\n                        }\n\n                        Div(row mt-sm){\n                            Div(col-sm-4 text-right text-bold){\n                                LangRes(@1amount)\n                            }\n                            Div(col-sm-8 text-left){\n                                #item_amount#\n                            }\n                        }\n\n                        Div(row mt-sm){\n                            Div(col-sm-4 text-right text-bold){\n                                LangRes(@1limited)\n                            }\n                            Div(col-sm-8 text-left){\n                                #item_limited#\n                            }\n                        }\n\n                        Div(row mt-sm){\n                            Div(col-sm-4 text-right text-bold){\n                                LangRes(@1ecosystem)\n                            }\n                            Div(col-sm-8 text-left){\n                                #item_ecosystem#\n                            }\n                        }\n\n                        Div(row mt-sm){\n                            Div(col-sm-4 text-right text-bold){\n                                LangRes(@1type_withdraw)\n                            }\n                            Div(col-sm-8 text-left){\n                                AppParam(App:#application_id#, Name:type_withdraw, Index:#item_type_withdraw#)\n                            }\n                        }\n                    }\n                    Div(panel-footer text-left){\n                        Button(Body: $@1back$, Page: t_tokens, Class: btn btn-default)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(h3 text-center){\n            $@1item_not_found$\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "t_tokens",
            "Conditions": "true",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Tokens\", deleted:0}).Vars(application)\nSetTitle($@1tokens$)\nSetVar(this_page,@1t_tokens)\nDiv(content-wrapper){\n    AddToolButton(Title: $@1create$, Page: @1t_token_edit, Icon: icon-plus).Popup(Header:$@1emission_new$, Width:50)\n\n    DBFind(tokens).Count(count)\n    If(#page#>0){\n        SetVar(prev_page,Calculate(#page#-1)\n    }.Else{\n        SetVar(page,0).(prev_page,0)\n    }\n    SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)\n    If(#count#>Calculate(#off#+#per_page#)){\n        SetVar(next_page,Calculate(#page#+1)\n    }\n    Div(button-group){\n        If(#page#>0){\n            Button(Body:\"1\", Class:btn btn-default, Page:#this_page#, PageParams: \"page=0\")\n        }.Else{\n            Button(Body:\"1\", Class:btn btn-default disabled)\n        }\n        If(#page#>1){\n            Button(Body:Calculate(#prev_page#+1),Class:btn btn-default, Page:#this_page#, PageParams:\"page=#prev_page#\")\n        }\n        If(And(#page#>0,#page#<#last_page#)){\n            Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)\n        }\n        If(#next_page#<#last_page#){\n            Button(Body:Calculate(#next_page#+1),Class:btn btn-default,Page:#this_page#, PageParams:\"page=#next_page#\")\n        }\n        If(#page#<#last_page#){\n            Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:#this_page#, PageParams:\"page=#last_page#\")\n        }.ElseIf(#last_page#>0){\n            Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\n        }\n    }\n    Div(panel panel-primary){\n        Div(panel-body){\n            Div(table-responsive){\n                DBFind(tokens,src_tokens).Offset(#off#).Order(id).Custom(_lim){\n                    If(#limited#==0){\n                        $@1no$\n                    }.Else{\n                        DateTime(DateTime: #limited#, Format: YYYY-MM-DD HH:MI:SS)\n                    }\n                }.Custom(_actions){\n                    Div(text-right text-nowrap){\n                        Button(Class: btn btn-info fa fa-eye mr-sm, Page: t_token_view, PageParams: \"Id=#id#\")\n                        Button(Class: btn btn-default fa fa-edit mr-sm, Page: t_token_edit, PageParams: \"Id=#id#\")\n                    }\n                }\n                Table(src_tokens,\"$@1type_emission$=type_emission,$@1title$=title,$@1amount$=amount,$@1limited$=_lim,$@1ecosystem$=ecosystem,$@1type_withdraw$=type_withdraw,=_actions\")\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "TTokenEdit",
            "Conditions": "true",
            "Value": "contract TTokenEdit {\n    data {\n        Id string \"optional\"\n        Title string\n        Amount money\n        LimitedDate string \"optional\"\n        LimitedTime string \"optional\"\n        TypeWithdraw int\n        TypeEmission int\n    }\n    func trimZeroTime(s string) string {\n        if Contains(s, \"T00:00:00Z\") {\n            s = s Replace(s, \"T00:00:00Z\", \"\")\n        }\n        return s\n    }\n\n    func dateAddTime(d, t string) string {\n        var dt string\n        if Size(t) == 5 {\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\n        }\n        return dt\n    }\n\n    func fixDatetimes() int{\n        var lim int\n        lim = UnixDateTime(dateAddTime($LimitedDate, $LimitedTime))\n\n        if lim == 0 { // invalid datetimes\n            var errs array\n            if Size($LimitedDate) < 10 {\n                errs = Append(errs, \"date\")\n            }\n            if Size($LimitedTime) < 5 {\n                errs = Append(errs, \"time\")\n            }\n            error Sprintf(LangRes(\"@1template_creation_error_x_unspecified\", \"en\"), Join(errs, \", \"))\n        }\n        if lim < $block_time{\n            error \"Date invalid\"\n        }\n        return lim\n    }\n    conditions {\n        MainCondition()\n        $Id = Int($Id)\n        if $Id > 0{\n            if !DBFind(\"@1tokens\").Where({id:$Id}).One(\"id\") {\n                warning \"Record not found\"\n            }\n        }\n        if Size($Title) == 0{\n            error Sprintf(LangRes(\"@1template_creation_error_x_unspecified\", \"en\"), \"title\")\n        }\n        if $Amount <= 0{\n            error Sprintf(LangRes(\"@1template_creation_error_x_unspecified\", \"en\"), \"amount\")\n        }\n        if Contains($LimitedDate, \"-\") {\n            $limited = fixDatetimes()\n        }else{\n            $limited = 0\n        }\n    }\n    action {\n        TODO:Эмиссия производится на кошелек основателя экосистемы\n        var m map\n        m = {type_emission:$TypeEmission, title:$Title, amount:$Amount, limited:$limited, ecosystem:$ecosystem_id, type_withdraw:$TypeWithdraw}\n        if $Id > 0{\n            DBUpdate(\"@1tokens\", $Id, m)\n        }else{\n            DBInsert(\"@1tokens\", m)\n        }\n    }\n}",
            "Type": "contracts"
        }
    ]
}