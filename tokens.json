{
    "name": "Tokens",
    "data": [
        {
            "Name": "default_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title: $@1emission_tokens$, Page: @1t_tokens, Icon:fa fa-list-ul)",
            "Type": "menu"
        },
        {
            "Name": "completed_stages",
            "Trans": "{\"en\": \"Completed stages\", \"ru\": \"Завершенные этапы\"}",
            "Type": "languages"
        },
        {
            "Name": "data_input",
            "Trans": "{\"en\": \"Data input\", \"ru\": \"Ввод данных\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_date",
            "Trans": "{\"en\": \"Emission date\", \"ru\": \"Дата эмиссии\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_new",
            "Trans": "{\"en\": \"New emission\", \"ru\": \"Новая эмиссия\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_tokens",
            "Trans": "{\"en\": \"Emission tokens\", \"ru\": \"Эмиссия токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_view",
            "Trans": "{\"en\": \"View emission\", \"ru\": \"Просмотр эмиссии\"}",
            "Type": "languages"
        },
        {
            "Name": "multiple",
            "Trans": "{\"en\": \"multiple\", \"ru\": \"многоразовый\"}",
            "Type": "languages"
        },
        {
            "Name": "singletime",
            "Trans": "{\"en\": \"single-time\", \"ru\": \"одноразовый\"}",
            "Type": "languages"
        },
        {
            "Name": "template_creation_error_x_unspecified",
            "Trans": "{\"en\": \"Creation error: %v unspecified\", \"ru\": \"Ошибка создания: %v не определено\"}",
            "Type": "languages"
        },
        {
            "Name": "type_emission",
            "Trans": "{\"en\": \"Emission type\", \"ru\": \"Тип эмиссии\"}",
            "Type": "languages"
        },
        {
            "Name": "type_withdraw",
            "Trans": "{\"en\": \"Withdraw type\", \"ru\": \"Тип гашения\"}",
            "Type": "languages"
        },
        {
            "Name": "with_withdrawal",
            "Trans": "{\"en\": \"with withdrawal\", \"ru\": \"с гашением\"}",
            "Type": "languages"
        },
        {
            "Name": "withdraw",
            "Trans": "{\"en\": \"Withdraw\", \"ru\": \"Погасить\"}",
            "Type": "languages"
        },
        {
            "Name": "withdrawn",
            "Trans": "{\"en\": \"Withdrawn\", \"ru\": \"Погашено\"}",
            "Type": "languages"
        },
        {
            "Name": "without_withdrawal",
            "Trans": "{\"en\": \"without withdrawal\", \"ru\": \"без гашения\"}",
            "Type": "languages"
        },
        {
            "Name": "tokens",
            "Columns": "[\n    {\n        \"conditions\": \"ContractAccess(\\\"@1TokensEmissionCreate\\\")\",\n        \"name\": \"ecosystem\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1TokensEmissionCreate\\\")\",\n        \"name\": \"title\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1TokensEmissionCreate\\\")\",\n        \"name\": \"amount\",\n        \"type\": \"json\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1TokensEmissionCreate\\\", \\\"@1TokensEmissionTypeChange\\\")\",\n        \"name\": \"type_emission\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1TokensEmissionCreate\\\")\",\n        \"name\": \"type_withdraw\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1TokensEmissionWithdraw\\\")\",\n        \"name\": \"withdraw\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "type_emission",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1singletime,@1multiple",
            "Type": "app_params"
        },
        {
            "Name": "type_withdraw",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1without_withdrawal,@1with_withdrawal",
            "Type": "app_params"
        },
        {
            "Name": "t_token_edit",
            "Conditions": "true",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Tokens\", deleted:0, ecosystem:1}).Vars(application)\nAppParam(App:#application_id#, Name:type_emission, Source:type_emission, Ecosystem:1)\nAppParam(App:#application_id#, Name:type_withdraw, Source:type_withdraw, Ecosystem:1)\nSetVar(item_type_emission,).(item_title,).(item_amount,).(item_ecosystem,).(item_type_withdraw,)\nSetVar(this_page,@1t_token_edit).(back_page,@1t_tokens)\nSetVar(btn_title,$@1execute$)\nIf(GetVar(Id)){\n    DBFind(@1tokens).Where({id:#Id#}).Vars(item)\n    If(GetVar(TypeEmission)==\"\"){\n        SetVar(TypeEmission,#item_type_emission#)\n    }\n}.Else{\n    SetVar(Id,0)\n}\nSetTitle($@1emission_new$)\nDiv(fullscreen-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: $@1tokens$, Page: #back_page#)\n        Span(/,mh)\n        Span($@1emission_new$, text-muted)\n    }\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2){\n            Form(panel panel-default){\n                Div(panel-body){\n                    If(#Id#>0){\n                        Input(Name: Id, Type:hidden, Value: #Id#)\n                    }\n                    Div(row mt-sm){\n                        Div(col-sm-4 mt-sm text-right){\n                            LangRes(@1type_emission)\n                            Span(*,text-danger)\n                        }\n                        Div(col-sm-8 text-left){\n                            If(#Id#>0){\n                                Div(mt-sm){\n                                    AppParam(App:#application_id#, Name:type_emission, Index:#item_type_emission#, Ecosystem:1)\n                                    If(#item_type_emission#==2){\n                                        Button(Body: $@1change$, Page:#this_page#, PageParams: \"Id=#Id#\", Class: btn btn-default ml, Contract: @1TokensEmissionTypeChange, Params: \"Id=#Id#\")\n                                    }\n                                }\n                            }.Else{\n                                ForList(type_emission){\n                                    If(#TypeEmission#==#id#){\n                                        Button(Body: #name#, Class: btn btn-default mr disabled)\n                                    }.Else{\n                                        Button(Body: #name#, Page:#this_page#, PageParams: \"TypeEmission=#id#,Id=#Id#\", Class: btn btn-default mr)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(col-sm-4 mt-sm text-right){\n                            LangRes(@1title)\n                            Span(*,text-danger)\n                        }\n                        Div(col-sm-8 text-left){\n                            If(#Id#>0){\n                                Div(mt-sm){\n                                    #item_title#\n                                }\n                            }.Else{\n                                Input(Name: Title)\n                            }\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(col-sm-4 mt-sm text-right){\n                            LangRes(@1type_withdraw)\n                            Span(*,text-danger)\n\n                        }\n                        Div(col-sm-8 text-left){\n                            If(Or(#item_type_withdraw#==1,#item_withdraw#==1)){\n                                Div(mt-sm){\n                                    AppParam(App:#application_id#, Name:type_withdraw, Index:#item_type_withdraw#, Ecosystem:1)\n                                }\n                            }.Else{\n                                Select(Name: TypeWithdraw, Source:type_withdraw, NameColumn: name, ValueColumn: id, Value: #item_type_withdraw#)\n                            }\n                        }\n                    }\n                    If(Or(#TypeEmission#==2,#Id#==0)){\n                        Div(row mt-sm){\n                            Div(col-sm-4 mt-sm text-right){\n                                LangRes(@1amount) (APL)\n                                Span(*,text-danger)\n                            }\n                            Div(col-sm-8 text-left){\n                                If(#item_withdraw#==1){\n                                    Div(mt-sm text-bold){\n                                        $@1withdrawn$\n                                    }\n                                }.Else{\n                                    Input(Name: Amount, Type:number, Value: 0)\n                                }\n                            }\n                        }\n                    }\n\n                    If(#Id#>0){\n                        JsonToSource(amounts, #item_amount#)\n                        Div(list-group-item mt-sm text-muted){\n                            Div(text-center){\n                                $@1completed_stages$\n                            }\n                            ForList(amounts){\n                                Div(row mt-sm){\n                                    Div(col-sm-4 text-right){\n                                        Money(#value#) (APL)\n                                    }\n                                    Div(col-sm-8 text-left){\n                                        DateTime(#key#, Format: YYYY-MM-DD HH:MI:SS)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer){\n                    Button(Body: $@1back$, Page: #back_page#, Class: btn btn-default)\n                    Div(pull-right){\n                        If(And(#item_withdraw#!=1,GetVar(TypeEmission)!=\"\",#item_type_emission#!=1)){\n                            Button(Body: #btn_title#, Page: #back_page#, Class: btn btn-primary, Contract: @1TokensEmissionCreate, Params: \"TypeEmission=#TypeEmission#\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "t_token_view",
            "Conditions": "true",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Tokens\", deleted:0, ecosystem:1}).Vars(application)\nIf(GetVar(Id)){\n    DBFind(@1tokens).Where({id:#Id#}).Vars(item)\n}\nSetVar(title,$@1emission_view$ ##Id#)\nSetTitle(#title#)\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: $@1tokens$, Page: @1t_tokens)\n        Span(/, mh)\n        Span(#title#, text-muted)\n    }\n    If(GetVar(Id)){\n        Div(row){\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                Div(panel panel-default){\n                    Div(panel-body){\n                        Div(row mt-sm){\n                            Div(col-sm-4 text-right text-bold){\n                                LangRes(@1ecosystem)\n                            }\n                            Div(col-sm-8 text-left){\n                                #item_ecosystem#\n                            }\n                        }\n\n                        Div(row mt-sm){\n                            Div(col-sm-4 text-right text-bold){\n                                LangRes(@1type_withdraw)\n                            }\n                            Div(col-sm-8 text-left){\n                                AppParam(App:#application_id#, Name:type_withdraw, Index:#item_type_withdraw#, Ecosystem:1)\n                                If(#item_withdraw#==1){\n                                    Div(){\n                                        $@1withdrawn$\n                                    }\n                                }\n                            }\n                        }\n\n                        Div(row mt-sm){\n                            Div(col-sm-4 text-right text-bold){\n                                LangRes(@1type_emission)\n                            }\n                            Div(col-sm-8 text-left){\n                                AppParam(App:#application_id#, Name:type_emission, Index:#item_type_emission#, Ecosystem:1)\n                            }\n                        }\n\n                        Div(row mt-sm){\n                            Div(col-sm-4 text-right text-bold){\n                                LangRes(@1title)\n                            }\n                            Div(col-sm-8 text-left){\n                                #item_title#\n                            }\n                        }\n                        Div(row mt-sm){\n                            Div(col-sm-4 text-right text-bold){\n                                LangRes(@1amount)\n                            }\n                            Div(col-sm-8 text-left){\n                                JsonToSource(amounts, #item_amount#)\n                                ForList(amounts){\n                                    Div(row md-sm){\n                                        Div(col-sm-6){\n                                            Money(#value#) (APL)\n                                        }\n                                        Div(col-sm-6){\n                                            DateTime(#key#, Format: YYYY-MM-DD HH:MI:SS)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-left){\n                        Button(Body: $@1back$, Page: @1t_tokens, Class: btn btn-default)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(h3 text-center){\n            $@1item_not_found$\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "t_tokens",
            "Conditions": "true",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Tokens\", deleted:0, ecosystem:1}).Vars(application)\nSetTitle($@1tokens$)\nSetVar(this_page,@1t_tokens)\nDiv(content-wrapper){\n    AddToolButton(Title: $@1create$, Page: @1t_token_edit, Icon: icon-plus)\n\n    DBFind(@1tokens).Where({ecosystem:#ecosystem_id#}).Count(count)\n    If(#page#>0){\n        SetVar(prev_page,Calculate(#page#-1)\n    }.Else{\n        SetVar(page,0).(prev_page,0)\n    }\n    SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)\n    If(#count#>Calculate(#off#+#per_page#)){\n        SetVar(next_page,Calculate(#page#+1)\n    }\n    Div(button-group){\n        If(#page#>0){\n            Button(Body:\"1\", Class:btn btn-default, Page:#this_page#, PageParams: \"page=0\")\n        }.Else{\n            Button(Body:\"1\", Class:btn btn-default disabled)\n        }\n        If(#page#>1){\n            Button(Body:Calculate(#prev_page#+1),Class:btn btn-default, Page:#this_page#, PageParams:\"page=#prev_page#\")\n        }\n        If(And(#page#>0,#page#<#last_page#)){\n            Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)\n        }\n        If(#next_page#<#last_page#){\n            Button(Body:Calculate(#next_page#+1),Class:btn btn-default,Page:#this_page#, PageParams:\"page=#next_page#\")\n        }\n        If(#page#<#last_page#){\n            Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:#this_page#, PageParams:\"page=#last_page#\")\n        }.ElseIf(#last_page#>0){\n            Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\n        }\n    }\n    DBFind(@1tokens,src_tokens).Where({ecosystem:#ecosystem_id#}).Offset(#off#).Order(id).Custom(_actions){\n        Div(text-right text-nowrap){\n            If(And(#type_emission#==2,#withdraw#!=1)){\n                Button(Class: btn btn-default fa fa-edit mr-sm, Page: @1t_token_edit, PageParams: \"Id=#id#\")\n            }\n            Button(Class: btn btn-default fa fa-eye mr-sm, Page: @1t_token_view, PageParams: \"Id=#id#\")\n        }\n    }.Custom(_type_withdraw){\n        AppParam(App:#application_id#, Name:type_withdraw, Index:#type_withdraw#, Ecosystem:1)\n    }.Custom(_type_emission){\n        AppParam(App:#application_id#, Name:type_emission, Index:#type_emission#, Ecosystem:1)\n    }.Custom(_amount){\n        JsonToSource(amounts,#amount#)\n        ForList(amounts){\n            Div(){\n                Span(\"Money(#value#)\",mr).(\"(DateTime(#key#, Format: YYYY-MM-DD HH:MI:SS))\",text-muted)\n            }\n        }\n    }\n    Div(panel panel-primary){\n        Div(panel-body){\n            Div(table-responsive){\n                Table(src_tokens,\"$@1title$=title,$@1type_emission$=_type_emission,$@1type_withdraw$=_type_withdraw,$@1amount$=_amount,=_actions\")\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "TokensEmissionCreate",
            "Conditions": "true",
            "Value": "contract TokensEmissionCreate {\n    data {\n        Id int \"optional\"\n        Title string\n        Amount money\n        TypeWithdraw int\n        TypeEmission int\n    }\n\n    func getEmissionConditionContract() string{\n        var param map contractName string contractId int\n        param = DBFind(\"@1parameters\").Where({ecosystem:$ecosystem_id, name:\"emission_condition_contract\"}).Row()\n        if param{\n            contractName = param[\"value\"]\n            if Size(contractName) > 0{\n                contractId = GetContractByName(contractName)\n                if contractId == 0{\n                    error \"Condition contract for extension emission not found\"\n                }elif param[\"conditions\"] != \"false\"{\n                    error \"Condition parameter 'emission_condition_contract' for extension emission must be not editable\"\n                }\n            }\n        }\n        return contractName\n    }\n    func createEmissionConditionParam() {\n        if !DBFind(\"@1parameters\").Where({ecosystem:$ecosystem_id, name:\"emission_condition_contract\"}).Row(){\n            @1NewParameter(\"Name,Value,Conditions\", \"emission_condition_contract\", \"\", \"ContractConditions(\\\"MainCondition\\\")\")\n        }\n    }\n    func checkTokenExists(){\n        if DBFind(\"@1tokens\").Where({ecosystem:$ecosystem_id, withdraw:0}).Row(){\n            error \"Token for current ecosystems already exists and emission not withdraw\"\n        }\n    }\n    conditions {\n        if $Amount <= 0 {\n            error \"Invalid amount\"\n        }\n        if $Id > 0{\n            $item = DBFind(\"@1tokens\").Where({id:$Id}).Row()\n            if !$item {\n                error \"Emission not found\"\n            }\n            if $item[\"type_emission\"] == 1 {\n                error \"Emission are not editable\"\n            }else{\n                var name string\n                name = getEmissionConditionContract()\n                if name != \"\" {\n                    ContractConditions(name)\n                }else{\n                    MainCondition()\n                }\n            }\n        }else{\n            MainCondition()\n            if Size($Title) == 0{\n                error Sprintf(LangRes(\"@1template_creation_error_x_unspecified\", \"en\"), \"title\")\n            }\n            if $TypeEmission == 2 {\n                getEmissionConditionContract()\n            }\n            checkTokenExists()\n        }\n        if $Id == 0 && $Amount <= 0{\n            error Sprintf(LangRes(\"@1template_creation_error_x_unspecified\", \"en\"), \"amount\")\n        }\n        $guest = 4544233900443112470\n        $founder = Int(EcosysParam(\"founder_account\"))\n    }\n    action {\n        createEmissionConditionParam()\n\n        var m amount map ecosystemKeys string\n        ecosystemKeys = Sprintf(\"@%vkeys\", $ecosystem_id)\n\n        if $Id > 0{\n            m = $item\n            amount = JSONDecode(m[\"amount\"])\n            if m[\"type_emission\"] == 2{\n                amount[Str($block_time)] = $Amount\n                m[\"amount\"] = amount\n            }\n            if m[\"type_withdraw\"] == 2{\n                m[\"type_withdraw\"] = $TypeWithdraw\n            }\n            DBUpdate(\"@1tokens\", $Id, m)\n        }else{\n            amount[Str($block_time)] = $Amount\n            m = {type_emission:$TypeEmission, title:$Title, amount:amount, ecosystem:$ecosystem_id, type_withdraw:$TypeWithdraw}\n            $Id = DBInsert(\"@1tokens\", m)\n            if $TypeWithdraw == 2{\n                if DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$guest}).Row(){\n                    DBUpdate(ecosystemKeys, $guest, {\"blocked\": 0})\n                }else{\n                    // create guest account\n                    var guestAccount map\n                    guestAccount = DBFind(\"@1keys\").Where({ecosystem:1, id:$guest}).Row()\n                    guestAccount[\"maxpay\"] = 0\n                    guestAccount[\"multi\"] = 0\n                    guestAccount[\"deleted\"] = 0\n                    guestAccount[\"amount\"] = 0\n                    guestAccount[\"blocked\"] = 0\n                    guestAccount[\"ecosystem\"] = $ecosystem_id\n                    DBInsert(ecosystemKeys, guestAccount)\n                }\n            }\n        }\n        DBUpdate(ecosystemKeys, $founder, {\"+amount\": $Amount})\n\n        var h map\n        h[\"sender_id\"] = 0\n        h[\"recipient_id\"] = $founder\n        h[\"amount\"] = $Amount\n        h[\"comment\"] = Sprintf(\"emission id %v\", $Id)\n        h[\"block_id\"] = $block\n        h[\"txhash\"] = $txhash\n        h[\"ecosystem\"] = $ecosystem_id\n        DBInsert(\"@1history\", h)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensEmissionTypeChange",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensEmissionTypeChange {\n    data {\n        Id int\n    }\n    conditions {\n        MainCondition()\n        $item = DBFind(\"@1tokens\").Where({id:$Id}).Row()\n        if !$item {\n            error \"Emission not found\"\n        }\n        $SINGLETIME = 1\n        $MULTI = 2\n        if $item[\"type_emission\"] != $MULTI {\n            error \"Emission type error\"\n        }\n    }\n    action {\n        DBUpdate(\"@1tokens\", $Id, {type_emission:$SINGLETIME})\n    }\n}",
            "Type": "contracts"
        }
    ]
}