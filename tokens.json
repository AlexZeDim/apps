{
    "name": "Tokens",
    "conditions": "ContractConditions(\"MainCondition\")",
    "data": [
        {
            "Name": "default_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "If(#ecosystem_id#==1){\n    MenuItem(Title:$@1emissions$, Page:@1emissions, Icon:\"fa icon-settings\")\n}",
            "Type": "menu"
        },
        {
            "Name": "tokens",
            "Columns": "[\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"ecosystem\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"title\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"amount\",\n        \"type\": \"json\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"type\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"limited\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1EmissionEdit\\\")\",\n        \"name\": \"type_withdraw\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "emission_edit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\nSetVar(this_page,\"@1voting_create\")\n\nIf(GetVar(count_type_voters)==\"\"){\n    SetVar(count_type_voters,0)\n}\n\nForm(){\n    Div(list-group-item){\n        Div(row mb-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1vote_count_type)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                If(GetVar(count_type_voters)==0){\n                    Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"count_type_voters=0\", Class: btn btn-primary disabled mr-lg).Popup(50, $@1new_voting$)\n                    Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"count_type_voters=1\", Class: btn btn-primary).Popup(50, $@1new_voting$)                \n                    \n                }.ElseIf(GetVar(count_type_voters)==1){\n                    Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"count_type_voters=0\", Class: btn btn-primary mr-lg).Popup(50, $@1new_voting$)\n                    Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"count_type_voters=1\", Class: btn btn-primary disabled).Popup(50, $@1new_voting$)\n                }\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(For:type_decision){\n                    LangRes(@1decision)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                If(GetVar(count_type_voters)==0){\n                    AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Source: procent_type_decisions)\n                    RadioGroup(Name: type_decision, Source: procent_type_decisions, NameColumn: name, ValueColumn: id)\n                }.ElseIf(GetVar(count_type_voters)==1){\n                    Data(numbers_type_decisions,\"value,name\"){\n                        3,$@1document$\n                        4,$@1database_write$\n                        5,$@1contract_run$\n                    }\n                    RadioGroup(Name: type_decision, Source: numbers_type_decisions, NameColumn: name, ValueColumn: value)\n                }.Else{\n                    Div(mt-sm text-warning){\n                        $@1please_select$ \"$@1vote_count_type$\"\n                    }\n                }\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(For: type_participants){\n                    LangRes(@1participants)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Source: type_voting_participants)\n                Select(Name: type_participants, Source: type_voting_participants, NameColumn: name, ValueColumn: id)\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row mb-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(For:voting_name){\n                    LangRes(@1name)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Name: voting_name, Value: \"New voting\")\n            }\n        }\n        Div(row mb-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(For: volume){\n                    LangRes(@1voting_volume)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Name: volume, Value: 75, Type: number)\n                Div(m0 h6 text-muted){\n                    If(GetVar(count_type_voters)==0){\n                        $@1voting_volume_desc$\n                    }.ElseIf(GetVar(count_type_voters)==1){\n                        $@1voting_volume_number_desc$\n                    }\n                }\n            }\n        }\n        SetVar(hide_quorum,)\n        If(GetVar(count_type_voters)==1){\n            SetVar(hide_quorum,\"hidden\")\n        }\n        Div(row mb-sm #hide_quorum#){\n            Div(col-md-3 mt-sm text-right){\n                Label(For: quorum){\n                    LangRes(@1voting_quorum)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Name: quorum, Value: 51, Type: number)\n                Div(m0 h6 text-muted){\n                    $@1voting_quorum_desc$\n                }\n            }\n        }\n        Div(row mb-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(For: start_date){\n                    LangRes(@1date_start)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Div(row){\n                    Div(col-md-6){\n                        Input(Name: start_date, Type: date)\n                    }\n                    Div(col-md-6){\n                        Input(Name: start_time, Type: time)\n                    }\n                }\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(For: end_date){\n                    LangRes(@1date_end)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Div(row){\n                    Div(col-md-6){\n                        Input(Name: end_date, Type: date)\n                    }\n                    Div(col-md-6){\n                        Input(Name: end_time, Type: time)\n                    }\n                }\n            }\n        }\n    }    \n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(For:description){\n                    LangRes(@1description)\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Name: description, Type: textarea)\n            }\n        }\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1voting_list)\n            Input(Name: voting_type, Type: hidden, Value: 1)\n            Button(Body: LangRes(@1create), Class: btn btn-primary pull-right, Page: @1voting_list, Contract: @1VotingCreate, Params: \"count_type_voters=#count_type_voters#\")\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "emissions",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\nSetTitle($@1voting_list$)\n\nIf(GetVar(Search)){\n    SetVar(Where,{ecosystem:#ecosystem_id#, \"voting->name\":{\"$like\":#Search#}, deleted:0})\n}.Else{\n    SetVar(Where,{ecosystem:#ecosystem_id#, deleted:0}).(Search,)\n}\n\nSetVar(WAITING,1).(VALID,2).(STARTED,3).(FINISHED,4).(INVALID,5)\nSetVar(this_page,\"@1voting_list\")\n\nAddToolButton(Title: $@1templates_list$, Page: @1voting_templates_list, Icon: fa icon-pin)\nAddToolButton(Title: $@1create$, Page: @1voting_create, Icon: icon-plus).Popup(50, $@1new_voting$)\n\nDiv(content-wrapper){\n    If(EcosysParam(Name:founder_account)==#key_id#){\n        Button(Body: $@1update_votings_statuses$, Class: btn btn-default, Page: #this_page#, Contract: @1VotingStatusUpdate)\n    }\n    SetVar(table,\"@1votings\").(per_page,20)\n    Div(mt){\n        Include(@1basic_paginator)\n    }\n    DBFind(#table#,src_voting).Where(#Where#).Order({id:-1}).Offset(#paginator_offset#).Limit(#per_page#).Columns(\"id,voting->name,voting->type,voting->type_decision,voting->type_participants,flags->success,flags->decision,flags->full_data,progress->percent_success,progress->number_participants,creator->member_id,creator->member_name,date_started,date_ended,deleted,status,voting->count_type_voters,voting->volume,progress->number_voters\").Count(count_votings).Custom(_id){\n        Span(Class: h5, Body: #id#)\n    }.Custom(_name){\n        LinkPage(Page: @1voting_view, PageParams: \"vID=#id#\"){\n            Span(Class: h5 text-bold m0, Body: #voting.name#)\n        }\n    }.Custom(_subject){\n        SetVar(decision, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n        Div(h6 m0){\n            If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\n                #decision#\n            }.Else{\n                If(#voting.type_decision# == 1){\n                    SetVar(link_page,\"@1voting_decision_candidates\")\n                }.ElseIf(#voting.type_decision# == 2){\n                    SetVar(link_page,\"@1voting_decision_election\")\n                }.ElseIf(#voting.type_decision# == 3){\n                    SetVar(link_page,\"@1voting_decision_document\")\n                }.ElseIf(#voting.type_decision# == 4){\n                    SetVar(link_page,\"@1voting_decision_formal\")\n                }.ElseIf(#voting.type_decision# == 5){\n                    SetVar(link_page,\"@1voting_decision_contract\")\n                }\n                Button(Body: #decision#, Class: btn btn-link, Page: #link_page#, PageParams: \"vID=#id#,back_page=#this_page#\").Popup(50, $@1subject_voting$)\n            }\n        }\n    }.Custom(_participants){\n        SetVar(participants, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #voting.type_participants#))\n        Div(h6 m0){\n            If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\n                #participants#\n            }.Else{\n                Button(Page: @1voting_invite, PageParams: \"vID=#id#,back_page=#this_page#\", Class: btn btn-link p0 text-bold, Body: #participants#).Popup(45, $@1participants_add$)\n            }\n        }\n    }.Custom(_creator){\n        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#creator.member_id#\", Body: #creator.member_name#)\n    }.Custom(_date){\n        SetVar(started_class,text-center text-bold h5 m0).(finished_class,text-center text-bold h5 m0)\n        If(Or(#status#==#STARTED#,#status#==#FINISHED#)){\n            SetVar(started_class,text-center text-muted h5 m0)\n        }\n        If(#status#==#FINISHED#){\n            SetVar(finished_class,text-center text-muted h5 m0)\n        }\n        P(Class: #started_class#, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\n        P(Class: #finished_class#, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\n    }.Custom(_type){\n        Div(h6 m0 p0){\n            AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #voting.type#) /\n            If(#voting.count_type_voters#==1){\n                $@1number_votes$\n            }.Else{\n                $@1percent_votes$\n            }\n        }\n    }.Custom(_progress){\n        Div(text-center h5 text-bold){\n            If(#voting.count_type_voters#==1){\n                #progress.number_voters# / #progress.number_participants#\n            }.Else{\n                #progress.percent_success# %\n            }\n        }\n    }.Custom(_decision){\n        Div(text-center){\n            If(#flags.decision# == 0){\n                If(And(#status#==#FINISHED#,#creator.member_id#==#key_id#)){\n                    Button(Body: LangRes(@1decision), Class: btn btn-primary, Contract: @1VotingDecisionCheck, Params: \"votingID=#id#\", Page: #this_page#)\n                }.Else{\n                    Div(text-muted){LangRes(@1no)}\n                }\n            }.ElseIf(#flags.decision# == -2){\n                Div(text-muted){LangRes(@1not_enough_votes)}\n            }.ElseIf(#flags.decision# == 1){\n                Div(text-success){LangRes(@1accepted)}\n            }.ElseIf(#flags.decision# == -1){\n                Div(text-danger){LangRes(@1rejected)}\n            }\n        }\n    }.Custom(_status){\n        SetVar(status_class, AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses_classes, Index:#status#))\n        Div(text-center #status_class#){\n            If(#status#==#STARTED#){\n                Button(Class: btn btn-link icon-eye, Page: @1voting_view, PageParams: \"vID=#id#\")\n            }.Else{\n                AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses, Index:#status#)\n            }\n        }\n    }.Custom(_actions){\n        Div(text-right){\n            If(And(#creator.member_id#==#key_id#,#status#==#INVALID#)){\n                Button(Class: fa fa-trash btn btn-default, Contract: @1VotingDelete, Params: \"votingID=#id#\", Page: #this_page#).Alert(Text: \"$@1want_delete_voting$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n            }\n        }\n    }\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(@1voting)\n                        }\n                        Input(Name: Search, Value: #Search#)\n                        Div(input-group-btn){\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: #this_page#, PageParams: \"Search=Val(Search)\")\n                        }\n                    }\n                }\n                Div(col-md-12){\n                    If(#count_votings#>0){\n                        Div(table-responsive){\n                            Table(src_voting, \"$@1voting$=_name,$@1type$=_type,$@1subject_voting$=_subject,$@1participants$=_participants,$@1date_start$ / $@1date_end$=_date,$@1creator$=_creator,$@1progress$=_progress,$@1decision$=_decision,$@1status$=_status,=_actions\")\n                        }\n                    }.Else{\n                        Div(text-center h3 text-muted){\n                            $@1votings_not_found$\n                        }\n                    }\n                }\n            }\n            If(GetVar(Search)){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $@1view_all$, Class: btn btn-default, Page: #this_page#)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "BufferManager",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract BufferManager {\n    data {\n        Action string\n        Key string\n        Val string \"optional\"\n    }\n    \n    func decodeArray(s string) array {\n        var ar array\n        if HasPrefix($buf[\"value\"], \"[\") {\n            ar = JSONDecode($buf[\"value\"])\n        }\n        return ar\n    }\n    \n    action {\n        $emptyVal = JSONEncode(\"\")\n        $buf = DBFind(\"@1buffer_data\").Where({ecosystem:$ecosystem_id, key:$Key, member_id:$key_id}).Row()\n        if !$buf {\n            var buf map, id int\n            id = DBInsert(\"@1buffer_data\", {ecosystem:$ecosystem_id, key:$Key, value:$emptyVal, member_id:$key_id})\n            buf[\"id\"] = Str(id)\n            buf[\"value\"] = \"\"\n            buf[\"member_id\"] = Str($key_id)\n            buf[\"key\"] = Str($Key)\n            $buf = buf\n        }\n        var id int\n        id = Int($buf[\"id\"])\n        if $Action == \"clean\" {\n            DBUpdate(\"@1buffer_data\", id, {value:$emptyVal})\n        }\n        if $Action == \"set\" {\n            DBUpdate(\"@1buffer_data\", id, {value:$Val})\n        }\n        if $Action == \"array_add_value\" {\n            var ar array enc string\n            ar = decodeArray($buf[\"value\"])\n            ar = Append(ar, $Val)\n            enc = JSONEncode(ar)\n            DBUpdate(\"@1buffer_data\", id, {value:enc})\n        }\n        if $Action == \"array_remove_value\" {\n            var ar arNew array i int enc string\n            ar = decodeArray($buf[\"value\"])\n            while i < Len(ar){\n                if ar[i] != $Val{\n                    arNew = Append(arNew, ar[i])\n                }\n                i = i + 1\n            }\n            enc = JSONEncode(arNew)\n            DBUpdate(\"@1buffer_data\", id, {value:enc})\n        }\n    }\n}\n",
            "Type": "contracts"
        }
    ]
}