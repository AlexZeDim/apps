{
    "blocks": [],
    "contracts": [
        {
            "Name": "Tokens_Account_Add",
            "Value": "contract Tokens_Account_Add {\n    data {\n\t\taccount_type int\n\t\tmember_id string\n    }\n\n    conditions {\n\n    }\n\n    action {\n\n        $ret_member = DBFind(\"members\").Where(\"id = $\", $member_id).Order(\"id\")\n        var vals_member map\n        vals_member = $ret_member[0]\n\n        DBInsert(\"accounts\", \"member_id,member_name,member_avatar,account_type\", $member_id, vals_member[\"member_name\"], vals_member[\"avatar\"], $account_type)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Tokens_Account_Close",
            "Value": "contract Tokens_Account_Close {\n    data {\n\t    row_id int\n    }\n\n    conditions {\n\n    }\n\n    action {\n        DBUpdate(\"accounts\", $row_id, \"onhold\", 1)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Tokens_AdditionalEmission",
            "Value": "contract Tokens_AdditionalEmission {\n    data {\n\t\tamount money\n    }\n\n    conditions {\n    }\n\n    action {\n\n        $ret_tokens = DBFind(\"accounts_tokens\").Columns(\"id,amount\").Where(\"delete=$\", 0).Order(\"id\")\n        var vals_tokens map\n        vals_tokens = $ret_tokens[0]\n\n        $ret_recipient = DBFind(\"accounts\").Columns(\"id,amount\").Where(\"onhold=$ and account_type=$\", 0, 4).Order(\"id\")\n        var vals_recipient map\n        vals_recipient = $ret_recipient[0]\n\n        if ( (Int(vals_recipient[\"id\"]) > 0) && (Int(vals_tokens[\"id\"]) > 0) ){\n            $recipient_amount = Money(vals_recipient[\"amount\"])\n            $recipient_amount = $recipient_amount + $amount \n\n            $tokens_amount = Money(vals_tokens[\"amount\"])\n            $tokens_amount = $tokens_amount + $amount \n\n            DBUpdate(\"accounts_tokens\", Int(vals_tokens[\"id\"]), \"amount\", $tokens_amount)\n            DBUpdate(\"accounts\", Int(vals_recipient[\"id\"]), \"amount\", $recipient_amount)\n        }\n\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Tokens_Close",
            "Value": "contract Tokens_Close {\n    data {\n\t    tokens_id int\n    }\n\n    conditions {\n\n    }\n\n    action {\n        $ret_accounts = DBFind(\"accounts\").Columns(\"id\").Where(\"onhold = $\", 0).Order(\"id\")\n\n        $len_accounts = Len($ret_accounts)\n        $i_accounts = 0\n        while($i_accounts < $len_accounts)\n        {\n            var vals_accounts map\n            vals_accounts = $ret_accounts[$i_accounts] \n\n            Tokens_Account_Close(\"row_id\", Int(vals_accounts[\"id\"]))\n\n            $i_accounts = $i_accounts + 1\n        } \n\n        DBUpdate(\"accounts_tokens\", $tokens_id, \"delete\", 1) \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Tokens_Emission",
            "Value": "contract Tokens_Emission {\n    data {\n\t    tokens_name string\n\t\temission_type int\n\t\tflag_rollback int\n\t\tis_expiration int\n\t\texpiration_date string \"date\"\n\t\t\n\t\tamount money\n    }\n\n    conditions {\n\n    }\n\n    action {\n\t    if ($is_expiration == 0)\n\t    {\n\t\t    DBInsert(\"accounts_tokens\", \"name_tokens,timestamp date_create,type_emission,flag_rollback_tokens,amount,delete\", \n                    $tokens_name, $block_time, $emission_type, $flag_rollback, $amount, 0)\n\t    }\n\t\telse\n\t\t{\n\t\t    DBInsert(\"accounts_tokens\", \"name_tokens,timestamp date_create,type_emission,flag_rollback_tokens,amount,delete,date_expiration\", \n                    $tokens_name, $block_time, $emission_type, $flag_rollback, $amount, 0, $expiration_date)\n\t\t}\n\n\t\tDBInsert(\"accounts\", \"account_type,amount\", 4, $amount)\n\t\tDBInsert(\"accounts\", \"account_type\", 5)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Tokens_Rollback",
            "Value": "contract Tokens_Rollback {\n    data {\n\t\tsender_id int\n\t\tamount money\n    }\n\n    conditions {\n\n    }\n\n    action {\n\n        $ret_sender = DBFind(\"accounts\").Columns(\"id,amount\").Where(\"onhold=$ and id=$\", 0, $sender_id).Order(\"id\")\n        var vals_sender map\n        vals_sender = $ret_sender[0]\n\n        $ret_recipient = DBFind(\"accounts\").Columns(\"id,amount\").Where(\"onhold=$ and account_type=$\", 0, 5).Order(\"id\")\n        var vals_recipient map\n        vals_recipient = $ret_recipient[0]\n\n\n        if ( (Int(vals_sender[\"id\"]) > 0) && (Int(vals_recipient[\"id\"]) > 0) ){\n            if ( Money(vals_sender[\"amount\"]) > $amount){\n\n                $sender_amount    = Money(vals_sender[\"amount\"])\n                $sender_amount    = $sender_amount - $amount \n\n                $sender_recipient = Money(vals_recipient[\"amount\"])\n                $sender_recipient = $sender_recipient + $amount \n\n                DBUpdate(\"accounts\", Int(vals_sender[\"id\"]), \"amount\", $sender_amount)\n                DBUpdate(\"accounts\", Int(vals_recipient[\"id\"]), \"amount\", $sender_recipient)\n            }\n        }\n\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Tokens_Tranche",
            "Value": "contract Tokens_Tranche {\n    data {\n\t\trecipient_id int\n\t\tamount money\n    }\n\n    conditions {\n\n    }\n\n    action {\n\n        $ret_sender = DBFind(\"accounts\").Columns(\"id,amount\").Where(\"onhold=$ and account_type=$\", 0, 4).Order(\"id\")\n        var vals_sender map\n        vals_sender = $ret_sender[0]\n\n        $ret_recipient = DBFind(\"accounts\").Columns(\"id,amount\").Where(\"onhold=$ and id=$\", 0, $recipient_id).Order(\"id\")\n        var vals_recipient map\n        vals_recipient = $ret_recipient[0]\n\n\n        if ( (Int(vals_sender[\"id\"]) > 0) && (Int(vals_recipient[\"id\"]) > 0) ){\n            if ( Money(vals_sender[\"amount\"]) > $amount){\n\n                $sender_amount    = Money(vals_sender[\"amount\"])\n                $sender_amount    = $sender_amount - $amount \n\n                $sender_recipient = Money(vals_recipient[\"amount\"])\n                $sender_recipient = $sender_recipient + $amount \n\n                DBUpdate(\"accounts\", Int(vals_sender[\"id\"]), \"amount\", $sender_amount)\n                DBUpdate(\"accounts\", Int(vals_recipient[\"id\"]), \"amount\", $sender_recipient)\n            }\n        }\n\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Tokens_Transfer",
            "Value": "contract Tokens_Transfer {\n    data {\n        sender_id int\n\t\trecipient_id int\n\t\tamount money\n    }\n\n    conditions {\n\n    }\n\n    action {\n\n        $ret_sender = DBFind(\"accounts\").Columns(\"id,amount\").Where(\"onhold=$ and id=$\", 0, $sender_id).Order(\"id\")\n        var vals_sender map\n        vals_sender = $ret_sender[0]\n\n        $ret_recipient = DBFind(\"accounts\").Columns(\"id,amount\").Where(\"onhold=$ and id=$\", 0, $recipient_id).Order(\"id\")\n        var vals_recipient map\n        vals_recipient = $ret_recipient[0]\n\n\n        if ( (Int(vals_sender[\"id\"]) > 0) && (Int(vals_recipient[\"id\"]) > 0) ){\n            if ( Money(vals_sender[\"amount\"]) > $amount){\n\n                $sender_amount    = Money(vals_sender[\"amount\"])\n                $sender_amount    = $sender_amount - $amount \n\n                $sender_recipient = Money(vals_recipient[\"amount\"])\n                $sender_recipient = $sender_recipient + $amount \n\n                DBUpdate(\"accounts\", Int(vals_sender[\"id\"]), \"amount\", $sender_amount)\n                DBUpdate(\"accounts\", Int(vals_recipient[\"id\"]), \"amount\", $sender_recipient)\n            }\n        }\n\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [],
    "languages": [],
    "menus": [
        {
            "Name": "default_menu",
            "Value": "MenuItem(Title:$accounts$, Page:tokens_accounts_list, Icon:\"fa icon-wallet\")",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tokens_menu",
            "Value": "MenuItem(Title:$accounts$, Page:tokens_accounts_list, Icon:\"fa icon-wallet\")\r\nMenuItem(Title:$tokens$, Page:tokens_list, Icon:\"fa icon-energy\")\r\nMenuItem(Title:$tranche$, Page:tokens_tranche, Icon:\"fa fa-mail-forward\")\r\nMenuItem(Title:$tokens_transfer$, Page:tokens_transfer, Icon:\"fa fa-exchange\")  \r\nMenuItem(Title:$tokens_rollback$, Page:tokens_rollback, Icon:\"fa icon-trash\")",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        }
    ],
    "pages": [
        {
            "Name": "tokens_accounts_add",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($create_account$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tLinkPage($accounts$, tokens_accounts_list)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tSpan(Class: text-muted, Body: $create_account$)\r\n\t}\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-3)\r\n        Div(Class: col-md-6){\r\n\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(create_account))\r\n                Form(){  \r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: member_id){\r\n                                    Span(Body: LangRes(member))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                DBFind(Name: members, Source: source_member).Custom(custom_username){\r\n                                    #member_name# ( Address(#id#) )\r\n                                }\r\n                                Select(Name: member_id, Source: source_member, NameColumn: custom_username, ValueColumn: id)\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: account_type){\r\n                                    Span(Body: LangRes(type))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                EcosysParam(Name: tokens_accounts_type, Source: src_accounts_type)\r\n                                Select(Name: account_type, Source: src_accounts_type, NameColumn: name, ValueColumn: id)\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: panel-footer clearfix){\r\n                        Div(Class: pull-right){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: tokens_accounts_list)\r\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: tokens_accounts_list, Contract: Tokens_Account_Add).Alert(Text: $want_create_new_account$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        Div(Class: col-md-3)\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "tokens_menu"
        },
        {
            "Name": "tokens_accounts_list",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($accounts$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: LangRes(accounts))\r\n\t}\r\n\r\n    If(GetVar(isSearch) == 1){\r\n        SetVar(Name: v_Where, Value: \"member_name='#v_Search#'\")\r\n    }.Else{\r\n        SetVar(Name: v_Where, Value: \"id>0\")\r\n        SetVar(Name: v_Search, Value: \"\")\r\n    }\r\n\r\n    DBFind(Name: accounts, Source: src_accounts).Custom(custom_id){\r\n        If(#onhold# == 0){\r\n            Span(Body: #id#)  \r\n        }.Else{\r\n            Span(Class: text-muted, Body: #id#)\r\n        }\r\n    }.Custom(custom_member){\r\n\t\tIf(And(#account_type#!=4,#account_type#!=5)){\r\n\t\t\tIf(#onhold# == 0){\r\n\t\t\t\tButton(Class: btn btn-link, Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\r\n\t\t\t\t\tImage(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\r\n\t\t\t\t\tSpan(Class: h5 text-bold, Body: #member_name#)\r\n\t\t\t\t}\r\n\t\t\t}.Else{\r\n\t\t\t\tDiv(){\r\n\t\t\t\t\tImage(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\r\n\t\t\t\t\tSpan(Class: h5 text-muted, Body: #member_name#)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }.Custom(custom_address){\r\n        If(And(#account_type#!=4,#account_type#!=5)){\r\n            If(#onhold# == 0){\r\n                Span(Body: Address(#member_id#))\r\n            }.Else{\r\n                Span(Class: text-muted, Body: Address(#member_id#))\r\n            }\r\n        }\r\n\t}.Custom(custom_type){\r\n        If(#onhold# == 0){\r\n            Span(Body: EcosysParam(Name: tokens_accounts_systype, Index: #account_type#))\r\n        }.Else{\r\n            Span(Class: text-muted, Body: EcosysParam(Name: tokens_accounts_systype, Index: #account_type#))\r\n        }\r\n    }.Custom(custom_status){\r\n        If(#onhold# == 0){\r\n            Span(Body: LangRes(active))\r\n        }.Else{\r\n            Span(Class: text-muted, Body: LangRes(onhold))\r\n        }\r\n\t}.Custom(custom_amount){\r\n        If(#onhold# == 0){\r\n            Span(Body: #amount#)\r\n        }.Else{\r\n            Span(Class: text-muted, Body: #amount#)\r\n        }\r\n    }.Custom(actions){\r\n        If(And(#account_type#!=4,#account_type#!=5)){\r\n            If(#onhold# == 0){\r\n                Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Tokens_Account_Close, Params: \"row_id=#id#\", Page: tokens_accounts_list)\r\n            }\r\n        }\r\n    }.Where(#v_Where#).Order(\"onhold ASC, account_type DESC, id ASC\")\r\n\r\n    Div(Class: panel panel-primary){\r\n        Form(){\r\n\r\n            Div(Class: list-group-item){\r\n                Div(Class: row df f-valign){\r\n                    Div(Class: col-md-1 mt-sm text-right){\r\n                        Label(For: Search){\r\n                            Span(Body: LangRes(member))\r\n                        }\r\n                    }\r\n                    Div(Class: col-md-11 mc-sm){\r\n                        Div(Class: input-group){\r\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\r\n                            Div(Class: input-group-btn){\r\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: tokens_accounts_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\r\n                            }\r\n                        }\r\n                    }\r\n                }  \r\n            }\r\n\r\n            Div(Class: list-group-item){ \r\n                Table(Source: src_accounts, Columns: \"$id$=custom_id,$member$=custom_member,$member_id$=custom_address,$type$=custom_type,$status$=custom_status,$amount$=custom_amount,$actions$=actions\")\r\n                If(GetVar(isSearch) == 1){\r\n                    Div(Class: text-center){  \r\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: tokens_accounts_list, PageParams: \"isSearch=0\")\r\n                    }\r\n                }\r\n            }\r\n\r\n            Div(Class: panel-footer clearfix){\r\n                Div(Class: pull-right){\r\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: tokens_accounts_add)\r\n                }\r\n            }\r\n            \r\n        }           \r\n    }\r\n\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "tokens_menu"
        },
        {
            "Name": "tokens_create",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($create$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tLinkPage($tokens$, tokens_list)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tSpan(Class: text-muted, Body: $create$)\r\n\t}\r\n\r\n    If(GetVar(v_tokens_name)){\r\n    }.Else{\r\n        SetVar(v_tokens_name, \"\")\r\n    }\r\n    If(GetVar(v_amount)){\r\n    }.Else{\r\n        SetVar(v_amount, 1000)\r\n    }\r\n    If(GetVar(v_emission_type)){\r\n    }.Else{\r\n        SetVar(v_emission_type, 1)\r\n    }\r\n    If(GetVar(v_flag_rollback)){\r\n    }.Else{\r\n        SetVar(v_flag_rollback, 1)\r\n    }\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-3)\r\n        Div(Class: col-md-6){\r\n\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(create))\r\n                Form(){\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: tokens_name){\r\n                                    Span(Body: LangRes(name))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                Input(Class: form-control, Type: text, Name: tokens_name, Value: #v_tokens_name#)\r\n                            } \r\n                        }\r\n                    }  \r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: expiration_date){\r\n                                    Span(Body: LangRes(expiration))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                If(#is_expiration# == 1){\r\n                                    Div(Class: input-group){\r\n                                        Input(Class: form-control hidden, Type:text, Name:is_expiration, Value: \"1\")\r\n                                        Input(Class: form-control, Type:date, Name: expiration_date, Value: Now(\"YYYY-MM-DD\", 100 days))\r\n                                        Div(Class: input-group-btn){\r\n                                            Button(Body: Em(Class: fa fa-minus), Class: btn btn-default, Page:tokens_create, PageParams:\"is_expiration=0,v_tokens_name=Val(tokens_name),v_emission_type=Val(emission_type),v_flag_rollback=Val(flag_rollback),v_amount=Val(amount)\")\r\n                                        }\r\n                                    }\r\n                                }.Else{\r\n                                    Div(Class: input-group){\r\n                                        Input(Class: form-control hidden, Type:text, Name:is_expiration, Value: \"0\")\r\n                                        Input(Class: form-control, Placeholder:text, Type:text, Name:expiration_date, Value: unlimited)\r\n                                        Div(Class: input-group-btn){\r\n                                            Button(Body: Em(Class: fa fa-plus), Class: btn btn-default, Page:tokens_create, PageParams:\"is_expiration=1,v_tokens_name=Val(tokens_name),v_emission_type=Val(emission_type),v_flag_rollback=Val(flag_rollback),v_amount=Val(amount)\")\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: emission_type){\r\n                                    Span(Body: LangRes(emission))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                EcosysParam(Name: tokens_type_emission, Source: src_type_emission)\r\n                                Select(Name: emission_type, Source: src_type_emission, NameColumn: name, ValueColumn: id, Value: #v_emission_type#)\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: flag_rollback){\r\n                                    Span(Body: LangRes(rollback))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                EcosysParam(Name: tokens_rollback_tokens, Source: src_rollback_tokens)\r\n                                Select(Name: flag_rollback, Source: src_rollback_tokens, NameColumn: name, ValueColumn: id, Value: #v_flag_rollback#)\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: amount){\r\n                                    Span(Body: LangRes(amount))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                Input(Class: form-control, Placeholder: 0, Type: Number, Name: amount, Value: #v_amount#)\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: panel-footer clearfix){\r\n                        Div(Class: pull-right){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: tokens_list)\r\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: tokens_list, Contract: Tokens_Emission).Alert(Text: $want_release_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        Div(Class: col-md-3)\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "tokens_menu"
        },
        {
            "Name": "tokens_emission",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($emission$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tLinkPage($tokens$, tokens_list)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tSpan(Class: text-muted, Body: $emission$)\r\n\t}\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-3)\r\n        Div(Class: col-md-6){\r\n\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(emission))\r\n                Form(){\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(Body: LangRes(account))\r\n                            }\r\n                            Div(Class: col-md-9 mt-sm text-left){\r\n\t\t\t\t\t\t\t\tDBFind(Name: accounts, Source: source_sender).Where(\"onhold=0 and account_type=4\").Vars(prefix)\r\n                                If(#prefix_account_type# > 0){\r\n                                    Span(Class: h5, Body: EcosysParam(Name: tokens_accounts_systype, Index: #prefix_account_type#))\r\n                                }.Else{\r\n                                    Span(Class: h5 text-danger, Body: $emission_account_not_found$)\r\n                                }\r\n                            } \r\n                        }\r\n\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(Body: LangRes(available))\r\n                            }\r\n                            Div(Class: col-md-9 mt-sm text-left){\r\n                                If(#prefix_amount# > 0){\r\n                                    Span(Class: h5, Body: #prefix_amount#)\r\n                                }.Else{\r\n                                    Span(Class: h5, Body: 0)\r\n                                }\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: amount){\r\n                                    Span(Body: LangRes(amount))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                Input(Class: form-control, Placeholder: 0, Type: Number, Name: amount)\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: panel-footer clearfix){\r\n                        Div(Class: pull-right){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: tokens_list)\r\n                            If(#prefix_amount# > 0){\r\n                                Button(Body: LangRes(emission), Class: btn btn-primary, Page: tokens_list, Contract: Tokens_AdditionalEmission).Alert(Text: $want_make_emission$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        Div(Class: col-md-3)\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "tokens_menu"
        },
        {
            "Name": "tokens_list",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($tokens$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: LangRes(tokens))\r\n\t}\r\n\r\n    If(GetVar(isSearch) == 1){\r\n        SetVar(Name: v_Where, Value: \"name_tokens='#v_Search#'\")\r\n    }.Else{\r\n        SetVar(Name: v_Where, Value: \"id>0\")\r\n        SetVar(Name: v_Search, Value: \"\")\r\n    }\r\n\r\n    DBFind(Name: accounts_tokens, Source: src_accounts_tokens).Custom(custom_id){\r\n        If(#delete# == 0){\r\n            Span(Body: #id#)  \r\n        }.Else{\r\n            Span(Class: text-muted, Body: #id#)\r\n        }\r\n    }.Custom(custom_name_tokens){\r\n        If(#delete# == 0){\r\n            Span(Body: #name_tokens#)  \r\n        }.Else{\r\n            Span(Class: text-muted, Body: #name_tokens#)\r\n        }\r\n    }.Custom(custom_rollback){\r\n        If(#delete# == 0){\r\n            Span(Body: EcosysParam(Name: tokens_rollback_tokens, Index: #flag_rollback_tokens#))\r\n        }.Else{\r\n            Span(Class: text-muted, Body: EcosysParam(Name: tokens_rollback_tokens, Index: #flag_rollback_tokens#))\r\n        }\r\n    }.Custom(custom_date){\r\n        If(#delete# == 0){\r\n            Div(Body: DateTime(DateTime: #date_create#, Format: \"DD.MM.YYYY HH:MI\"))\r\n            If(#date_expiration# == NULL){\r\n                Div(Body: unlimited)   \r\n            }.Else{\r\n                Div(Body: DateTime(DateTime: #date_expiration#, Format: \"DD.MM.YYYY HH:MI\"))\r\n            }\r\n        }.Else{\r\n            Div(Class: text-muted, Body: DateTime(DateTime: #date_create#, Format: \"DD.MM.YYYY HH:MI\"))\r\n            If(#date_expiration# == NULL){\r\n                Div(Class: text-muted, Body: unlimited)  \r\n            }.Else{\r\n                Div(Class: text-muted, Body: DateTime(DateTime: #date_expiration#, Format: \"DD.MM.YYYY HH:MI\"))\r\n            }\r\n        }\r\n    }.Custom(custom_status){\r\n        If(#delete# == 0){\r\n            Span(Body: LangRes(active))\r\n        }.Else{\r\n            Span(Class: text-muted, Body: LangRes(onhold))\r\n        }\r\n    }.Custom(custom_emission){\r\n        If(#delete# == 0){\r\n            If(#type_emission# == 2){\r\n                Button(Body: LangRes(emission), Class: btn btn-primary, Page: tokens_emission)\r\n            }.Else{\r\n                Span(Body: EcosysParam(Name: tokens_type_emission, Index: #type_emission#))\r\n            }  \r\n        }.Else{\r\n            Span(Class: text-muted, Body: EcosysParam(Name: tokens_type_emission, Index: #type_emission#))\r\n        }\r\n    }.Custom(custom_amount){\r\n        If(#delete# == 0){\r\n            Span(Body: #amount#)\r\n        }.Else{\r\n            Span(Class: text-muted, Body: #amount#)\r\n        }\r\n    }.Custom(actions){\r\n        If(#delete# == 0){\r\n            Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Tokens_Close, Params: \"tokens_id=#id#\", Page: tokens_list)\r\n        }\r\n    }.Where(#v_Where#).Order(\"delete ASC, id ASC\")\r\n\r\n    Div(Class: panel panel-primary){\r\n        Form(){\r\n            Div(Class: list-group-item){\r\n                Div(Class: row df f-valign){\r\n                    Div(Class: col-md-1 mt-sm text-right){\r\n                        Label(For: Search){\r\n                            Span(Body: LangRes(name))\r\n                        }\r\n                    }\r\n                    Div(Class: col-md-11 mc-sm){\r\n                        Div(Class: input-group){\r\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\r\n                            Div(Class: input-group-btn){\r\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: tokens_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\r\n                            }\r\n                        }\r\n                    }\r\n                }  \r\n            }\r\n\r\n            Div(Class: list-group-item){ \r\n                Table(Source: src_accounts_tokens, Columns: \"$id$=custom_id,$name$=custom_name_tokens,$rollback$=custom_rollback,$emission$=custom_emission,$created$ / $expiration$=custom_date,$status$=custom_status,$amount$=custom_amount,$actions$=actions\")\r\n                If(GetVar(isSearch) == 1){\r\n                    Div(Class: text-center){  \r\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: tokens_list, PageParams: \"isSearch=0\")\r\n                    }\r\n                }\r\n            }\r\n\r\n            Div(Class: panel-footer clearfix){\r\n                Div(Class: pull-right){\r\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: tokens_create)\r\n                }\r\n            }\r\n            \r\n        }           \r\n    }\r\n\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "tokens_menu"
        },
        {
            "Name": "tokens_rollback",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($tokens_rollback$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: LangRes(tokens_rollback))\r\n\t}\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-3)\r\n        Div(Class: col-md-6){\r\n\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(tokens_rollback))\r\n                Form(){\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: recipient_id){\r\n                                    Span(Body: LangRes(sender_account))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mb-sm text-left){\r\n                                DBFind(Name: accounts, Source: source_sender).Custom(custom_username){\r\n\t\t\t\t\t\t\t\t\tid: #id# ( EcosysParam(Name: tokens_accounts_systype, Index: #account_type#) ) - #member_name# ( Address(#member_id#) )  \r\n                                }.Where(\"onhold=0 and account_type<>4 and account_type<>5\")\r\n                                Select(Name: sender_id, Source: source_sender, NameColumn: custom_username, ValueColumn: id)\r\n                            } \r\n                        }\r\n                    }\r\n\r\n\t\t\t\t\tDBFind(Name: accounts, Source: source_recipient).Where(\"onhold=0 and account_type=5\").Vars(prefix)\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(Body: LangRes(recipient_account))\r\n                            }\r\n                            Div(Class: col-md-9 mt-sm text-left){\r\n                                If(#prefix_account_type# > 0){\r\n                                    Span(Class: h5, Body: EcosysParam(Name: tokens_accounts_systype, Index: #prefix_account_type#))\r\n                                }.Else{\r\n                                    Span(Class: h5 text-danger, Body: $trash_account_not_found$)\r\n                                }\r\n                            } \r\n                        }\r\n\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: amount){\r\n                                    Span(Body: LangRes(amount))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                Input(Class: form-control, Placeholder: 0, Type: Number, Name: amount)\r\n                            } \r\n                        }\r\n                    }\r\n\r\n\r\n                    Div(Class: panel-footer clearfix){\r\n                        Div(Class: pull-right){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: tokens_accounts_list)\r\n                            If(#prefix_account_type# > 0){\r\n                                Button(Body: LangRes(rollback), Class: btn btn-primary, Page: tokens_accounts_list, Contract: Tokens_Rollback).Alert(Text: $want_rollback_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        Div(Class: col-md-3)\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "tokens_menu"
        },
        {
            "Name": "tokens_tranche",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($tranche$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: LangRes(tranche))\r\n\t}\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-3)\r\n        Div(Class: col-md-6){\r\n\r\n            DBFind(Name: accounts, Source: source_sender).Where(\"onhold=0 and account_type=4\").Vars(prefix)\r\n\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(tranche))\r\n                Form(){\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(Body: LangRes(sender_account))\r\n                            }\r\n                            Div(Class: col-md-9 mt-sm text-left){\r\n                                If(#prefix_account_type# > 0){\r\n                                    Span(Class: h5, Body: EcosysParam(Name: tokens_accounts_systype, Index: #prefix_account_type#))\r\n                                }.Else{\r\n                                    Span(Class: h5 text-danger, Body: $emission_account_not_found$)\r\n                                }\r\n                            } \r\n                        }\r\n\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(Body: LangRes(available))\r\n                            }\r\n                            Div(Class: col-md-9 mt-sm text-left){\r\n                                If(#prefix_amount# > 0){\r\n                                    Span(Class: h5, Body: #prefix_amount#)\r\n                                }.Else{\r\n                                    Span(Class: h5, Body: 0)\r\n                                }\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: recipient_id){\r\n                                    Span(Body: LangRes(recipient_account))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mb-sm text-left){\r\n                                DBFind(Name: accounts, Source: source_recipient).Custom(custom_username){\r\n                                    Span(Class: h4 text-bold, Body: id: #id# ( EcosysParam(Name: tokens_accounts_systype, Index: #account_type#) ) - #member_name# ( Address(#member_id#) ) ) \r\n                                }.Where(\"onhold=0 and account_type<>4 and account_type<>5\")\r\n                                Select(Name: recipient_id, Source: source_recipient, NameColumn: custom_username, ValueColumn: id)\r\n                            } \r\n                        }\r\n\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: amount){\r\n                                    Span(Body: LangRes(amount))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                Input(Class: form-control, Placeholder: 0, Type: Number, Name: amount)\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: panel-footer clearfix){\r\n                        Div(Class: pull-right){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: tokens_accounts_list)\r\n                            If(#prefix_amount# > 0){\r\n                                Button(Body: LangRes(send), Class: btn btn-primary, Page: tokens_accounts_list, Contract: Tokens_Tranche).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        Div(Class: col-md-3)\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "tokens_menu"
        },
        {
            "Name": "tokens_transfer",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($tokens_transfer$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: LangRes(tokens_transfer))\r\n\t}\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-3)\r\n        Div(Class: col-md-6){\r\n\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(tokens_transfer))\r\n                Form(){\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(Body: LangRes(my_account))\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                DBFind(Name: accounts, Source: source_sender).Custom(custom_username){\r\n                                    id: #id# ( EcosysParam(Name: tokens_accounts_systype, Index: #account_type#) ) - LangRes(available): #amount#\r\n                                }.Where(\"onhold=0 and member_id=#key_id#\")\r\n                                Select(Name: sender_id, Source: source_sender, NameColumn: custom_username, ValueColumn: id)\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: recipient_id){\r\n                                    Span(Body: LangRes(recipient_account))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mb-sm text-left){\r\n                                DBFind(Name: accounts, Source: source_recipient).Custom(custom_username){\r\n                                    id: #id# ( EcosysParam(Name: tokens_accounts_systype, Index: #account_type#) ) - #member_name# ( Address(#member_id#) ) \r\n                                }.Where(\"onhold=0 and account_type<>4 and account_type<>5\")\r\n                                Select(Name: recipient_id, Source: source_recipient, NameColumn: custom_username, ValueColumn: id)\r\n                            } \r\n                        }\r\n\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(For: amount){\r\n                                    Span(Body: LangRes(amount))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                Input(Class: form-control, Placeholder: 0, Type: Number, Name: amount)\r\n                            } \r\n                        }\r\n                    }\r\n\r\n                    Div(Class: panel-footer clearfix){\r\n                        Div(Class: pull-right){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: tokens_accounts_list)\r\n                            Button(Body: LangRes(send), Class: btn btn-primary, Page: tokens_accounts_list, Contract: Tokens_Transfer).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        Div(Class: col-md-3)\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "tokens_menu"
        }
    ],
    "parameters": [
        {
            "Name": "tokens_accounts_systype",
            "Value": "person,agency,company,sys_emission,sys_trash",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tokens_accounts_type",
            "Value": "person,agency,company",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tokens_rollback_tokens",
            "Value": "impossible,possible",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tokens_type_emission",
            "Value": "limited,unlimited",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "tables": [
        {
            "Name": "accounts",
            "Columns": "[{\"name\":\"member_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"account_type\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"member_avatar\",\"type\":\"bytea\",\"conditions\":\"false\"},{\"name\":\"amount\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Tokens_Transfer\\\",\\\"Tokens_Tranche\\\",\\\"Tokens_Rollback\\\",\\\"Tokens_AdditionalEmission\\\")\"},{\"name\":\"onhold\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Tokens_Account_Close\\\")\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"false\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "accounts_tokens",
            "Columns": "[{\"name\":\"date_create\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"name_tokens\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"type_emission\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"date_expiration\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"flag_rollback_tokens\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"amount\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Tokens_Emission\\\",\\\"Tokens_AdditionalEmission\\\")\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Tokens_Close\\\")\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}