contract Import {

	func ImportList(row array, type string) {
		if !row {
			return
		}
		var i int
		while i < Len(row) {
			var idata map
			idata = row[i]
			
			if type == "pages" {
				$page_id = DBFind(type).Where("name=?", idata["Name"]).One("id")
				if $page_id != nil {
					idata["Id"] = Int($page_id)
					CallContract("EditPage", idata)
				} else {
					CallContract("NewPage", idata)
				}
			}
			if type == "blocks" {
				$block_id = DBFind(type).Where("name=?", idata["Name"]).One("id")
				if $block_id != nil {
					idata["Id"] = Int($block_id)
					CallContract("EditBlock", idata)
				} else {
					CallContract("NewBlock", idata)
				}
			}
			if type == "menu" {
				$menu = DBFind(type).Where("name=?", idata["Name"]).Row()
				if $menu {
					if !Contains($menu["value"], idata["Value"]){
						idata["Value"] = $menu["value"] + "\n" + idata["Value"]
						idata["Id"] = Int($menu["id"])
						CallContract("EditMenu", idata)
					}
				} else {
					CallContract("NewMenu", idata)
				}
			}
			if type == "parameters" {
				$param_id = DBFind(type).Where("name=?", idata["Name"]).One("id")
				if $param_id != nil {
					idata["Id"] = Int($param_id)
					if idata["Name"] != "founder_account" {
						CallContract("EditParameter", idata)
					}
				} else {
					CallContract("NewParameter", idata)
				}
			}
			if type == "languages" {
				$lang_id = DBFind(type).Where("name=?", idata["Name"]).One("id")
				if $lang_id != nil {
					CallContract("EditLang", idata)
				} else {
					CallContract("NewLang", idata)
				}
			}
			if type == "contracts" {
				var cid int
				cid = GetContractByName(idata["Name"])
				
				idata["WalletId"] = ""
				if cid > 0 {
					idata["Id"] = cid
					CallContract("EditContract", idata)
					
				} else {
					CallContract("NewContract", idata)
				}
				
				
			}
			if type == "tables" {
				$table_id = DBFind(type).Where("name=?", idata["Name"]).One("id")
				if $table_id == nil {
					CallContract("NewTable", idata)
				}
			}
			
			i = i + 1
		}
	}

	func ImportData(row array) {
		if !row {
			return
		}
		var i int
		while i < Len(row) {
			var idata map
			var list, existRow, cols array
			var tblname, columns, col, where string
			idata = row[i]
			i = i + 1
			tblname = idata["Table"]
			columns = Join(idata["Columns"], ",")
			cols = idata["Columns"]
			list = idata["Data"]
			if !list {
				continue
			}
			var j int
			while j < Len(list) {
				var ilist, whereArr array
				ilist = list[j]
				var c int
				var isJSON bool
				while c < Len(cols) {
					col = cols[c]
					if ilist[c] != "" {
						whereArr[c] = Sprintf("%v='%v'", col, ilist[c])
						if ilist[c] == "NULL" {
							whereArr[c] = Sprintf("%v IS NULL", col)
						}
						if HasPrefix(ilist[c], "{"){
							isJSON = true
						}
					} else {
						whereArr[c] = Sprintf("%v=''", col)
					}
					c = c + 1
				}
				where = Join(whereArr, " and ")
				if !isJSON{
					existRow = DBFind(tblname).Where(where).Row()
				}
				if !existRow {
					DBInsert(tblname, columns, ilist)
				}
				j = j + 1
			}
		}
	}

    data {
        Data string
    }
    conditions {
        $list = JSONToMap($Data)
    }
    action {
        ImportList($list["pages"], "pages")
        ImportList($list["blocks"], "blocks")
        ImportList($list["menus"], "menu")
        ImportList($list["parameters"], "parameters")
        ImportList($list["languages"], "languages")
        ImportList($list["contracts"], "contracts")
        ImportList($list["tables"], "tables")
        ImportData($list["data"])
    }
}