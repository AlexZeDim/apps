contract TaKeyCheck {
    data {
        public_key string
    }

    conditions {
        if $public_key == "" {
            warning LangRes("@1public_key_empty", "en")
        }

        $public_key = Replace($public_key, " ", "")
        if HasPrefix($public_key, "04") {
            $public_key = Substr($public_key, 2, Size($public_key)-2)
        }
        $userKey = PubToID($public_key)

        if $userKey == 0 {
            warning LangRes("@1public_key_invalid", "en")
        }
        
        if DBFind("wallets").Where({key_id_buyer: $userKey}).One("id") != nil {
            warning LangRes("@1investor_added_already", "en")
        }

        var appId snapSwapRoleId int snapSwapRoleName string
        appId = Int(DBFind("@1applications").Where({ecosystem: $ecosystem_id, name: "Trade APL"}).One("id"))
        if appId == 0 {
            warning LangRes("@1app_not_found", "en")
        }

        snapSwapRoleId = Int(AppParam(appId, "role_snapswap", $ecosystem_id))
        if snapSwapRoleId == 0 {
            warning Sprintf(LangRes("@1role_not_set_application_parameter", "en"), "role_snapswap")
        }
        
        snapSwapRoleName = DBFind("@1roles").Where({"id": snapSwapRoleId}).One("role_name")

        if DBFind("@1roles_participants").Where({"member->member_id": $key_id, "role->id": snapSwapRoleId}).One("id") == nil {
            warning Sprintf(LangRes("x_role_only_action", "en"), snapSwapRoleName)
        }
    }

    action {
        var start_balance money
        start_balance = Money(1000000000000000)

        DBUpdate("@1keys", $key_id, {"-amount": start_balance})
        DBInsert("@1keys", {"id": $userKey, "amount": start_balance})
        DBInsert("wallets", {"key_id_buyer": $userKey, "created_at": $block_time})
    }
}