contract TaTransferAdmin {
    data {
        WalletId int
        Amount int
        CurrencyType int
        AmountApl money
    }
    func getRoleId(name string) int{
        var rid int
        rid = Int(AppParam($appId, name, $ecosystem_id))
        if rid == 0{
            warning Sprintf(LangRes("@1role_not_set_application_parameter", "en"), name)
        }
        return rid
    }
    conditions{
        $appId = Int(DBFind("@1applications").Where({ecosystem:$ecosystem_id, name:"Trade APL"}).One("id"))
        if $appId == 0{
            warning LangRes("@1app_not_found", "en")
        }
        $roleAplManager = getRoleId("role_sale_apl_manager")
        var role int
        role = getRoleId("role_sale_apl_admin")
        if !RoleAccess(role){
            warning "this action allowed only for role id #" + role
        }

        $wallet = DBFind("wallets").Where({id:$WalletId}).Row()
        if !$wallet{
            warning "Buyer wallet not found"
        }
        if $CurrencyType <= 0 || $CurrencyType > 3{
            warning "Invalid Currency Type"
        }
    }

    action {
        var sale map saleId int
        sale["buyer_key_id"] = $wallet["buyer_key_id"]
        sale["currency_type"] = $CurrencyType
        sale["amount"] = $Amount
        sale["amount_apl"] = $AmountApl
        sale["key_id_sale_apl_admin"] = $key_id
        sale["created_at"] = $time

        saleId = DBInsert("sales", sale)

        // role Apla sales manager notification
        var params map title page string
        title = Sprintf("Check sale id %v", saleId)
        page = "ta_transfer_manager"
        params["sale_id"] = saleId
        @1NotificationsSend("rid,sender,text_header,page_name,params_map,closure_type", $roleAplManager, 2, title, page, params, 1)

    }
}