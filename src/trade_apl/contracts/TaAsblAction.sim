contract TaAsblAction {
    data {
        Action string
        WalletId int
    }
    conditions{
        var basicAppId int
        basicAppId = Int(DBFind("@1applications").Where({ecosystem_id:1, name:"Basic"}).One("id"))
        if basicAppId == 0{
            warning LangRes("@1app_not_found", "en")
        }
        $roleConsensus = Int(AppParam(basicAppId, "role_apla_consensus_asbl", 1)
        if $roleConsensus == 0{
            warning Sprintf(LangRes("@1role_not_set_application_parameter", "en"), "role_apla_consensus_asbl")
        }
        if !RoleAccess($roleConsensus){
            warning "this action allowed only for role id #" + $roleConsensus
        }
        $wallet = DBFind("wallets").Where({id:$WalletId, rejected_at:0}).Row()
        if !$wallet{
            warning "Buyer wallet not found"
        }
        if Int($wallet["signed_at"]) == 0{
            warning "Buyer wallet not signed"
        }
        if $wallet["key_id_signer"] > 0{
            warning "This wallet was signed by asbl early"
        }
    }

    action {
        if $Action == "accept"{
            DBUpdate("wallets", Int($wallet["id"]), {key_id_signer:#key_id#})
            // buyer notification
            var params map
            params["wallet_id"] = $wallet["id"]
            @1NotificationsSend("member_id,sender,text_header,page_name,params_map,closure_type", $key_id, 1, "Your wallet approved", "ta_buyer_congratulation", params, 1)

        }elif $Action == "reject"{
            DBUpdate("wallets", Int($wallet["id"]), {rejected_at:$time})
        }
    }
}
