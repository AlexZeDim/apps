{
    "blocks": [
        {
            "Name": "demo_block_sendContract",
            "Value": "DBFind(parameters).Where(name='founder_account').Vars(founder)\nSetTitle($demo_title$)\nDiv(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            Div(h4){LangRes(input)}\n            Div(panel panel-primary){\n                Form(panel-body input-group){\n                    Input(Name: SomeText, Type:text, Placeholder:Enter text, Value: Hello World!)\n                    Div(input-group-btn){\n                        Button(Body:$send_contract$, Contract: DemoContract, Page: demo_page_sendContract, Class:btn btn-primary)\n                    }\n                }\n            }\n            \n            \n            DBFind(Name:demo_page_table, Source: me_table_exist).Where(\"id>0\").Vars(exist)\n            If(#exist_id#>0){\n                Div(h4){LangRes(result)}\n                Div(panel panel-primary){\n                    Div(panel-body){\n                        DBFind(Name:demo_page_table, Source: my_table)\n                        Div(table-responsive){\n                            Table(Source: my_table, Columns:\"id=member_id,name=member_name,text=some_text\")\n                        }\n                    }\n                }\n            }\n            \n            Div(h4){LangRes(code)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    If(#founder_value#==#key_id#){\n                        Div(h5){\n                            DBFind(blocks).Where(name='demo_block_sendContract').Vars(page)\n                            LinkPage(Page: \"edit-block\", PageParams: \"id=#page_id#\"){ $edit_page$ }\n                        }\n                        Div(h5){\n                            LinkPage(Page: \"edit-contract\", PageParams: \"name=DemoContract\"){ $edit_contract$ }\n                        }\n                    }.Else{\n                        Div(h5 text-bold){$page_code$}\n                    }\nCode(\n    Form(panel-body input-group){\n        Input(Name: SomeText, Type:text, Placeholder:Enter text, Value: Hello World!)\n        Div(input-group-btn){\n            Button(Body:Send to Contract, Contract: DemoContract, Page: demo_page_sendContract, Class:btn btn-primary)\n        }\n    }\n    DBFind(Name:demo_page_table, Source: my_table)\n    Div(table-responsive){\n        Table(Source: my_table, Columns:\"id=member_id,name=member_name,text=some_text\")\n    }\n)\n                }\n            }\n            \n            Div(h4){LangRes(description)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    LangRes(demo_description_sendContract)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "demo_block_sendMessage",
            "Value": "DBFind(parameters).Where(name='founder_account').Vars(founder)\nSetTitle($demo_title$)\nDiv(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            Div(h4){LangRes(input)}\n            Div(panel panel-primary){\n                Form(panel-body){\n                    Div(row){\n                        Div(col-sm-6){\n                            Input(Name: SomeText, Type:text, Placeholder:Enter text, Value: Hello World!)\n                        }\n                        Div(col-sm-6){\n                            Div(input-group){\n                                DBFind(Name: members, Source: src_member)\n                                Select(Name: MemberId, Source: src_member, NameColumn: member_name, ValueColumn: id)\n                                Div(input-group-btn){\n                                    Button(Body: $send_notify$, Contract: DemoNotificationSingle, Class:btn btn-primary, Params: \"MemberId=Val(MemberId)\")\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            Div(h4){LangRes(code)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    If(#founder_value#==#key_id#){\n                        Div(h5){\n                            DBFind(blocks).Where(name='demo_block_sendMessage').Vars(page)\n                            LinkPage(Page: \"edit-block\", PageParams: \"id=#page_id#\"){ $edit_page$ }\n                        }\n                    }.Else{\n                        Div(h5 text-bold){$page_code$}\n                    }\n                    Div(){\nCode(\n    Form(panel-body){\n        Div(col-sm-6){\n            Input(Name: SomeText, Type:text, Placeholder:Enter text, Value: Hello World!)\n        }\n        Div(col-sm-6){\n            Div(input-group){\n                DBFind(Name: members, Source: src_member)\n                Select(Name: MemberId, Source: src_member, NameColumn: member_name, ValueColumn: id)\n                Div(input-group-btn){\n                    Button(Body: Send Notification, Contract: DemoNotificationSingle, Class:btn btn-primary, Params: \"MemberId=Val(MemberId)\")\n                }\n            }\n        }\n    }\n)\n                    }\n                    If(#founder_value#==#key_id#){\n                        Div(h5){\n                            LinkPage(Page: \"edit-contract\", PageParams: \"name=DemoNotificationSingle\"){ $edit_contract$ }\n                        }\n                    }.Else{\n                        Div(h5 text-bold){$contract_code$}\n                        \n                    }\nCode(\n    contract DemoNotificationSingle {\n        data {\n            MemberId int\n            SomeText string\n        }\n        \n        conditions {\n            $iconName = \"fa-bell\"\n            $textHeader=\"You got a message\"\n            $pageName=\"demo_page_message\"\n            $paramsVal= Sprintf(\"SomeText=%v\", $SomeText)\n            $textBody = $SomeText\n        }\n        \n        action {\n            Notifications_Single_Send(\"MemberId,IconName,TextHeader,TextBody,PageName,ParamsVal\", $MemberId, $iconName, $textHeader, $textBody, $pageName, $paramsVal)\n        }\n    }\n)\n                }\n            }\n            \n            Div(h4){LangRes(description)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    LangRes(demo_description_sendMessage)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "demo_block_sendPage",
            "Value": "DBFind(parameters).Where(name='founder_account').Vars(founder)\nSetTitle($demo_title$)\nDiv(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            Div(h4){LangRes(input)}\n            Div(panel panel-primary){\n                Form(panel-body input-group){\n                    Input(Name: SomeText, Type:text, Placeholder:Enter text, Value: Hello World!)\n                    Div(input-group-btn){\n                        Button(Body:$send_page$, Page:demo_page_sendPage, PageParams: \"pageValue=Val(SomeText)\", Class:btn btn-primary)\n                    }\n                }\n            }\n            \n            \n            Div(h4){LangRes(result)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    pageValue : #pageValue#\n                }\n            }\n            \n            Div(h4){LangRes(code)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    If(#founder_value#==#key_id#){\n                        Div(h5){\n                            DBFind(blocks).Where(name='demo_block_sendPage').Vars(page)\n                            LinkPage(Page: \"edit-block\", PageParams: \"id=#page_id#\"){ $edit_page$ }\n                        }\n                    }.Else{\n                        Div(h5 text-bold){$page_code$}\n                    }\nCode(\n    Form(panel-body input-group){\n        Input(Name: SomeText, Type:text, Placeholder:Enter text, Value: Hello World!)\n        Div(input-group-btn){\n            Button(Body:Send to Page, Page:demo_page_sendPage, PageParams: \"pageValue=Val(SomeText)\", Class:btn btn-primary)\n        }\n    }\n)\n                }\n            }\n            \n            Div(h4){LangRes(description)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    LangRes(demo_description_sendPage)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_edit",
            "Value": "If(GetVar(LandId)){}.Else{\n    SetVar(LandId, 1)\n}\n\nIf(#admin#==1){\n    SetTitle($depart_role2$)\n}.Else{\n    SetTitle($owner$)\n}\n\nEcosysParam(Name: land_yes_no, Source: src_yes_no)\nIf(GetVar(LandId)){\n    DBFind(Name: land_registry, Source: src_entry).WhereId(#LandId#).Vars(entry)\n    DBFind(Name: members, Source: src_owners).Where(id=#entry_owner_id#).Vars(owner)\n}\nDiv(content-wrapper red){\n    Div(breadcrumb){\n        Div(){\n            LinkPage(LangRes(land_records), land_registry_records, PageParams: \"admin=#admin#\").Style(margin-right: 10px;)\n            Span(/).Style(margin-right: 10px;)\n            Span(LangRes(land_records_edit) ##LandId#, text-muted).Style(margin-right: 10px;)\n            Image(Alt: ava, Class: img-thumbnail img-circle, Src: \"#owner_avatar#\").Style(width:30px;margin-right: 10px;)\n            Span(#owner_member_name#, text-muted)\n        }\n    }\n    Div(row df f-valign){\n        \n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3 mt-sm text-left){\n            Div(panel panel-primary data-sweet-alert){\n                Form(){\n                    Div(panel-heading){\n                        Div(panel-title){LangRes(land_records_edit)}\n                    }\n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(row df f-valign){\n                                Div(col-sm-12){\n                                    Map(Hmap:300, MapType: hybrid, Value: #entry_map_coords#)\n                                }\n                            }\n                            \n                            Div(col-md-4 mt-sm text-right){Strong(LangRes(area_size))}\n                            Div(col-md-8 mt-sm text-left){\n                                If(){\n                                    Input(Name: Area, Class: form-control input-sm,Value: #entry_area#, Type: text)\n                                }.Else{\n                                    If(GetVar(entry_area)){\n                                        #entry_area#\n                                    }\n                                }\n                            }\n                        }\n                        Div(row df f-valign){\n                            Div(col-md-4 mt-sm text-right){Strong(LangRes(address))}\n                            Div(col-md-8 mt-sm text-left){\n                                If(){\n                                    Input(Name: CoordsAddress, Class: form-control input-sm, Type: text, Value: GetVar(entry_address))\n                                }.Else{\n                                    If(GetVar(entry_address)){\n                                        #entry_address#\n                                    }\n                                }\n                            }\n                        }\n                        Div(row df f-valign){\n                            Div(col-md-4 mt-sm text-right h5){Strong(LangRes(owner))}\n                            Div(col-md-8 mt-sm text-left h5){\n                                Image(Alt: ava, Class: img-thumbnail img-circle, Src: \"#owner_avatar#\").Style(width:40px;margin-right: 10px;)\n                                Span(#owner_member_name#, text-muted)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-4 mt-sm text-right h5){Strong(LangRes(registration_date):) }\n                            Div(col-md-8 mt-sm text-left h5){\n                                DateTime(#entry_registration_date#)\n                            }\n                        }\n                    }\n                    \n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-4 mt-sm text-right){Strong(LangRes(buildings_use_class))}\n                            Div(col-md-8 mt-sm text-left){\n                                If(){\n                                    EcosysParam(Name: land_buildings_use_class, Source: src_buildings_use_class)\n                                    Select(Name: BuildingsUseClass, Source: src_buildings_use_class, Class: form-control, Value: #entry_buildings_use_class#, NameColumn: name, ValueColumn: id)\n                                }.Else{\n                                    If(GetVar(entry_buildings_use_class)){\n                                        EcosysParam(Name: buildings_use_class, Index: #entry_buildings_use_class#)\n                                    }.Else{\n                                        LangRes(undefined)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-4 mt-sm text-right){Strong(LangRes(land_nature))}\n                            Div(col-md-8 mt-sm text-left){\n                                If(){\n                                    EcosysParam(Name: land_nature, Source: src_nature)\n                                    Select(Name: LandNature,Source: src_nature, Class: form-control,Value: #entry_land_nature#, NameColumn: name, ValueColumn: id)\n                                }.Else{\n                                    If(GetVar(entry_land_nature)){\n                                        EcosysParam(Name: land_nature, Index: #entry_land_nature#)\n                                    }.Else{\n                                        LangRes(undefined)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-4 mt-sm text-right h5){Strong(LangRes(consideration_value))}\n                            Div(col-md-8 mt-sm text-left h5){\n                                If(#admin#==1){\n                                    If(GetVar(entry_price)){\n                                        #entry_price#\n                                    }\n                                }.Else{\n                                    Input(Name: Price,Class: form-control input-sm, Value: #entry_price#, Type: number)\n                                }\n                            }\n                        }\n                    }\n                    \n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-4 mt-sm text-right h5){Strong(LangRes(encumbrance_certificate))}\n                            Div(col-md-8 mt-sm text-left h5){\n                                If(#admin#==1){\n                                    Div(form-inline){\n                                        RadioGroup(Name: EncumbranceCertificate,Class: form-control, Value: #entry_encumbrance_certificate#, Source: src_yes_no, ValueColumn: id, NameColumn: name)\n                                    }\n                                }.Else{\n                                    If(GetVar(entry_encumbrance_certificate)){\n                                        Span(EcosysParam(Name: land_yes_no, Index: #entry_encumbrance_certificate#))\n                                    }.Else{\n                                        LangRes(undefined)\n                                    }\n                                }\n                            }\n                        }\n                        Div(row df f-valign){\n                            Div(col-md-4 mt-sm text-right h5){Strong(LangRes(legal_status))}\n                            Div(col-md-8 mt-sm text-left h5){\n                                If(#admin#==1){\n                                    Div(form-inline){\n                                        RadioGroup(Name: LegalStatus,Class: form-control, Value: #entry_legal_status#, Source: src_yes_no, ValueColumn: id, NameColumn: name)\n                                    }\n                                }.Else{\n                                    If(GetVar(entry_legal_status)){\n                                        Span(EcosysParam(Name: land_yes_no, Index: #entry_legal_status#))\n                                    }.Else{\n                                        LangRes(undefined)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    \n                    Div(panel-footer){\n                        Div(clearfix){\n                            Div(pull-right){\n                                Input(Name: LandId, Type: hidden, Value: #LandId#)\n                                Div(btn-group){\n                                    Button(Page: land_registry_records, Body: $back$, Class: btn btn-default btn-pill-left, PageParams: \"admin=#admin#\")\n                                    \n                                    If(#admin#==1){\n                                        Button(Body: $save$, Class: btn btn-primary btn-pill-right, Contract: land_registry_UpdateAdmin, Params: \"NotificId=#notific_id#\", Page: land_registry_records_admin)\n                                    }.Else{\n                                        Button(Body: $save$, Class: btn btn-primary btn-pill-right, Contract: land_registry_UpdateOwner, Params: \"Price=Val(Price),NotificId=#notific_id#\", Page: land_registry_records)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_records",
            "Value": "If(#isOrder#==1){\n    SetVar(Name:v_Order, Value: \"price\")\n}.ElseIf(#isOrder#==2){\n    SetVar(Name:v_Order, Value: \"area\")\n}.ElseIf(#isOrder#==3){\n    SetVar(Name:v_Order, Value: \"price desc\")\n}.ElseIf(#isOrder#==4){\n    SetVar(Name:v_Order, Value: \"area desc\")\n}.Else{\n    SetVar(Name:v_Order, Value: \"id desc\")\n}\n\nDBFind(Name: land_registry, Source: src_land_registry).Where(#v_Where#).Order(#v_Order#).Custom(_id){\n    Div(text-center h5){#id#}.Style(align:center; width:50px;)\n}.Custom(_owner){\n    DBFind(Name: members, Source: src_members).Where(id=#owner_id#).Vars(row)\n    Div(text-bold text-center){\n        Image(Class: img-thumbnail img-circle, Alt: ava, Src: \"#row_avatar#\").Style(width:30px;height:30px;)\n        \n        Div(){\n            LinkPage(Page: profile_view, PageParams: \"v_member_id=#owner_id#\", Body: #row_member_name#).Style(cursor:pointer;)\n        }\n    }.Style(max-width:150px;overflow:hidden;)\n}.Custom(_land){\n    Span(EcosysParam(Name: land_use, Index: #land_use#))\n}.Custom(_buildings){\n    Span(EcosysParam(Name: buildings_use_class, Index: #buildings_use_class#))\n}.Custom(_area){\n    Span(#area#)\n}.Custom(_address){\n    Span(#address#)\n}.Custom(_cons){\n    Div(text-center h6){\n        If(#price#){\n            #price#\n        }.Else{\n            Em(Class: fa fa-1x text-muted fa-question-circle)\n        }\n    }\n    \n}.Custom(_legal){\n    Div(text-center h6){\n        \n        If(#legal_status#==0){\n            Em(Class: fa fa-1x text-muted fa-question-circle)\n        }\n        If(#legal_status#==1){\n            Em(Class: fa fa-1x text-success fa-check-circle)\n        }\n        If(#legal_status#==2){\n            Em(Class: fa fa-1x text-danger fa-exclamation-circle)\n        }\n    }\n    \n}.Custom(_encumberance){\n    Div(text-center h6){\n        If(#encumbrance_certificate#==0){\n            Em(Class: fa fa-1x text-muted fa-question-circle)\n        }\n        If(#encumbrance_certificate#==1){\n            Em(Class: fa fa-1x text-success fa-check-circle)\n        }\n        If(#encumbrance_certificate#==2){\n            Em(Class: fa fa-1x text-danger fa-exclamation-circle)\n        }\n    }\n    \n}.Custom(_common){\n    Form(){\n        Button(Page: land_registry_view, PageParams: \"notific_val_int=#id#\", Class: btn btn-default fa fa-2x fa-eye)\n    }\n    \n}.Custom(_admin){\n    Form(btn-group){\n        Button(Page: land_registry_view, PageParams: \"LandId=#id#,admin=#admin#\", Class: btn btn-default fa fa-2x fa-eye)\n        Button(Page: #this#, Contract: land_registry_Delete, Params: \"LandId=#id#\", Class: btn btn-danger fa fa-2x fa-trash)\n    }.Style(display:flex;)\n    \n}\n\nDiv(content-wrapper){\n    Div(panel panel-primary data-sweet-alert){\n        Div(list-group-item){\n            Div(row df f-valign){\n                Div(col-md-2 mt-sm text-center text-bold){$land_use$}\n                Div(col-md-7 mt-sm text-left){\n                    Form(input-group){\n                        EcosysParam(Name: land_use, Source: src_land_use)\n                        Select(Name: LandUseSelect, Source: src_land_use, Class: form-control, NameColumn: name, ValueColumn: id, Value: #str_search#)\n                        \n                        Div(input-group-btn){\n                            Button(Page: #this#, PageParams: \"str_search=Val(LandUseSelect),isSearch=1,isOrder=#isOrder#,admin=#admin#,sales=#sales#\", Class: btn btn-default fa fa-search)\n                        }\n                    }\n                }\n                Div(col-md-3 mt-sm btn-group){\n                    SetVar(params_sort, \"admin=#admin#,sales=#sales#,isOrder\")\n                    SetVar(Name: b_ask, Value: fa fa-sort-numeric-asc)\n                    SetVar(Name: b_desk, Value: fa fa-sort-numeric-desc)\n                    If(#isOrder#==1){\n                        Button(Page: #this#, Class: btn btn-default, PageParams: \"#params_sort#=3\"){\n                            Span(Class:#b_ask# active) LangRes(price)\n                        }\n                    }.ElseIf(#isOrder#==3){\n                        Button(Page: #this#, Class: btn btn-default, PageParams: \"#params_sort#=1\"){\n                            Span(Class:#b_desk# active) LangRes(price)\n                        }\n                    }.Else{\n                        Button(Page: #this#, Class: btn btn-default,PageParams: \"#params_sort#=1\"){\n                            LangRes(price)\n                        }\n                    }\n                    \n                    If(#isOrder#==2){\n                        Button(Page: #this#, Class: btn btn-default, PageParams: \"#params_sort#=4\"){\n                            Span(Class:#b_ask# active) LangRes(area_size)\n                        }\n                    }.ElseIf(#isOrder#==4){\n                        Button(Page: #this#, Class: btn btn-default, PageParams: \"#params_sort#=2\"){\n                            Span(Class:#b_desk# active) LangRes(area_size)\n                        }\n                    }.Else{\n                        Button(Page: #this#, Class: btn btn-default, PageParams: \"#params_sort#=4\"){\n                            LangRes(area_size)\n                        }\n                    }\n                }.Style(display:flex;)\n            }\n            \n            \n            \n            Div(table-responsive){\n                \n                If(#admin#==1){\n                    Table(Source:src_land_registry, Columns: \"ID=_id,$owner$=_owner,$area_size$=_area,$address$=_address,$consideration_value$(INR)=_cons,$legal_status$=_legal,$encumbrance_certificate$=_encumberance,=_admin\")\n                }\n                If(#admin#==0){\n                    Table(Source:src_land_registry, Columns: \"ID=_id,$owner$=_owner,$area_size$=_area,$address$=_address,$consideration_value$(INR)=_cons,$legal_status$=_legal,$encumbrance_certificate$=_encumberance,=_common\")\n                }\n            }\n            \n            If(#isSearch#==1){\n                Form(text-center){\n                    Button(Page: #this#, PageParams:\"isSearch=0,admin=#admin#\", Class: btn btn-primary btn-oval){\n                        LangRes(view_all)\n                    }\n                }\n            }\n            \n        }\n        Div(panel-footer){\n            Div(clearfix){\n                Form(pull-right){\n                    Button(Page: land_registry_add, Class: btn btn-primary, Body: $add$)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "contracts": [
        {
            "Name": "Companies_Add",
            "Value": "contract Companies_Add {\n    data {\n        company_name string\n        company_type int\n    }\n\n    conditions {\n        $company_map = DBFind(\"companies\").Where(\"id = $\", $key_id).Row()\n        if ($company_map[\"id\"] != nil) {\n            warning \"Company has already been created for this account. Create a new account and try again\"\n        }\n    }\n\n    action {\n        DBInsert(`companies`, `id,company_name,company_type,timestamp date_start`, $key_id, $company_name, $company_type, $block_time)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Companies_Participants_Del",
            "Value": "contract Companies_Participants_Del {\n    data {\n        participant_id int\n    }\n\n    conditions {\n        // check participant\n        $participant_map = DBFind(\"companies_participants\").Where(\"id = $\", $participant_id).Row()\n        if ($participant_map[\"id\"] == nil) {\n            warning \"Participant not found\"\n        }\n\n        // check creator of the company\n        if (Int($participant_map[\"company_id\"]) != $key_id) {\n            warning \"Sorry, you are not the creator of this company\"\n        }\n    }\n\n    action {\n        // delete the participant\n        DBUpdate(`companies_participants`, $participant_id, `delete,timestamp date_end`, 1, $block_time)\n\n        // if role is specified, delete the participant from the role\n        if (Int($participant_map[\"role_id\"]) != 0) {\n\n            // search participant in the role\n            $assign_id = DBFind(`roles_assign`).Where(\"role_id=$ and member_id=$ and delete=$\", Int($participant_map[\"role_id\"]), Int($participant_map[\"member_id\"]), 0).One(\"id\")\n\n            // if found, then delete the participant\n            if ($assign_id != nil){\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Assign",
            "Value": "contract Roles_Assign {\n    data {\n        role_id int\n        member_id int\n    }\n    \n    conditions {\n        \n        $role_map = DBFind(\"roles_list\").Where(\"id = $\", $role_id).Row()\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\n        $appointer_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        \n        if !$role_map {\n            warning \"Role not found\"\n        }\n        if !$member_map {\n            warning \"Member not found\"\n        }\n        if !$appointer_map {\n            warning \"Appointer not found\"\n        }\n        \n        if(Int($role_map[\"delete\"]) == 1) {\n            warning \"This role has been deleted. The appointment of members is impossible\"\n        }\n        if((Int($role_map[\"role_type\"]) != 1) &&(Int($role_map[\"role_type\"]) != 4)) {\n            warning \"This role is not assignable. The appointment of members is impossible\"\n        }\n        if(Int($role_map[\"creator_id\"]) != $key_id) {\n            warning \"Sorry, you are not the creator of this role. The appointment of members is impossible\"\n        }\n        \n        $assign_id = DBFind(\"roles_assign\").Where(\"role_id=$ and member_id=$ and delete=0\", $role_id, $member_id).One(\"id\")\n        if($assign_id != nil) {\n            warning \"This member has already been added\"\n        }\n    }\n    \n    action {\n        DBInsert(\"roles_assign\", \"role_id,role_type,role_name,member_id,member_name,member_avatar,appointed_by_id,appointed_by_name,timestamp date_start,delete\",\n        $role_id, $role_map[\"role_type\"], $role_map[\"role_name\"], $member_id, $member_map[\"member_name\"], $member_map[\"avatar\"], $key_id, $appointer_map[\"member_name\"], $block_time, 0)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Companies_Del",
            "Value": "contract Companies_Del {\n    data {\n        company_id int\n    }\n\n    conditions {\n        // check creator of the company\n        if ($company_id != $key_id) {\n            warning \"Sorry, you are not the creator of this company\"\n        }\n    }\n\n    action {\n        // get the list of roles\n        $ret_roles = DBFind(\"roles_list\").Columns(\"id\").Where(\"company_id = $ and delete = $\", $company_id, 0).Order(\"id\")\n\n        // delete all roles\n        $i1 = 0\n        while ($i1 < Len($ret_roles)) {\n            $vals_roles = $ret_roles[$i1]\n            $i1 = $i1 + 1\n        }\n\n        // get the list of roles\n        $ret_participants = DBFind(\"companies_participants\").Columns(\"id\").Where(\"company_id = $ and delete = $\", $company_id, 0).Order(\"id\")\n\n        // delete all roles\n        $i2 = 0\n        while ($i2 < Len($ret_participants)) {\n            $vals_participants = $ret_participants[$i2]\n            Companies_Participants_Del(\"participant_id\", Int($vals_participants[\"id\"]))\n            $i2 = $i2+ 1\n        }\n\n        // delete company\n        DBUpdate(`companies`, $company_id, `delete,timestamp date_end`, 1, $block_time)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "DemoContract",
            "Value": "contract DemoContract {\n    data {\n        SomeText string\n    }\n    \n    conditions {\n        $member = DBFind(\"members\").WhereId($key_id).Row()\n        if !$member {\n            info \"Member not found\"\n        }\n    }\n    action {\n        DBInsert(\"demo_page_table\", \"member_name,member_id,some_text\", $member[\"member_name\"], $member[\"id\"], $SomeText)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Single_Send",
            "Value": "contract Notifications_Single_Send {\n    data {\n        member_id int\n        icon_name string\n        text_header string\n        text_body string\n        page_name string\n        params_val string\n    }\n\n    conditions {\n\t\t$member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\n\t\t\n\t\tif ($member_map[\"id\"] == nil){\n\t\t\twarning \"Member not found\"\n\t\t}\n    }\n\n    action {\n\t\t$notification_id = DBInsert(`notifications`, `icon,header_text,body_text,page_name,notification_type,recipient_id,recipient_name,recipient_avatar,timestamp date_create,page_params`, \n\t\t\t$icon_name, $text_header, $text_body, $page_name, 1, $member_id, $member_map[\"member_name\"], $member_map[\"avatar\"], $block_time, $params_val)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Profile_Edit",
            "Value": "contract Profile_Edit {\n    data {\n        Username string\n        Avatar string \"image\"\n        Kid int \"optional\"\n    }\n    \n    conditions {\n        $id = 0\n        if $Kid == 0{\n            $Kid = $key_id\n        }\n        $member = DBFind(\"members\").Where(\"id=?\",$Kid).Row()\n        if $member {\n            $id = Int($member[\"id\"])\n        }\n    }\n    \n    action {\n        if $id != 0{\n            DBUpdate(\"members\", $id, \"member_name,avatar\", $Username, $Avatar)\n        }else{\n            DBInsert(\"members\", \"id,member_name,avatar\", $Kid, $Username, $Avatar)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Roles_Finishing",
            "Value": "contract Notifications_Roles_Finishing{\n    data {\n\t    notific_id int\n    }\n\n    conditions {\n\t\t$notifications_map = DBFind(\"notifications\").Where(\"id=$\", $notific_id).Row()\n\t\tif ($notifications_map[\"id\"] == nil){\n\t\t\twarning \"Notification not found\"\n\t\t}\n\t\t\n        if ( Int($notifications_map[\"started_processing_id\"]) == 0 ){\n            warning \"Sorry, processing of this notification has not yet begun\"  \n        }\n        if ( Int($notifications_map[\"started_processing_id\"]) != $key_id ){\n            warning \"Sorry, processing of this notice began another member\"   \n        }\n        if ( (Int($notifications_map[\"finished_processing_id\"]) != 0) || (Int($notifications_map[\"closed\"]) > 0) ){\n            warning \"Sorry, this notification has already been closed before\"  \n        }\n\t\t\n\t\t$assign_id = DBFind(`roles_assign`).Where(`role_id=$ and member_id=$ and delete=$`, Int($notifications_map[\"role_id\"]), $key_id, 0).One(\"id\")\n        if ($assign_id == 0){\n            warning \"Sorry, you are not part of the role for which this notification is intended\"  \n        }\n    }\n\n    action {\n        DBUpdate(`notifications`, $notific_id, `timestamp finished_processing_time,finished_processing_id,closed`, $block_time, $key_id, 1) \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Roles_Processing",
            "Value": "contract Notifications_Roles_Processing {\n    data {\n\t    notific_id int\n    }\n\n    conditions {\n\t\t$notifications_map = DBFind(\"notifications\").Where(\"id=$\", $notific_id).Row()\n\t\tif ($notifications_map[\"id\"] == nil){\n\t\t\twarning \"Notification not found\"\n\t\t}\n\t\t\n        if ( Int($notifications_map[\"started_processing_id\"]) != 0){\n            warning \"Sorry, processing of this notification has already begun\"  \n        }\n\t\t\n\t\t$assign_id = DBFind(`roles_assign`).Where(`role_id=$ and member_id=$ and delete=$`, Int($notifications_map[\"role_id\"]), $key_id, 0).One(\"id\")\n        if ($assign_id == 0){\n            warning \"Sorry, you are not part of the role for which this notification is intended\"  \n        }\n    }\n\n    action {\n        DBUpdate(`notifications`, $notific_id, `timestamp started_processing_time,started_processing_id`, $block_time, $key_id) \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "DemoNotificationSingle",
            "Value": "contract DemoNotificationSingle {\n    data {\n        MemberId int\n        SomeText string\n    }\n    \n    conditions {}\n    \n    action {\n        var icon, header, body, page, params string\n        icon = \"fa-bell\"\n        header = \"You have got a message\"\n        body = $SomeText\n        page = \"demo_page_message\"\n        params = Sprintf(\"SomeText=%v\", $SomeText)\n\n        Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", $MemberId, icon, header, body, page, params)\n    }\n}\n",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Single_Close",
            "Value": "contract Notifications_Single_Close {\n    data {\n\t    notific_id int\n    }\n\n    conditions {\n    }\n\n    action {\n        DBUpdate(`notifications`, $notific_id, `closed,timestamp finished_processing_time,finished_processing_id`, 1, $block_time, $key_id) \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Roles_Send",
            "Value": "contract Notifications_Roles_Send {\n    data {\n        role_id int\n        closure_type int\n\n        icon_name string\n        text_header string\n        text_body string\n        page_name string\n        params_val string \n    }\n\n    conditions {\n\t\t$assign_id = DBFind(`roles_assign`).Where(`role_id=$ and delete=$`, $role_id, 0).One(\"id\")\n        if ($assign_id == nil){\n\t\t\twarning \"Role does not contain members\"\n\t\t}\n    }\n\n    action {\n        //closure_type - Single\n        if ($closure_type == 1){\n\t\t\t$role_name = DBFind(\"roles_list\").Where(\"id=$\", $role_id).One(\"role_name\")\n\t\t\n            $notification_id = DBInsert(`notifications`, `icon,header_text,body_text,page_name,notification_type,role_id,role_name,timestamp date_create,page_params`, \n                $icon_name, $text_header, $text_body, $page_name, 2, $role_id, $role_name, $block_time, $params_val)\n        } \n\t\t//closure_type - Multiple \n\t\telse {\n            $ret_role = DBFind(\"roles_assign\").Columns(\"member_id\").Where(\"role_id = $ and delete = $\", $role_id, 0).Order(\"id\")\n\n            $len_role = Len($ret_role)\n            $i_role = 0\n            while($i_role < $len_role){\n                var vals_role map\n                vals_role = $ret_role[$i_role] \n\n                Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", \n                                vals_role[\"member_id\"], $icon_name, $text_header, $text_body, $page_name, $params_val)\n\n                $i_role = $i_role + 1\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "MembersAutoreg",
            "Value": "contract MembersAutoreg {\n    conditions {\n    }\n    \n    action {\n        var keys map\n        keys = DBFind(\"keys\")\n        \n        var k, i int\n        while k<Len(keys){\n            var key, key_member, member array\n            key = keys[k]\n            \n            var id int\n            id = Int(key[\"id\"])\n            key_member = DBFind(\"members\").Where(\"id=?\",id).Row()\n            if !key_member {\n                var name string\n                \n                while true{\n                    name = Sprintf(\"member_%v\", i)\n                    member = DBFind(\"members\").Where(\"member_name=?\", name).Row()\n                    if !member{\n                        break\n                    }\n                    i = i+1\n                }\n                if EcosysParam(\"founder_account\")== id{\n                    name = \"founder\"\n                }\n                Profile_Edit(\"Username,Avatar,Kid\", name, \"\", id)\n            }\n            k=k+1\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "RoleConditions",
            "Value": "contract RoleConditions {\n    data{\n        role string\n    }\n    conditions {\n        $assigned_id = DBFind(\"roles_assign\").Where(\"role_name=? and member_id=? and delete=0\", $role, $key_id).One(\"id\")\n\t\tif ($assigned_id == nil){\n            warning Sprintf(\"This action allowed only for role: %v\", $role)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Companies_Participants_Add",
            "Value": "contract Companies_Participants_Add {\n    data {\n        company_id int\n        member_id int\n        right_sign int\n        inclusion_in_role int\n        role_id int \"optional\"\n    }\n\n    conditions {\n        // check creator of the company\n        if ($company_id != $key_id) {\n            warning \"Sorry, you are not the creator of this company\"\n        }\n\n        // check member\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\n        if ($member_map[\"id\"] == nil) {\n            warning \"Member not found\"\n        }\n\n        // check role\n        if ($inclusion_in_role == 1) {\n            $role_map = DBFind(\"roles_list\").Where(\"id = $\", $role_id).Row()\n            if ($role_map[\"id\"] == nil) {\n                warning \"Role not found\"\n            }\n\n            if (Int($role_map[\"company_id\"]) != $company_id) {\n                warning \"This role is not related to the specified company\"\n            }\n        }\n\n        // check - may be added before\n        if ($inclusion_in_role == 1) {\n            $assign_id = DBFind(`companies_participants`).Where(`company_id=$ and member_id=$ and role_id=$ and delete=$`, $company_id, $member_id, $role_id, 0).One(\"id\")\n        } else {\n            $assign_id = DBFind(`companies_participants`).Where(`company_id=$ and member_id=$ and role_id=$ and delete=$`, $company_id, $member_id, 0, 0).One(\"id\")\n        }\n        if ($assign_id != nil) {\n            warning \"This member has already been added to the specified role of the company\"\n        }\n    }\n\n    action {\n        if ($inclusion_in_role == 0) {\n            DBInsert(`companies_participants`, `company_id,member_id,member_name,member_avatar,right_sign,timestamp date_start,role_id`,\n                $company_id, $member_id, $member_map[\"member_name\"], $member_map[\"avatar\"], $right_sign, $block_time,0)\n        } else {\n            DBInsert(`companies_participants`, `company_id,member_id,member_name,member_avatar,right_sign,timestamp date_start,role_id,role_name`,\n                $company_id, $member_id, $member_map[\"member_name\"], $member_map[\"avatar\"], $right_sign, $block_time, $role_id, $role_map[\"role_name\"])\n\n            Roles_Assign(\"role_id,member_id\", $role_id, $member_id)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Create",
            "Value": "contract Roles_Create {\n    data {\n        role_name string\n        role_type int\n        company_id int \"optional\"\n    }\n\n    conditions {\n        // system role\n        if ($role_type == 3) {\n            warning \"System role can not be created\"\n        }\n\n        // company role\n        if ($role_type == 4) {\n\n            // check param\n            if ($company_id == 0) {\n                warning \"On this page you can not create a role for the company. Go to the company's view page to create a role\"\n            }\n\n            // check the company\n            $company_map = DBFind(\"companies\").Where(\"id = $\", $company_id).Row()\n            if ($company_map[\"id\"] == nil) {\n                warning \"Company not found\"\n            }\n\n            // check creator of the company\n            if ($company_id != $key_id) {\n                warning \"Sorry, you are not the creator of this company\"\n            }\n        }\n\n        // check member\n        $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        if ($member_map[\"id\"] == nil) {\n            warning \"You are not a member of the ecosystem\"\n        }\n    }\n\n    action {\n        if ($role_type == 4) {\n            DBInsert(`roles_list`, `role_name,role_type,creator_id,creator_name,creator_avatar,company_id,timestamp date_create,delete`,\n                $role_name, $role_type, $key_id, $member_map[\"member_name\"], $member_map[\"avatar\"], $company_id, $block_time, 0)\n        } else {\n            DBInsert(`roles_list`, `role_name,role_type,creator_id,creator_name,creator_avatar,company_id,timestamp date_create,delete`,\n                $role_name, $role_type, $key_id, $member_map[\"member_name\"], $member_map[\"avatar\"], 0, $block_time, 0)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Unassign",
            "Value": "contract Roles_Unassign {\n    data {\n        row_id int\n    }\n\n    conditions {\n        // check record\n        $assign_map = DBFind(`roles_assign`).Where(`id=$`, $row_id).Row()\n        if ($assign_map[\"id\"] == nil) {\n            warning \"Role not found for the specified member\"\n        }\n\n        // get role\n        $role_map = DBFind(\"roles_list\").Where(\"id=$\", Int($assign_map[\"role_id\"])).Row()\n        if ($role_map[\"id\"] == nil) {\n            warning \"Role not found in the roles registry\"\n        }\n\n        // check creator of the role\n        if (Int($role_map[\"creator_id\"]) != $key_id) {\n            warning \"Sorry, you are not the creator of this role\"\n        }\n    }\n\n    action {\n        // delete the member\n        DBUpdate(`roles_assign`, $row_id, `delete,timestamp date_end`, 1, $block_time)\n\n        // if company is specified, delete the member from the company\n        if (Int($role_map[\"company_id\"]) != 0) {\n\n            // search member in the company\n            $assign_id = DBFind(`companies_participants`).Where(\"company_id=$ and role_id=$ and member_id=$ and delete=$\", Int($role_map[\"company_id\"]), Int($assign_map[\"role_id\"]), Int($assign_map[\"member_id\"]), 0).One(\"id\")\n\n            // if found, then delete the member\n            if ($assign_id != nil){\n                Companies_Participants_Del(\"participant_id\", Int($assign_id))\n            }\n        }\n\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Del",
            "Value": "contract Roles_Del {\n    data {\n        role_id int\n    }\n\n    conditions {\n        // check role\n        $role_map = DBFind(\"roles_list\").Where(\"id=$\", $role_id).Row()\n        if ($role_map[\"id\"] == nil) {\n            warning \"Role not found\"\n        }\n\n        // system role can not be deleted\n        if (Int($role_map[\"role_type\"]) == 3) {\n            warning \"System role can not be removed\"\n        }\n\n        // check creator of the role\n        if (Int($role_map[\"creator_id\"]) != $key_id) {\n            warning \"Sorry, you are not the creator of this role\"\n        }\n    }\n\n    action {\n        // get the list of participants\n        $ret_assign = DBFind(\"roles_assign\").Columns(\"id\").Where(\"role_id = $ and delete = $\", $role_id, 0).Order(\"id\")\n\n        // delete all participants\n        $len_assign = Len($ret_assign)\n        $i_assign = 0\n        while ($i_assign < $len_assign) {\n            $vals_assign = $ret_assign[$i_assign]\n            Roles_Unassign(\"row_id\", Int($vals_assign[\"id\"]))\n            $i_assign = $i_assign + 1\n        }\n\n        // delete the role\n        DBUpdate(`roles_list`, $role_id, `delete,timestamp date_delete`, 1, $block_time)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_Add",
            "Value": "contract land_registry_Add{\n    data{\n        OwnerId int\n        Coords string // {\"coords\":[{\"lat\":float,\"lng\":float},],\"area\": float,\"address\": string}\n        BuildingsUseClass int\n        LandNature int\n        RegistrationDate string \"optional\"\n    }\n    \n    func conditions{\n        var member map\n        member = DBFind(\"members\").Where(\"id = ?\", $OwnerId).Row()\n        if !member {\n            warning \"Member account for Owner not found\"\n        }\n        $coordsMap = JSONToMap($Coords)\n        $coordsAddress = $coordsMap[\"address\"]\n        $area = $coordsMap[\"area\"]\n        $area = Sprintf(\"%.0f\", $area)\n        \n        if !$coordsAddress {\n            info \"Please input address\"\n        }\n        if $area <= 0 {\n            info \"Please use map for input of the area coordinates\"\n        }\n    }\n    \n    func action{\n        var icon, header, body, page, params, roleParams, coords_address string\n        var closureType, landId, landUse, landLocalBody, area int\n        landId = DBInsert(\"land_registry\", \"owner_id,address,area,buildings_use_class,map_coords,land_use,timestamp date_create,delete,land_nature,land_local_body,registration_date,timestamp modification_date\", $OwnerId, $coordsAddress, $area, $BuildingsUseClass, $Coords, landUse, $block_time, 0, $LandNature, landLocalBody, $RegistrationDate, $block_time)\n        \n        DBInsert(\"land_registry_ownership\", \"step, timestamp date_creat, timestamp date_signing, lend_object_id, owner_id, owner_new_id\", -1, $block_time, $block_time, landId, $OwnerId, $OwnerId)\n        \n        icon = \"fa fa-bell-o\"\n        header = \"Department of Legal Affairs: $new_land$\"\n        body = \"$need_your_processing$\"\n        \n        //notify depart\n        params = Sprintf(\"LandId=%v,admin=1\", landId)\n        page = \"land_registry_edit\"\n        Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", $key_id,icon,header,body,page,params)\n        \n        //notify owner\n        header = \"New Land: need price\"\n        params = Sprintf(\"LandId=%v\", landId)\n        page = \"land_registry_edit\"\n        Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", $OwnerId,icon,header,body,page,params)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_Delete",
            "Value": "contract land_registry_Delete{\n    data{\n        LandId int\n    }\n    \n    func conditions{}\n    \n    func action{\n        DBUpdate(\"land_registry\", $LandId, \"delete\", \"1\")\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_SecondRequest",
            "Value": "contract land_registry_SecondRequest{\n    data{\n        LandId int\n    }\n    \n    func action{\n        var icon, header, body, page, notifyParams, params string\n        notifyParams = \"role_id,closure_type,icon_name,text_header,text_body,page_name,params_val\"\n        icon = \"fa-bell\"\n        header = \"$new_land$\"\n        body = \"$need_your_processing$\"\n        params = Sprintf(\"LandId=%v,admin=1,second_request=1\", $LandId)\n        page = \"land_registry_edit\"\n        Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", $key_id,icon,header,body,page,params)        \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_UpdateAdmin",
            "Value": "contract land_registry_UpdateAdmin{\n    data {\n        LandId int\n        EncumbranceCertificate int\n        LegalStatus int\n        NotificId int\n    }\n    func conditions {\n        $land = DBFind(\"land_registry\").Where(\"id=?\", $LandId).Row()\n        if !$land{\n            warning \"Land not found in registry\"\n        }\n        $name = DBFind(\"members\").Where(\"id=?\", $key_id).One(\"member_name\")\n    }\n    \n    func logRegistry(f string, v int){\n        var val string\n        val = Sprintf(\"%v\", v)\n        if val != $land[f]{\n            DBInsert(\"land_registry_editing\", \"editing_attribute,lend_object_id,new_attr_value,old_attr_value,person_id,person_name,timestamp date\", f, $LandId, v, $land[f],$key_id, $name, $block_time)\n        }\n    }\n    \n    func action {\n        // logRegistry(\"legal_status\", $LegalStatus)\n        // logRegistry(\"encumbrance_certificate\", $EncumbranceCertificate)\n        \n        DBUpdate(\"land_registry\", $LandId, \"legal_status,encumbrance_certificate\", $LegalStatus, $EncumbranceCertificate)\n        Notifications_Single_Close(\"notific_id\", $NotificId)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_UpdateOwner",
            "Value": "contract land_registry_UpdateOwner{\n    data{\n        LandId int\n        NotificId string \"optional\"\n        Price string\n    }\n    \n    func conditions{\n        $Price = Int($Price)\n        $NotificId = Int($NotificId)\n        var entry map\n        entry = DBFind(\"land_registry\").Where(\"id=? and owner_id=?\",$LandId, $key_id).Row()\n        if !entry{\n            info \"You cant change this Land\"\n        }\n    }\n    \n    func action{\n        DBUpdate(\"land_registry\", $LandId, \"price,timestamp modification_date\", $Price, $block_time)\n        if $NotificId > 0{\n            Notifications_Single_Close(\"notific_id\", $NotificId)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcRequest",
            "Value": "contract pcRequest {\n    data {\n        application_id int\n        page_name string\n        citizen_id int \"optional\"\n        \n    }\n\n    conditions {\n\n    }\n\n    action {\n         Notifications_Single_Send(\"icon_name,text_header,text_body,page_name,params_val,member_id\", 1, \"New request\", \"Need your confirmation\", $page_name,Sprintf(\"application_id=%v\",$application_id),$citizen_id)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcAppShareholders",
            "Value": "contract pcAppShareholders \n{\n    data \n    {\n        application_id int\n        person_id int\n    }\n\n    conditions \n    {\n        if (DBFind(\"pc_app_shareholders\").Columns(\"id\").Where(\"application_id=? and person_id=? and status!=0\", $application_id, $person_id))\n\t    {\n\t        warning(\"Shareholder already in the list\")\n\t    }\n        if(!DBFind(\"members\").Columns(\"id\").WhereId($person_id))\n\t    {\n\t         warning(\"Non-existent member ID\")\n\t    }\n    \n    }\n\n    action {\n        $ret_member = DBFind(\"members\").Columns(\"member_name\").Where(\"id = $\", $person_id).Order(\"id\")\n        $shareholder_id = DBFind(\"pc_app_shareholders\").Where(\"application_id=? and person_id=? and status=0\",$application_id,$person_id).One(\"id\")\n        if (Len($ret_member) > 0) {\n            $vals_member = $ret_member[0]\n        }\n        if $shareholder_id != nil {\n            DBUpdate(\"pc_app_shareholders\", Int($shareholder_id), \"status\", 1) \n        }\n        else{\n            DBInsert(\"pc_app_shareholders\", \"person_id,application_id,name,shareholding,status\", $person_id, $application_id, $vals_member[\"member_name\"], 0,1)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcAppShareholdersDel",
            "Value": "contract pcAppShareholdersDel {\n    data {\n        Id int\n        application_id int\n    }\n\n    conditions {\n        $ret_dell = DBFind(\"pc_app_shareholders\").WhereId($Id)\n        if (Len($ret_dell) > 0){\n            $vals_dell_founder = $ret_dell[0]\n        }\n        if ($vals_dell_founder[\"status\"] == 3){\n           warning(\"You can not remove a company founder\")\n        }\n    }\n\n    action {\n        $ret_ms = DBFind(\"pc_license_application\").Columns(\"emigration\").WhereId($application_id)\n        if (Len($ret_ms) == 3){\n           DBUpdate(\"pc_license_application\", $application_id, \"emigration\", 0)\n        }\n        DBUpdate(\"pc_app_shareholders\", $Id, \"status,shareholding\", 0,0)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcApplicationForm",
            "Value": "contract pcApplicationForm \n{\n    data \n    {\n        company_name string\n        business_scope int\n        business_premises int\n    }\n\n    conditions \n    {\n        $ret_member = DBFind(\"members\").Columns(\"member_name,avatar\").Where(\"id = $\", $key_id).Order(\"id\")\n        if (Len($ret_member) > 0){\n            $vals_member = $ret_member[0]\n        }\n    }\n\n    action \n    {\n        $application_id= DBInsert(\"pc_license_application\",\"company_name,business_scope,company_founder,business_premises,days_initial_approval,status,timestamp date_start,lease_contract_id\", $company_name, $business_scope, $key_id, $business_premises, 30, 0, $block_time, 0)\n        DBInsert(\"pc_app_shareholders\",\"person_id,application_id,name,shareholding,status\", $key_id, $application_id,$vals_member[\"member_name\"], 100, 3)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcRegisterCompany",
            "Value": "contract pcRegisterCompany \n{\n    data \n    {\n         application_id int\n    }\n\n    conditions \n    {\n        //warning(\"pcRegisterCompany\")\n    }\n\n    action \n    {\n        var company_id int\n        var ret array\n        var row map\n        ret = DBFind(\"pc_license_application\").Columns(\"business_premises,business_scope,company_founder,company_name\").Where(\"id=$\",$application_id)\n        row = ret[0]\n        \n        company_id=DBInsert(\"pc_companies\",\"application_id,business_premises,business_scope,company_founder,company_name, timestamp date_start,delete\", $application_id,Int(row[\"business_premises\"]),Int(row[\"business_scope\"]),Int(row[\"company_founder\"]),row[\"company_name\"], $block_time,0)\n        \n        var shareholding array\n        var str map\n        var len, i, request int\n\n        shareholding = DBFind(\"pc_app_shareholders\").Columns(\"person_id,shareholding,name\").Where(\"application_id=$ and status!=0\", $application_id)\n        \n        len = Len(shareholding)\n        while i < len \n        {\n            str = shareholding[i]\n\t\t\tDBInsert(\"pc_shareholders\",\"company,company_name,person_id,person_name,shareholding,delete\",company_id,row[\"company_name\"], Int(str[\"person_id\"]),str[\"name\"],Int(str[\"shareholding\"]),0)\n\t\t\ti = i + 1\n\t\t}\n        \n        DBUpdate(\"pc_license_application\", $application_id, \"status,company_id,timestamp date_end\",3, company_id, $block_time)\n    }\n    \n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcCheckApplication",
            "Value": "contract pcCheckApplication {\n    data {\n        application_id int \n    }\n\n    conditions {\n        $ret_member = DBFind(\"pc_license_application\").Columns(\"ministry_economy\").Where(\"id = $\", $application_id)\n            if (Len($ret_member)){\n                $vals_member = $ret_member[0]\n            }\n            if ($vals_member[\"ministry_economy\"] == 3) {\n                info (\"The Ministry Economy denied your request\")\n            }\n    }\n\n    action {\n            \n            if ($vals_member[\"ministry_economy\"] == 1) {\n                DBUpdate(\"pc_license_application\", $application_id, \"ministry_economy\",1)\n                pcRegisterCompany(\"application_id\", $application_id)\n            }\n            \n            else {\n                DBUpdate(\"pc_license_application\",$application_id,\"ministry_economy\",2)\n                pcRequest(\"application_id,page_name,citizen_id\",$application_id,\"pcMinistryEconomyPage\",$key_id)\n            }\n        }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcPoliceInspection",
            "Value": "contract pcPoliceInspection {\n    data {\n        application_id int \n    }\n\n    conditions {\n        $ret_member = DBFind(\"pc_license_application\").Columns(\"police_inspection\").Where(\"id = $\", $application_id)\n            if (Len($ret_member)){\n                $vals_member = $ret_member[0]\n            }\n            if ($vals_member[\"police_inspection\"] == 3) {\n                info (\"The police denied your request\")\n            }\n    }\n\n    action {\n            \n            if ($vals_member[\"police_inspection\"] == 1) {\n                DBUpdate(\"pc_license_application\", $application_id, \"police_inspection\",1)\n                pcCheckApplication(\"application_id\",$application_id)\n            }\n            \n            else {\n                DBUpdate(\"pc_license_application\",$application_id,\"police_inspection\",2)\n                pcRequest(\"application_id,page_name,citizen_id\",$application_id,\"pcPolicePage\",$key_id)\n            }\n        }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcCancel",
            "Value": "contract pcCancel {\n    data {\n         application_id int\n    }\n\n    conditions {\n\n    }\n\n    action {\n        DBUpdate(\"pc_license_application\", $application_id, \"ministry_economy,status,company_id,timestamp date_end,name_reservation\",3,4,0,$block_time,0)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcBusinessPremises",
            "Value": "contract pcBusinessPremises {\n    data {\n        application_id int \n    }\n\n    conditions {\n\n    }\n\n    action {\n        \n            DBUpdate(\"pc_license_application\", $application_id, \"property_suitability\",1)\n            pcPoliceInspection(\"application_id\",$application_id) \n        \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcCompanyName",
            "Value": "contract pcCompanyName {\n    data {\n        application_id int\n    }\n\n    conditions {\n        $ret_member = DBFind(\"pc_license_application\").Columns(\"company_name\").Where(\"id = $\", $application_id)\n        if (Len($ret_member) > 0){\n            $company_name = $ret_member[0]\n        }\n    }\n\n    action {\n        if (DBFind(\"pc_companies\").Columns(\"id\").Where(\"company_name = ?\",$company_name[\"company_name\"]) || DBFind(\"pc_license_application\").Columns(\"id\").Where(\"company_name = ? and id != ? and name_reservation = ?\", $company_name[\"company_name\"], $application_id,1)  )\n        {\n            DBUpdate(\"pc_license_application\", $application_id, \"name_reservation\",2)\n        }   else{\n            DBUpdate(\"pc_license_application\", $application_id, \"name_reservation\",1)\n            pcBusinessPremises(\"application_id\",$application_id)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcAPEmigration",
            "Value": "contract pcAPEmigration {\n    data {\n        application_id int\n    }\n\n    conditions {\n\n    }\n\n    action {\n       \n\t\t    DBUpdate(\"pc_license_application\", $application_id, \"emigration\", 1)\n\t\t    pcCompanyName(\"application_id\",$application_id)\n\t\t}\n    }",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcApplicationFormSend",
            "Value": "contract pcApplicationFormSend {\n    data {\n        id int\n        \n    }\n\n    conditions {\n\n    }\n\n    action {\n        DBUpdate(\"pc_license_application\", $id, \"status\", 1)\n        pcAPEmigration(\"application_id\",$id)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcDenial",
            "Value": "contract pcDenial {\n    data {\n        application_id int\n        notific_id int\n    }\n\n    conditions {\n        \n    }\n\n    action {\n        DBUpdate(\"pc_license_application\", $application_id, \"police_inspection,status,company_id,timestamp date_end,name_reservation\",3,4,0,$block_time,0)\n        Notifications_Single_Close(\"notific_id\",$notific_id)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcDenialEco",
            "Value": "contract pcDenialEco {\n    data {\n        application_id int\n        notific_id int\n    }\n\n    conditions {\n        \n    }\n\n    action {\n        DBUpdate(\"pc_license_application\", $application_id, \"ministry_economy,status,company_id,timestamp date_end,name_reservation\",3,4,0,$block_time,0)\n        Notifications_Single_Close(\"notific_id\",$notific_id)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcNewApplication",
            "Value": "contract pcNewApplication {\n    data {\n        application_id int\n    }\n\n    conditions {\n\n    }\n\n    action {\n        DBUpdate(\"pc_license_application\", $application_id, \"status\",4)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcConfirmPolice",
            "Value": "contract pcConfirmPolice {\n    data {\n        application_id int\n        notific_id int\n    }\n\n    conditions {\n        \n    }\n\n    action {\n        DBUpdate(\"pc_license_application\", $application_id, \"police_inspection\",1)\n        pcCheckApplication(\"application_id\",$application_id)\n        Notifications_Single_Close(\"notific_id\",$notific_id)\n        \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcConfirmEco",
            "Value": "contract pcConfirmEco {\n    data {\n        application_id int\n        notific_id int\n    }\n\n    conditions {\n        \n    }\n\n    action {\n        DBUpdate(\"pc_license_application\", $application_id, \"ministry_economy\",1)\n        pcRegisterCompany(\"application_id\", $application_id)\n        Notifications_Single_Close(\"notific_id\",$notific_id)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcApplicationFormEdit",
            "Value": "contract pcApplicationFormEdit {\n    data {\n        company_name string\n        business_scope int\n        business_premises int\n        id int\n    }\n\n    conditions {\n        \n    }\n\n    action {\n        $ret_m = DBFind(\"pc_license_application\").WhereId($id).One(\"name_reservation\")\n        $ret_l = DBFind(\"pc_license_application\").WhereId($id).One(\"property_suitability\")\n        DBUpdate(\"pc_license_application\", $id, \"company_name,business_scope,business_premises\", $company_name, $business_scope,$business_premises)\n        if (Int($ret_m) == 2){\n            pcCompanyName(\"application_id\",$id)\n        }\n        if (Int($ret_l) == 3){\n            DBUpdate(\"pc_license_application\", $id, \"property_suitability\", 0)\n        }      \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pcShareholding",
            "Value": "contract pcShareholding \n{\n    data \n    {\n        Id array \"optional\"\n        Shareholding array \"optional\"\n        \n    }\n\n    conditions \n    {   \n        \n        var len, i, summ int\n        i=0\n        summ=0\n\n        len = Len($Shareholding)\n        while i < len \n        {\n            summ = summ + Int($Shareholding[i])\n            /*if(Int($Shareholding[i])==0)\n            {\n                warning(\"The value can not be zero.\")\n            }*/\n\t\t\ti = i + 1\n\t\t}\n\t\n\t\tif summ != 100\n\t\t{\n\t\t    warning(\"The amount if shareholding is not 100\")\n\t\t}\n    }\n\n    action \n    {\n        var i,len int\n        len = Len($Shareholding)\n\t\t\n\t\twhile i < len {\n            DBUpdate(\"pc_app_shareholders\", Int($Id[i]), \"shareholding\", Int($Shareholding[i]))\n            i = i + 1\n\t\t}\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "referendums_accept",
            "Value": "contract referendums_accept {\n    data {\n        referendum_id int\n    }\n\n    conditions {\n        $referendums_map = DBFind(\"referendums\").Where(\"id=$\", $referendum_id).Row()\n        if ($referendums_map[\"id\"] == nil) {\n            warning \"Referendum not found\"\n        }\n\n\t\t$participant_id = DBFind(\"referendums_participants\").Where(\"referendum_id=$ and member_id=$\", $referendum_id, $key_id).One(\"id\")\n        if ($participant_id != nil){\n\t\t\twarning \"You already voted\"\n\t\t}\n\n        $votes_total = Int($referendums_map[\"votes_total\"])\n        $votes_accept = Int($referendums_map[\"votes_accept\"])\n        $votes_reject = Int($referendums_map[\"votes_reject\"])\n        $percent_accept = Int($referendums_map[\"percent_accept\"])\n        $percent_reject = Int($referendums_map[\"percent_reject\"])\n    }\n\n    action {\n        $votes_total = $votes_total + 1\n        $votes_accept = $votes_accept + 1\n\n        $percent_accept = $votes_accept * 100 / $votes_total\n        $percent_reject = 100 - $percent_accept\n\n        DBUpdate(\"referendums\", $referendum_id, \"votes_total,votes_accept,votes_reject,percent_accept,percent_reject\", $votes_total, $votes_accept, $votes_reject, $percent_accept, $percent_reject)\n        DBInsert(\"referendums_participants\", \"referendum_id,member_id,decision\", $referendum_id, $key_id, 1)\n\n        var params string\n        params = \"referendum_id=\" + Str($referendum_id)\n        $notific_id = DBFind(\"notifications\").Where(\"page_name=$ and page_params=$ and recipient_id=$ and closed=$\", \"referendums_view\", params, $key_id, 0).One(\"id\")\n        if ($notific_id != nil){\n            Notifications_Single_Close(\"notific_id\", Int($notific_id))\n\t\t}\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "referendums_add",
            "Value": "contract referendums_add {\n    data {\n        referendum_name string\n        question string\n    }\n\n    conditions {}\n\n    action {\n        $referendum_id = DBInsert(`referendums`, `name,question`, $referendum_name, $question)\n\n        $ret_member = DBFind(\"members\").Where(\"id != $\", 0).Order(\"id\")\n        $i = 0\n        while($i < Len($ret_member)){\n            $vals_member = $ret_member[$i]\n            \n\t\t\tvar params string\n\t\t\tparams = \"referendum_id=\" + Str($referendum_id)\n            \n\t\t\tNotifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", \n\t\t\t\t\t\t\t\t$vals_member[\"id\"], \"fa-check\", \"Referendum\", $referendum_name, \"referendums_view\", params)\n\n            $i = $i + 1\n        } \n\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "referendums_reject",
            "Value": "contract referendums_reject {\n    data {\n        referendum_id int\n    }\n\n    conditions {\n        $referendums_map = DBFind(\"referendums\").Where(\"id=$\", $referendum_id).Row()\n        if ($referendums_map[\"id\"] == nil) {\n            warning \"Referendum not found\"\n        }\n\n\t\t$participant_id = DBFind(\"referendums_participants\").Where(\"referendum_id=$ and member_id=$\", $referendum_id, $key_id).One(\"id\")\n        if ($participant_id != nil){\n\t\t\twarning \"You already voted\"\n\t\t}\n\n        $votes_total = Int($referendums_map[\"votes_total\"])\n        $votes_accept = Int($referendums_map[\"votes_accept\"])\n        $votes_reject = Int($referendums_map[\"votes_reject\"])\n        $percent_accept = Int($referendums_map[\"percent_accept\"])\n        $percent_reject = Int($referendums_map[\"percent_reject\"])\n    }\n\n    action {\n        $votes_total = $votes_total + 1\n        $votes_reject = $votes_reject + 1\n\n        $percent_accept = $votes_accept * 100 / $votes_total\n        $percent_reject = 100 - $percent_accept\n\n        DBUpdate(\"referendums\", $referendum_id, \"votes_total,votes_accept,votes_reject,percent_accept,percent_reject\", $votes_total, $votes_accept, $votes_reject, $percent_accept, $percent_reject)\n        DBInsert(\"referendums_participants\", \"referendum_id,member_id,decision\", $referendum_id, $key_id, -1)\n\n        var params string\n        params = \"referendum_id=\" + Str($referendum_id)\n        $notific_id = DBFind(\"notifications\").Where(\"page_name=$ and page_params=$ and recipient_id=$ and closed=$\", \"referendums_view\", params, $key_id, 0).One(\"id\")\n        if ($notific_id != nil){\n            Notifications_Single_Close(\"notific_id\", Int($notific_id))\n\t\t}\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_RoleUnassign",
            "Value": "contract sysparams_RoleUnassign {\n    data {\n        RId int\n    }\n    \n    conditions {\n        $raId = DBFind(`roles_assign`).Where(`id=$`, $RId).One(\"id\")\n        if $raId == nil {\n            warning \"Role not found for the specified member\"\n        }\n    }\n    \n    action {\n        DBUpdate(`roles_assign`, Int($raId), `delete,timestamp date_end`, 1, $block_time)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_RoleAssign",
            "Value": "contract sysparams_RoleAssign {\n    data{\n        RoleName string\n        KeyId int\n    }\n    \n    conditions {\n        $role = DBFind(\"roles_list\").Where(\"role_name=? and delete=0\", $RoleName).Row()\n        if !$role {\n            warning Sprintf(\"Role not found(%v)\", $RoleName)\n        }\n        \n        $member = DBFind(\"members\").WhereId($KeyId).Row()\n        if !$member {\n            // warning \"Member not found\"\n            return\n        }\n        \n        $role_assign = DBFind(`roles_assign`).Where(`role_id=? and member_id=? and delete=0`, $role[\"id\"], $KeyId).Row()\n        if $role_assign {\n            // warning \"This member has already been added\"\n            return\n        }\n    }\n    \n    action {\n        DBInsert(`roles_assign`, `role_id,role_type,role_name,member_id,member_name,member_avatar,appointed_by_id,appointed_by_name,timestamp date_start,delete`, $role[\"id\"], $role[\"role_type\"], $role[\"role_name\"], $KeyId, $member[\"member_name\"], $member[\"avatar\"], $KeyId, $member[\"member_name\"], $block_time, 0)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_CandidateValidator_Delete",
            "Value": "contract sysparams_CandidateValidator_Delete{\n    data{\n        Id int\n    }\n    conditions{\n        $roleName = \"Candidate for validators\"\n        // RoleConditions(\"role\",\"deleter\")\n        \n        $candidateId = DBFind(\"sysparams_candidate\").WhereId($Id).One(\"candidate_key_id\")\n        \n        $raId = DBFind(\"roles_assign\").Where(\"role_name=? and delete=0 and member_id=?\",$roleName, $candidateId).One(\"id\")\n    }\n    action{\n        DBUpdate(\"sysparams_candidate\", $Id, \"deleted\", 1)\n        DBUpdate(\"roles_assign\", $raId, \"delete\", 1)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_CandidateValidatorRequest",
            "Value": "contract sysparams_CandidateValidatorRequest{\n    data{\n        HostIp string\n        CommissionPub string\n        CommissionAddress string\n        Description string \"optional\"\n        Comment string \"optional\"\n    }\n    \n    func IsNotValidIp(ip string)bool{\n        var parts array\n        var i, lenParts, part int\n        parts = Split(ip, \".\")\n        \n        lenParts = Len(parts)\n        if lenParts != 4{\n            return true\n        }\n        while i< lenParts {\n            part = Int(parts[i])\n            if part < 0{\n                return true\n            }\n            if part > 255{\n                return true\n            }\n            i = i+1\n        }\n        \n        return false\n    }\n    \n    conditions{\n        $candidateTbl = \"sysparams_candidate\"\n        $roleName = \"Candidate for validators\"\n        \n        $CommissionAddress = AddressToId($CommissionAddress)\n        if $CommissionAddress != PubToID($CommissionPub) {\n            info \"Address or Public key are invalide\"\n        }\n        \n        if IsNotValidIp($HostIp){\n            warning \"Please enter a valid ip address\"\n        }\n        \n        sysparams_RoleAssign(\"RoleName,KeyId\", $roleName, $key_id)\n    }\n    \n    action{\n        \n        DBInsert($candidateTbl, \"host_ip,commission_pub,commission_address,description,comment,candidate_key_id,timestamp date_created,deleted\", $HostIp, $CommissionPub, $CommissionAddress, $Description, $Comment, $key_id, $block_time, 0)\n        \n    }\n    \n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectCheckFulldata",
            "Value": "contract voting_SubjectCheckFulldata {\n    data {\n        votingID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=?\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting is not found\"\n\t\t}\t\n\t\t\n\t\t$subject_map = DBFind(\"voting_subject\").Where(\"voting_id=?\", $votingID).Row()\n\t\tif ($subject_map[\"id\"] == nil){\n\t\t\twarning \"Subject of voting is not found\"\n\t\t}\n\t\t\n\t\t$typedecision = Int($voting_map[\"typedecision\"])\n    }\n\n    action {\n\t\tif ( ($typedecision == 1) || ($typedecision == 2) ){\n\t\t\tif ( (Int($voting_map[\"optional_number_cands\"]) > 0) && (Int($voting_map[\"optional_role_vacancies\"]) > 0) && (Int($voting_map[\"optional_role_id\"])  > 0) ){\n\t\t\t\tDBUpdate(`voting_instances`, $votingID, `flag_fulldata`, 1)\n\t\t\t} \n\t\t}\n\n\t\tif ($typedecision == 3){\n\t\t\tif ( (string($subject_map[\"text_document\"]) != \"\") && (string($subject_map[\"text_doc_hash\"]) != \"\") ){\n\t\t\t\tDBUpdate(`voting_instances`, $votingID, `flag_fulldata`, 1)\n\t\t\t} \n\t\t}\n\n\t\tif ($typedecision == 4){\n\t\t\tif ( (string($subject_map[\"formal_decision_description\"]) != \"\") && (string($subject_map[\"formal_decision_table\"])  != \"\") && \n\t\t\t\t (string($subject_map[\"formal_decision_tableid\"])     != \"\") && (string($subject_map[\"formal_decision_column\"]) != \"\") && \n\t\t\t\t (string($subject_map[\"formal_decision_colvalue\"])    != \"\") ){\n\t\t\t\tDBUpdate(`voting_instances`, $votingID, `flag_fulldata`, 1)\n\t\t\t} \n\t\t}\n\n\t\tif ($typedecision == 5){\n\t\t\tif ( (string($subject_map[\"contract_accept\"]) != \"\") && (string($subject_map[\"contract_reject\"]) != \"\") ){\n\t\t\t\tDBUpdate(`voting_instances`, $votingID, `flag_fulldata`, 1)\n\t\t\t} \n\t\t}\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_RefreshInvestors",
            "Value": "contract sysparams_RefreshInvestors {\n    data {\n        role_id int\n    }\n    \n    conditions{\n        $limitInvestors = 3\n        \n        $founder = EcosysParam(\"founder_account\")\n        if Str($key_id) != $founder{\n            info \"You can not start to voting\"\n        }\n        \n        $role = DBFind(\"roles_list\").Where(\"id=?\", $role_id).Row()\n        if !$role{\n            warning \"Role not found\"\n        }\n        \n        $role_name = $role[\"role_name\"]\n        $role_type = Int($role[\"role_type\"])\n        \n    }\n    \n    action{\n        // remove old investors\n        DBUpdateExt(\"roles_assign\", \"role_id\", $role_id, \"delete\", 1)\n        \n        // get appointer\n        $appointerFind = DBFind(\"members\").Where(\"member_id=?\",$key_id)\n        $appointer = $appointerFind[0]\n        \n        // assign new investors\n        $investorsFind = DBFind(\"keys\").Order(\"amount desc, id\").Limit($limitInvestors)\n        $lenInvestors = Len($investorsFind)\n        \n        $i = 0\n        while($i < $lenInvestors){\n            $investor = $investorsFind[$i]\n            $memberFind = DBFind(\"members\").Where(\"member_id=?\", $investor[\"id\"])\n            if Len($memberFind) > 0{\n                $member = $memberFind[0]\n                DBInsert(\"roles_assign\", `role_id,role_type,role_name,member_id,member_name,member_avatar,appointed_by_id,appointed_by_name,timestamp date_start,delete`, $role_id, $role_type, $role_name, $investor[\"id\"], $member[\"member_name\"], $member[\"avatar\"], $key_id, $appointer[\"member_name\"], $block_time, 0)\n            }\n            $i =$i+1\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_DelegateRefresh",
            "Value": "contract sysparams_DelegateRefresh{\n    func NotInArray(val string, arr array) bool{\n        var i int\n        // info arr\n        while i< Len(arr){\n            if val == arr[i]{\n                return false\n            }\n            i=i+1\n        }\n        return true\n    }\n    \n    func conditions{\n        $roleName = \"Delegate\"\n        $delegateParam = \"delegate_account\"\n        $ecosParamTbl = \"parameters\"\n        \n        $raTbl = \"roles_assign\"\n        $rolesTbl = \"roles_list\"\n        \n        // get role Id and Type\n        $role = DBFind($rolesTbl).Where(\"role_name=?\", $roleName).Order(\"id\").Row()\n        if !$role{\n            return \"Role not found\"\n        }\n        $roleId = $role[\"id\"]\n        $roleType = $role[\"role_type\"]\n        \n    }\n    \n    func action{\n        // get delegates ids\n        var delegateIds array\n        var dIndex int\n        $i = 1\n        while $i <= $ecosystem_id {\n            $delegate = DBFind($ecosParamTbl).Where(\"name=?\",$delegateParam).Ecosystem($i).Row()\n            if !$delegate{\n                $delegate = DBFind($ecosParamTbl).Where(\"name='founder_account'\").Ecosystem($i).Row()\n            }\n            $delegateValue = $delegate[\"value\"]\n            if NotInArray($delegateValue, delegateIds){\n                delegateIds[dIndex] = $delegateValue\n                dIndex = dIndex + 1\n            }\n            $i = $i + 1\n        }\n        \n        // remove old role assigns\n        $currentDelegatesFind = DBFind($raTbl).Where(\"role_id=? and delete=0\", $roleId)\n        $i = 0\n        while $i < Len($currentDelegatesFind){\n            $currentDelegate = $currentDelegatesFind[$i]\n            if NotInArray($currentDelegate[\"member_id\"], delegateIds){\n                $Id = $currentDelegate[\"id\"]\n                DBUpdate($raTbl, Int($Id), \"delete\", 1)\n            }\n            $i = $i + 1\n        }\n        \n        // assign new roles\n        $i = 0\n        while $i < Len(delegateIds) {\n            $delegateId = Int(delegateIds[$i])\n            $memberId = DBFind(\"members\").WhereId($delegateId).One(\"id\")\n            if $memberId{\n                // check role dup\n                $assigned = DBFind($raTbl).Where(\"member_id=? and role_id=? and delete=0\", $delegateId, $roleId).Row()\n                if !$assigned{\n                    sysparams_RoleAssign(\"RoleName,KeyId\", $roleName, Int($memberId))\n                }\n            }\n            $i =$i+1\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_AcceptRole",
            "Value": "contract sysparams_AcceptRole{\n    data{\n        VotingTemplateId string\n        KeyId string\n    }\n    func conditions{\n        $Id = Int($KeyId)\n        \n        $raTbl = \"roles_assign\"\n        $paramsTbl = \"voting_templates\"\n        $votingParams = DBFind($paramsTbl).Where(\"id=?\", $VotingTemplateId).Row()\n        if !$votingParams{\n            warning \"Voting params not found\"\n        }\n        \n        $oldRoleName = $votingParams[\"precondition\"]\n        $roleName = $votingParams[\"subject\"]\n        \n        $oldRoleId = DBFind(\"roles_list\").Where(\"role_name=? and delete=0\", $oldRoleName).One(\"id\")\n    }\n    \n    func action{\n        // resign old role\n        $raId = DBFind($raTbl).Where(\"delete=0 and role_id=? and member_id=?\", $oldRoleId, $Id).One(\"id\")\n        if $raId !=nil {\n            sysparams_RoleUnassign(\"RId\", Int($raId))\n        }\n        // assign new role\n        sysparams_RoleAssign(\"RoleName,KeyId\", $roleName, $Id)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectFormal",
            "Value": "contract voting_SubjectFormal {\n    data {\n        votingID int\n        \n        description string\n        table_to_written string\n        row_id string\n        column_name string\n        written_value string\n        \n        contract_reject string \"optional\"\n        contract_accept string \"optional\"\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=? and startdate > now()\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting already started. Can not edit document\"\n\t\t}\t\t\n\t\tif ( (Int($voting_map[\"flag_fulldata\"]) == 1) && (Int($voting_map[\"type_voting\"]) == 2) ){\n\t\t\twarning \"This vote is a system. Change settings not allowed\"\n\t\t}\n    }\n\n    action {\n\t\t$subject_id = DBFind(\"voting_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n\t\tif ($subject_id != nil){\n\t\t\tDBUpdate(`voting_subject`, Int($subject_id), `formal_decision_description,formal_decision_table,formal_decision_tableid,formal_decision_column,formal_decision_colvalue`, \n\t\t\t\t$description, $table_to_written, $row_id, $column_name, $written_value)\n\t\t} else {\n\t\t\tDBInsert(`voting_subject`, `voting_id,formal_decision_description,formal_decision_table,formal_decision_tableid,formal_decision_column,formal_decision_colvalue`, \n\t\t\t\t$votingID, $description, $table_to_written, $row_id, $column_name, $written_value)\n\t\t}\n\n\t\tDBUpdate(`voting_instances`, $votingID, `optional_contract_accept,optional_contract_reject`, $contract_accept, $contract_reject)\n\t\tvoting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_UpdateDataForGraphs",
            "Value": "contract voting_UpdateDataForGraphs {\n    data {\n        votingID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting is not found\"\n\t\t}\t\n\t\t\n\t\t$number_participants = Int($voting_map[\"number_participants\"])  // number of participants\n\t\t$number_voters       = Int($voting_map[\"number_voters\"])        // number of voters\n\t\t$volume              = Int($voting_map[\"volume\"])               // percentage of votes for this vote\n    }\n\n    action {\n\t\t// increment count of voters\n\t\t$number_voters = $number_voters + 1\n\t\t\n\t\t// calculate the percentage of the ratio of the number of voters to the number of participants (for the graph)\n\t\t$percent_voters = ($number_voters * 100) / $number_participants\n\t\tif ($percent_voters > 100) {$percent_voters = 100}\n\t\t\n\t\t// update progress\n\t\t$percent_success = ($percent_voters * 100) / $volume\n\t\tif ($percent_success > 100) {$percent_success = 100}\n\t\t\n\t\t// update the flag of success\n\t\t$flag_success = 0\n\t\tif ($percent_success == 100) {$flag_success = 1}\n\n\t\tDBUpdate(`voting_instances`, $votingID, `number_voters,percent_voters,percent_success,flag_success`, \n\t\t\t\t$number_voters, $percent_voters, $percent_success, $flag_success)\n    } \n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_AcceptCandidates",
            "Value": "contract voting_AcceptCandidates {\n    data {\n        votingID int\n        candidateID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting is not found\"\n\t\t}\n\t\t$subject_map = DBFind(\"voting_subject\").Where(\"voting_id=$ and member_id=$\", $votingID, $candidateID).Row()\n\t\tif ($subject_map[\"id\"] == nil){\n\t\t\twarning \"Subject of voting is not found\"\n\t\t}\n\t\t\n\t\t// check the participant of the voting\n\t\t$participant_id = DBFind(`voting_participants`).Where(\"voting_id=$ and member_id=$\", $votingID, $key_id).One(\"id\")\n\t\tif ($participant_id == nil){\n\t\t\twarning \"You are not a participant in this voting\"\n\t\t}\n    }\n\n    action {\n\t\t// if notifications have been sent, then close it\n\t\tif ( Int($voting_map[\"flag_notifics\"]) == 1 ){\n\t\t\tvar params string\n\t\t\tparams = \"notific_param=\" + Str($votingID)\t\t\n\t\t\t$notific_id = DBFind(`notifications`).Where(\"recipient_id=$ and page_name=$ and page_params=$ and closed=$\", $key_id, \"voting_view\", params, 0).One(\"id\")\n\t\t\tif ($notific_id != nil){\n\t\t\t\tNotifications_Single_Close(\"notific_id\", Int($notific_id))\n\t\t\t}\n\t\t}\n\n\t\t// check the decision\n\t\tif ( Int($voting_map[\"flag_decision\"]) == 1 ){\n\t\t\twarning \"Decision was taken. Voting is now not possible\"\n\t\t} \n\t\t\n\t\t// check start-end of voting time\n\t\t$voting_start = DBFind(`voting_instances`).Where(\"id=$ and startdate < now()\", $votingID).One(\"id\")\n\t\t$voting_end   = DBFind(`voting_instances`).Where(\"id=$ and enddate   > now()\", $votingID).One(\"id\")\n\t\tif ($voting_start == nil){\n\t\t\twarning \"Voting has not yet begun. Try again later, please\"\n\t\t}\n\t\tif ($voting_end == nil){\n\t\t\twarning \"Voting has expired. Voting is now not possible\"\n\t\t}\n\t\t\n\t\t//-----------------------------------------------------------------------------------------------\n\n\t\t// write the result of the voting\n\t\tDBUpdate(`voting_participants`, Int($participant_id), `timestamp decision_date, decision`, $block_time, $candidateID)\n\n\t\t// increment count of accept\n\t\t$subject_id     = Int($subject_map[\"id\"])\n\t\t$number_accept  = Int($subject_map[\"number_accept\"])\n\t\t$number_accept   = $number_accept + 1\n\t\tDBUpdate(`voting_subject`, $subject_id, `number_accept`, $number_accept)\n\n\t\tvoting_UpdateDataForGraphs(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_CheckDecision",
            "Value": "contract voting_CheckDecision {\n    func stringToMap(s string) map{\n        var arr, par array\n        var i int\n        var res map\n        arr = Split(s, \";\")\n        while i < Len(arr){\n            par = Split(arr[i], \"->\")\n            if Len(par) == 2{\n                res[par[0]] = par[1]\n            }\n            i=i+1\n        }\n        return res\n    }\n    data {\n        votingID int\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"voting_instances\").Where(\"id=$ and enddate < now()\", $votingID).Row()\n        if !$voting_map[\"id\"]{\n            warning \"Voting has not expired. Try again later, please\"\n        }\n        if Int($voting_map[\"creator_id\"]) != $key_id {\n            warning \"Only creator the voting can check decision\"\n        }\n        \n        $type_voting = Int($voting_map[\"type_voting\"])\t//system or custom\n        $number_voters = Int($voting_map[\"number_voters\"]) // number of participants who have already voted\n        $optional_role_vacancies = Int($voting_map[\"optional_role_vacancies\"]) // number of vacancies for the role\n        $voting_name = $voting_map[\"name\"]\n        $quorum = Int($voting_map[\"quorum\"])\n        $optional_role_id = Int($voting_map[\"optional_role_id\"])\n        $contract_accept = $voting_map[\"optional_contract_accept\"]\n        $contract_reject = $voting_map[\"optional_contract_reject\"]\n        $param_accept = stringToMap($voting_map[\"contract_accept_params\"])\n        $param_reject = stringToMap($voting_map[\"contract_reject_params\"])\n        $flag_success = Int($voting_map[\"flag_success\"])\n        $typedecision = Int($voting_map[\"typedecision\"])\n        \n        $subjectId = DBFind(\"voting_subject\").Where(\"voting_id=$\", $votingID).One(\"id\")\n        if $subjectId == nil {\n            warning \"Subject of voting is not found\"\n        }\n    }\n    \n    action {\n        // if notifications have been sent, then close it\n        var params string\n        params = \"notific_param=\" + Str($votingID)\n        $ret_notifics = DBFind(\"notifications\").Where(\"page_name=$ and page_params=$ and closed=0\", \"voting_view\", params)\n        var i int\n        while(i < Len($ret_notifics)){\n            $vals_notifics = $ret_notifics[i]\n            Notifications_Single_Close(\"notific_id\", Int($vals_notifics[\"id\"]))\n            i = i + 1\n        }\n        \n        //if the flag of success = true(enough participants to make a decision)\n        if($flag_success == 1){\n            if(($typedecision == 1) ||($typedecision == 2) ){\n                $number_inserts = 0 // number of candidates who have already been added(for comparison with the number of vacancies)\n                $flag_decision = -1 // none of the candidates has been added yet\n                \n                $ret_subject = DBFind(\"voting_subject\").Where(\"voting_id=$\", $votingID).Order(\"number_accept DESC\")\n                i = 0\n                while i < Len($ret_subject){\n                    $vals_subject = $ret_subject[i]\n                    \n                    // if there are still vacancies\n                    if $number_inserts < $optional_role_vacancies {\n                        // calculate the percentage to compare it with the quorum\n                        $v_percent = Int($vals_subject[\"number_accept\"]) * 100 / $number_voters\n                        // if percentage >= quorum values, then this candidate must be added to the role\n                        if $v_percent >= $quorum {\n                            // get role name\n                            $role_name = DBFind(`roles_list`).Where(\"id=$\", $optional_role_id).One(\"role_name\")\n                            if $role_name != nil {\n                                // add a candidate to the role\n                                DBInsert(`roles_assign`, `role_id,role_name,member_id,member_name,member_avatar,timestamp date_start,appointed_by_id,appointed_by_name`,$optional_role_id, string($role_name), Int($vals_subject[\"member_id\"]), string($vals_subject[\"member_name\"]), string($vals_subject[\"member_avatar\"]), $block_time, $votingID, $voting_name)\n                                \n                                // increment of the counter of candidates\n                                $number_inserts = $number_inserts + 1\n                                // if at least one of the candidates was added to the role, then the voting decision is considered successful\n                                $flag_decision = 1\n                            }\n                        }\n                    }\n                    i = i + 1\n                }\n                \n                DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)\n                \n                // starting optional contract\n                if($flag_decision == 1){\n                    if($contract_accept != \"\"){\n                        CallContract($contract_accept, $param_accept)\n                    }\n                }\n                else{\n                    if($contract_reject != \"\"){\n                        CallContract($contract_reject, $param_reject)\n                    }\n                }\n            }\n            \n            if($typedecision == 3){\n                $number_accept = DBFind(`voting_subject`).Where(\"voting_id=$\", $votingID).One(\"number_accept\")\n                if($number_accept != nil){\n                    // calculate the percentage to compare it with the quorum\n                    $v_percent = Int($number_accept) * 100 / $number_voters\n                    \n                    // if percentage >= quorum values, then this document will be approved\n                    if($v_percent >= $quorum){\n                        $flag_decision = 1\n                    }\n                    // otherwise the document will be rejected\n                    else{\n                        $flag_decision = -1\n                    }\n                    \n                    DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)\n                    \n                    // starting optional contract\n                    if($flag_decision == 1){\n                        if($contract_accept != \"\"){\n                            CallContract($contract_accept, $param_accept)\n                        }\n                    }\n                    else{\n                        if($contract_reject != \"\"){\n                            CallContract($contract_reject, $param_reject)\n                        }\n                    }\n                }\n            }\n            \n            if($typedecision == 4){\n                $subject_map = DBFind(\"voting_subject\").Where(\"voting_id=$\", $votingID).Row()\n                if($subject_map[\"id\"] != nil){\n                    $number_accept = Int($subject_map[\"number_accept\"])\n                    \n                    // calculate the percentage to compare it with the quorum\n                    $v_percent = $number_accept * 100 / $number_voters\n                    \n                    // if percentage >= quorum values, then this document will be approved\n                    if($v_percent >= $quorum){\n                        $flag_decision = 1\n                        \n                        $decisionTable = $subject_map[\"formal_decision_table\"]\n                        $decisionId = Int($subject_map[\"formal_decision_tableid\"])\n                        $decisionColumn =$subject_map[\"formal_decision_column\"]\n                        $decisionValue = $subject_map[\"formal_decision_colvalue\"]\n                        \n                        // type of voting - custom\n                        if($type_voting == 1){\n                            // ALWAYS CHECK THE PERMISSION\n                            DBUpdate($decisionTable, $decisionId, $decisionColumn, $decisionValue)\n                        }\n                        \n                        // type of voting - system\n                        if($type_voting == 2){\n                            DBUpdateSysParam($decisionColumn, $decisionValue, ``)\n                        }\n                    }\n                    // otherwise the document will be rejected\n                    else{\n                        $flag_decision = -1\n                    }\n                    \n                    DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)\n                    \n                    // starting optional contract\n                    if($flag_decision == 1){\n                        if($contract_accept != \"\"){\n                            CallContract($contract_accept, $param_accept)\n                        }\n                    }\n                    else{\n                        if($contract_reject != \"\"){\n                            CallContract($contract_reject, $param_reject)\n                        }\n                    }\n                }\n            }\n            \n            if($typedecision == 5){\n                $subject_map = DBFind(\"voting_subject\").Where(\"voting_id=$\", $votingID).Row()\n                if($subject_map[\"id\"] != nil){\n                    $number_accept = Int($subject_map[\"number_accept\"])\n                    \n                    // calculate the percentage to compare it with the quorum\n                    $v_percent = $number_accept * 100 / $number_voters\n                    \n                    $con_accept = $subject_map[\"contract_accept\"]\n                    $con_accept = $subject_map[\"contract_accept\"]\n                    $param_accept = stringToMap($subject_map[\"contract_accept_params\"])\n                    $param_reject = stringToMap($subject_map[\"contract_reject_params\"])\n                    \n                    // if percentage >= quorum values, then this document will be approved\n                    if($v_percent >= $quorum){\n                        $flag_decision = 1\n                        \n                        CallContract($con_accept, $param_accept)\n                    }\n                    // otherwise the document will be rejected\n                    else{\n                        $flag_decision = -1\n                        \n                        CallContract($con_reject, $param_reject)\n                    }\n                }\n                \n                DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)\n            }\n        }\n        // decision can not be made(not enough participants to make a decision)\n        else {\n            DBUpdate(`voting_instances`, $votingID, `flag_decision`, -2)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_Invite",
            "Value": "contract voting_Invite {\n    data {\n        votingID int\n        var_id int      //0, member_id, role_id\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$ and enddate > now()\", $votingID).Row()\t\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting has expired. Can not add new participants\"\n\t\t}\n\t\n\t\t$type_participants = Int($voting_map[\"typeparticipants\"])\n\t\t$number_participants = Int($voting_map[\"number_participants\"])\n\t\n\t\tif (($number_participants > 1) && (Int($voting_map[\"type_voting\"]) == 2)){\n\t\t\twarning \"This vote is a system. Add new participants are not possible\"\n\t\t}\n\n\t\tif ($type_participants == 2){       //list of candidates\n\t\t\t$participant_id = DBFind(\"voting_participants\").Where(\"voting_id=$ and member_id=$\", $votingID, $var_id).One(\"id\")\n\t\t\tif ($participant_id != nil){\t\t\n\t\t\t\twarning \"Member has already been added before\"\n\t\t\t}\n\t\t}\n\n\t\tif ($type_participants == 3){       //list of candidates\n\t\t\t$participant_id = DBFind(\"voting_participants\").Where(\"voting_id=$\", $votingID).One(\"id\")\n\t\t\tif ($participant_id != nil){\t\t\n\t\t\t\twarning \"Voting participants have already been added before\"\n\t\t\t}\n\t\t}\n    }\n\n    action {\n\t\tif ($type_participants == 1){\n\t\t\t$ret_member = DBFind(\"members\").Where(\"id != $\", 0).Order(\"id\")\n\t\t\t$i = 0\n\t\t\twhile($i < Len($ret_member)){\n\t\t\t\t$vals_member = $ret_member[$i]\n\t\t\t\t\n\t\t\t\tDBInsert(`voting_participants`, `voting_id, member_id, member_name, member_avatar, decision`, $votingID, $vals_member[\"id\"], $vals_member[\"member_name\"], $vals_member[\"avatar\"], 0)  \n\t\t\t\t$number_participants = $number_participants + 1\n\t\t\t\t$i = $i + 1\n\t\t\t} \n\t\t}\n\n\t\tif ($type_participants == 2){\n\t\t\t$member_map = DBFind(\"members\").Where(\"id = $\", $var_id).Row()\n\t\t\tif ($member_map[\"id\"] != nil){\n\t\t\t\tDBInsert(`voting_participants`, `voting_id, member_id, member_name, member_avatar, decision`, $votingID, $var_id, $member_map[\"member_name\"], $member_map[\"avatar\"], 0)  \n\t\t\t\t$number_participants = $number_participants + 1\n\t\t\t}\n\t\t}\n\n\t\tif ($type_participants == 3){\n\t\t\t$ret_member = DBFind(\"roles_assign\").Where(\"role_id=$ and delete=0\", $var_id).Order(\"id\")\n\t\t\t$i = 0\n\t\t\twhile($i < Len($ret_member)){\n\t\t\t\t$vals_member = $ret_member[$i]\n\t\t\t\t\n\t\t\t\tDBInsert(`voting_participants`, `voting_id, member_id, member_name, member_avatar, decision`, $votingID, $vals_member[\"member_id\"], $vals_member[\"member_name\"], $vals_member[\"member_avatar\"], 0)  \n\t\t\t\t$number_participants = $number_participants + 1\n\t\t\t\t$i = $i + 1\n\t\t\t} \n\t\t}\n\n\t\tDBUpdate(`voting_instances`, $votingID, `number_participants`, $number_participants)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_Delete",
            "Value": "contract voting_Delete {\n    data {\n        votingID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=? and startdate > now()\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting already started. Delete voting impossible\"\n\t\t}\t\n\t\t\n\t\tif (Int($voting_map[\"creator_id\"]) != $key_id){\n\t\t\twarning \"You are not the creator of the voting\"\n\t\t}\n    }\n\n    action {\n\t\tDBUpdate(`voting_instances`, $votingID, `delete`, 1)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_CreateNew",
            "Value": "contract voting_CreateNew {\n    data {\n        voting_name string\n        type_voting int\n        description string\n        type_participants int\n        type_decision int\n        now_date string \"date\"\n        start_time string \"date\"\n        start_date string \"date\"\n        end_date string \"date\"\n        end_time string \"date\"\n        volume int\n        quorum int\n    }\n\n    func conditions {\n        $start_date = $start_date + \" \"+ $start_time \n        $end_date = $end_date + \" \"+ $end_time \n\n        if ( $now_date >= $start_date ){\n            warning \"Voting start date is less than the current date\"\n        }\n        \n        if ( $start_date >= $end_date ){\n            warning \"Voting end date is less than the start date\"\n        }\n        \n        if ( ($volume < 50) || ($volume > 100) ){\n            warning \"Volume should be in the range from 50 to 100\"  \n        }\n        \n        if ( ($quorum < 5) || ($quorum > 100) ){\n            warning \"Quorum should be in the range from 5 to 100\"  \n        }\n\n\t\t$member_map = DBFind(\"members\").Where(\"id=$\", $key_id).Row()\n\t\tif ($member_map[\"id\"] == nil){\n\t\t\twarning \"You are not a member of the ecosystem\"\n\t\t}\n    }\n\n    func action {\n\t\t$voting_id = DBInsert(`voting_instances`, `name,type_voting,description,typeparticipants,typedecision,startdate,enddate,volume,quorum,creator_id,creator_name,creator_avatar,flag_success,percent_success,number_participants,number_voters,flag_decision,flag_notifics,delete`, \n\t\t\t\t\t$voting_name, $type_voting, $description, $type_participants, $type_decision, $start_date, $end_date, $volume, $quorum, $key_id, $member_map[\"member_name\"], $member_map[\"avatar\"], 0, 0, 0, 0, 0, 0, 0)\n\t\n\t\t// if all members are voting participants\n\t\tif ($type_participants==1){\n\t\t\tvoting_Invite(\"votingID,var_id\", $voting_id, 0)\n\t\t}\n\t}\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_AcceptDecision",
            "Value": "contract voting_AcceptDecision {\n    data {\n        votingID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting is not found\"\n\t\t}\n\t\t$subject_map = DBFind(\"voting_subject\").Where(\"voting_id=$\", $votingID).Row()\n\t\tif ($subject_map[\"id\"] == nil){\n\t\t\twarning \"Subject of voting is not found\"\n\t\t}\n\t\t\n\t\t// check the participant of the voting\n\t\t$participant_id = DBFind(`voting_participants`).Where(\"voting_id=$ and member_id=$\", $votingID, $key_id).One(\"id\")\n\t\tif ($participant_id == nil){\n\t\t\twarning \"You are not a participant in this voting\"\n\t\t}\n    }\n\n    action {\n\t\t// if notifications have been sent, then close it\n\t\tif ( Int($voting_map[\"flag_notifics\"]) == 1 ){\n\t\t\tvar params string\n\t\t\tparams = \"notific_param=\" + Str($votingID)\t\n\t\t\t$notific_id = DBFind(`notifications`).Where(\"recipient_id=$ and page_name=$ and page_params=$ and closed=$\", $key_id, \"voting_view\", params, 0).One(\"id\")\n\t\t\tif ($notific_id != nil){\n\t\t\t\tNotifications_Single_Close(\"notific_id\", Int($notific_id))\n\t\t\t}\n\t\t}\n\n\t\t// check the decision\n\t\tif ( Int($voting_map[\"flag_decision\"]) == 1 ){\n\t\t\twarning \"Decision was taken. Voting is now not possible\"\n\t\t} \n\t\t\n\t\t// check start-end of voting time\n\t\t$voting_start = DBFind(`voting_instances`).Where(\"id=$ and startdate < now()\", $votingID).One(\"id\")\n\t\t$voting_end   = DBFind(`voting_instances`).Where(\"id=$ and enddate   > now()\", $votingID).One(\"id\")\n\t\tif ($voting_start == nil){\n\t\t\twarning \"Voting has not yet begun. Try again later, please\"\n\t\t}\n\t\tif ($voting_end == nil){\n\t\t\twarning \"Voting has expired. Voting is now not possible\"\n\t\t}\n\t\t\n\t\t//-----------------------------------------------------------------------------------------------\n\n\t\t// write the result of the voting\n\t\tDBUpdate(`voting_participants`, Int($participant_id), `timestamp decision_date, decision`, $block_time, 1)\n\n\t\t// increment count of accept\n\t\t$subject_id     = Int($subject_map[\"id\"])\n\t\t$number_accept  = Int($subject_map[\"number_accept\"])\n\t\t$number_accept   = $number_accept + 1\n\t\tDBUpdate(`voting_subject`, $subject_id, `number_accept`, $number_accept)\n\n\t\tvoting_UpdateDataForGraphs(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SendNotifics",
            "Value": "contract voting_SendNotifics {\n    data {\n        votingID int\n    }\n\n    conditions {\n\t\t$voting_id = DBFind(`voting_instances`).Where(\"id=$ and enddate > now()\", $votingID).One(\"id\")\n        if ($voting_id == nil){\n\t\t\twarning \"Voting has expired. Notifications can not be sent\"\n\t\t}\n\t\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$ and startdate < now()\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting has not yet begun. Try again later, please\"\n\t\t}\t\n\t\t\n\t\tif( Int($voting_map[\"creator_id\"]) != $key_id ){\n\t\t\twarning \"You are not the creator of the voting\"\n\t\t}\n\t\tif( Int($voting_map[\"flag_notifics\"]) == 1 ){\n\t\t\twarning \"Notifications have already been sent\"\n\t\t}\n\t\t\n\t\t$voting_name = string($voting_map[\"name\"])\n    }\n\n    action {\n\t\t$ret_participants = DBFind(\"voting_participants\").Where(\"voting_id=$ and decision=$\", $votingID, 0)\n\t\t$i = 0\n\t\twhile($i < Len($ret_participants)){\n\t\t\t$vals_participants = $ret_participants[$i]\n\t\t\t$recipient = Int($vals_participants[\"member_id\"])\n\t\t\t\n\t\t\tvar params string\n\t\t\tparams = \"notific_param=\" + Str($votingID)\n\t\t\t\n\t\t\tNotifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", \n\t\t\t\t\t\t\t\t$recipient, \"fa-check\", \"Voting\", $voting_name, \"voting_view\", params)\n\t\t\t$i = $i + 1\n\t\t}\n\t\t\n\t\tDBUpdate(`voting_instances`, $votingID, `flag_notifics`, 1)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectSettings",
            "Value": "contract voting_SubjectSettings {\n    data {\n        votingID int\n        \n        roleID int\n        vacancies int\n        \n        contract_reject string \"optional\"\n        contract_accept string \"optional\"\n        accept_params string \"optional\"\n        reject_params string \"optional\"\n    }\n    \n    conditions {\n        if($vacancies < 1){\n            warning \"Number of vacancies can not be less than 1\"\n        }\n        \n        $voting_map = DBFind(\"voting_instances\").Where(\"id=? and startdate > now()\", $votingID).Row()\n        if($voting_map[\"id\"] == nil){\n            warning \"Voting already started. Change settings not allowed\"\n        }\n        if((Int($voting_map[\"flag_fulldata\"]) == 1) &&(Int($voting_map[\"type_voting\"]) == 2) ){\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n        \n        $role_map = DBFind(\"roles_list\").Where(\"id=? and delete=0\", $roleID).Row()\n        if($role_map[\"id\"] == nil){\n            warning \"Specified role not found\"\n        }\n        if(Int($role_map[\"role_type\"]) != 2){\n            warning \"The chosen role is not elective or has been removed\"\n        }\n    }\n    \n    action {\n        DBUpdate(`voting_instances`, $votingID, `optional_role_id,optional_role_vacancies,optional_contract_accept,optional_contract_reject,contract_accept_params,contract_reject_params`,\n        $roleID, $vacancies, $contract_accept, $contract_reject, $accept_params, $reject_params)\n        \n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectCandidates",
            "Value": "contract voting_SubjectCandidates {\n    data {\n        votingID int\n        memberID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$ and startdate > now()\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting already started. New candidate can not be added\"\n\t\t}\t\t\n\n\t\tif ( (Int($voting_map[\"flag_fulldata\"]) == 1) && (Int($voting_map[\"type_voting\"]) == 2) ){\n\t\t\twarning \"This vote is a system. Change settings not allowed\"\n\t\t}\n\t\t\n        if($memberID == 0){\n            $memberID = $key_id\n        }\n\t\t\n\t\t$subject_id = DBFind(\"voting_subject\").Where(\"voting_id=$ and member_id=$\", $votingID, $memberID).One(\"id\")\n\t\tif ($subject_id != nil){\n\t\t\twarning \"This candidature for this role has already been added before\"\n\t\t}\n\t\n\t\t$member_map = DBFind(\"members\").Where(\"id = $\", $memberID).Row()\n\t\tif ($member_map[\"id\"] == nil){\n\t\t\twarning \"Member not found\"\n\t\t}\n\t\t\n\t\t$optional_number_cands = Int($voting_map[\"optional_number_cands\"])\n    }\n\n    action {\n\t\tDBInsert(`voting_subject`, `member_id,member_name,member_avatar,voting_id`, $memberID, $member_map[\"member_name\"], $member_map[\"avatar\"], $votingID)\n\t\n\t\t$optional_number_cands = $optional_number_cands + 1\n\t\tDBUpdate(`voting_instances`, $votingID, `optional_number_cands`, $optional_number_cands)\n\n\t\tvoting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectContract",
            "Value": "contract voting_SubjectContract {\n    data {\n        votingID int\n        \n        contract_reject string\n        contract_accept string\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=? and startdate > now()\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting already started. Can not edit document\"\n\t\t}\t\t\n\t\tif ( (Int($voting_map[\"flag_fulldata\"]) == 1) && (Int($voting_map[\"type_voting\"]) == 2) ){\n\t\t\twarning \"This vote is a system. Change settings not allowed\"\n\t\t}\n    }\n\n    action {\n\t\t$subject_id = DBFind(\"voting_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n\t\tif ($subject_id != nil){\n\t\t\tDBUpdate(`voting_subject`, Int($subject_id), `contract_accept,contract_reject`, $contract_accept, $contract_reject)\n\t\t} else {\n\t\t\tDBInsert(`voting_subject`, `voting_id,contract_accept,contract_reject`, $votingID, $contract_accept, $contract_reject)\n\t\t}\n\t\t\n\t\tvoting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectDocument",
            "Value": "contract voting_SubjectDocument {\n    data {\n        votingID int\n        \n        text_document string\n        \n        contract_reject string \"optional\"\n        contract_accept string \"optional\"\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=? and startdate > now()\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting already started. Can not edit document\"\n\t\t}\t\t\n\t\tif ( (Int($voting_map[\"flag_fulldata\"]) == 1) && (Int($voting_map[\"type_voting\"]) == 2) ){\n\t\t\twarning \"This vote is a system. Change settings not allowed\"\n\t\t}\t\n\n\t\t$hash = Sha256($text_document)\n    }\n\n    action {\n\t\t$subject_id = DBFind(\"voting_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n\t\tif ($subject_id != nil){\n\t\t\tDBUpdate(`voting_subject`, Int($subject_id), `text_document, text_doc_hash`, $text_document, $hash)\n\t\t} else {\n\t\t\tDBInsert(`voting_subject`, `text_document, text_doc_hash, voting_id`, $text_document, $hash, $votingID)\n\t\t}\n\t\n\t\tDBUpdate(`voting_instances`, $votingID, `optional_contract_accept,optional_contract_reject`, $contract_accept, $contract_reject)\n\t\tvoting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_NewVoting",
            "Value": "contract sysparams_NewVoting {\n    data {\n        v_name string\n        new_val string\n        \n        now_date string \"date\"\n        start_date string \"date\"\n        end_date string \"date\"\n    }\n    \n    conditions {\n        $voting_name = \"New system parameter\"\n        $description = \"Voting for the system parameter\"\n        $volume = 75\n        $quorum = 50\n        \n        $role_name = \"Investor with voting rights\"\n        $type_participants = 3 // role\n        $type_decision = 4 // formal decision\n        $table_to_written = \"system_parameters\"\n        $column_name = \"value\"\n    }\n    \n    action {\n        // create new voting\n        voting_CreateNew(\"voting_name,type_voting,description,type_participants,type_decision,now_date,start_time,start_date,end_date,end_time,volume,quorum\",\n            $voting_name, 2, $description, $type_participants, $type_decision, $now_date, \"00:00\", $start_date, $end_date, \"00:00\", $volume, $quorum)\n            \n            // get voting id\n            $ret_instance = DBFind(\"voting_instances\").Order(\"id DESC\")\n            if(Len($ret_instance) > 0){\n                $vals_instance = $ret_instance[0]\n                $votingID = Int($vals_instance[\"id\"])\n                \n                // set subject of voting\n                voting_SubjectFormal(\"votingID,description,table_to_written,row_id,column_name,written_value\",\n                    $votingID, $description, \"system_parameters\", 0, $v_name, $new_val)\n                    \n                    // search role\n                    $ret_role = DBFind(\"roles_list\").Where(\"role_name=$ and role_type=$ and delete=0\", $role_name, 3).Order(\"id\")\n                    if(Len($ret_role) > 0){\n                        $vals_role = $ret_role[0]\n                        $role_id = Int($vals_role[\"id\"])\n                        \n                        // refresh list of the investors in the role\n                        sysparams_RefreshInvestors(\"role_id\", $role_id)\n                        \n                        // add all participants from the role\n                        voting_Invite(\"votingID,var_id\", $votingID, $role_id)\n                    }\n                }\n            }\n        }",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_TemplateRun",
            "Value": "contract voting_TemplateRun{\n    data{\n        KeyId int \"optional\"\n        TemplateId int\n        Start string \"date\"\n        StartTime string \"date,optional\"\n        End string \"date\"\n        EndTime string \"date,optional\"\n    }\n    \n    func conditions{\n        $template = DBFind(\"voting_templates\").WhereId($TemplateId).Row()\n        if !$template{\n            warning \"Voting template not found\"\n        }\n        if $KeyId != 0{\n            $keyFind = DBFind(\"keys\").Where(\"id=?\", $KeyId).Row()\n            if !$keyFind{\n                warning \"Keyid not found\"\n            }\n        }\n        if $StartTime == \"\"{\n            $StartTime = \"00:00\"\n        }\n        if $EndTime == \"\"{\n            $EndTime = \"23:59\"\n        }\n        \n        $condition = $template[\"init_condition\"]\n        ContractConditions($condition)\n        \n        $candidateRoleName = $template[\"precondition\"]\n        $votersRoleName = $template[\"voters\"]\n        $votingName = $template[\"title\"]\n        $volume = Int($template[\"volume\"])\n        $quorum = Int($template[\"quorum\"])\n        $typeVoting = Int($template[\"type_voting\"])\n        $typeParticipants = Int($template[\"type_participants\"])\n        $typeDecision = Int($template[\"type_decision\"])\n        $vacancies = Int($template[\"vacancies\"])\n        \n        $desc = Sprintf(\"%v [#%v]\", $votingName, $TemplateId)\n\n        $contractAccept = $template[\"contract_accept\"]\n        $acceptParams = $template[\"contract_accept_params\"]\n        $contractReject = $template[\"contract_reject\"]\n        $rejectParams = $template[\"contract_reject_params\"]\n        \n        $isCreated = DBFind(\"voting_instances\").Where(\"name=? and description=? and delete=0\", $votingName, $desc).Row()\n        if $isCreated{\n            // info \"Voting already created\" // must uncomment on prod\n        }\n        \n        // if not special then use default\n        $defaultParams = Sprintf(\"VotingTemplateId->%v;KeyId->%v\", $TemplateId, $KeyId)\n        if Size($acceptParams) == 0{\n            $acceptParams = $defaultParams\n        }\n        if Size($rejectParams) == 0{\n            $rejectParams = $defaultParams\n        }\n    }\n    \n    func action{\n        var roleId int\n        roleId = DBFind(\"roles_list\").Where(\"role_name=? and delete=0\", $votersRoleName).One(\"id\")\n        \n        $voting_id = 0 // will be set in voting_CreateNew\n        voting_CreateNew(\"voting_name,type_voting,description,type_participants,type_decision,now_date,start_time,start_date,end_date,end_time,volume,quorum\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $Start, $StartTime, $Start, $End, $EndTime, $volume, $quorum)\n        if $voting_id == 0 {\n            $voting_id = DBFind(\"voting_instances\").Where(\"voting_name=? and start_date=?\", $votingName, $Start).One(\"id\")\n            $voting_id = Int($voting_id)\n        }\n        // after success voting set Validator Role to Candidate\n        voting_SubjectCandidates(\"votingID,memberID\", $voting_id, $KeyId)\n        voting_SubjectSettings(\"votingID,roleID,vacancies,contract_reject,contract_accept,accept_params,reject_params\", $voting_id, roleId, $vacancies, \"\", $contractAccept, $acceptParams, $rejectParams)\n        $value = Sprintf(\"%v : %v\", $voting_id, roleId)\n        \n        voting_Invite(\"votingID,var_id\", $voting_id, roleId)\n        \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_StartVotingValidator",
            "Value": "contract sysparams_StartVotingValidator{\n    data{\n        Id int\n        VotingParamId int\n        Start string \"date\"\n        StartTime string \"date\"\n        End string \"date\"\n        EndTime string \"date\"\n    }\n    \n    func conditions{\n        $votingParams = DBFind(\"voting_templates\").WhereId($VotingParamId).Row()\n        if $votingParams == nil{\n            warning \"Voting params not found\"\n        }\n        \n        $condition = $votingParams[\"init_condition\"]\n        ContractConditions($condition)\n        \n        // Delegate to Validators voting : Голосование экосистем за валидаторов\n        if $votingParams[\"title\"] != \"Voting for Validator\"{\n            warning \"Invalid param\"\n        }\n        // renew Delegates\n        $candidate = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).Row()\n        if !$candidate{\n            warning \"Candidate not found\"\n        }\n        $KeyId = Int($candidate[\"candidate_key_id\"])\n        \n        sysparams_DelegateRefresh()\n    }\n    \n    func action{\n        voting_TemplateRun(\"KeyId,TemplateId,Start,StartTime,End,EndTime\",$KeyId,$VotingParamId,$Start,$StartTime,$End,$EndTime)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_TemplateStore",
            "Value": "contract voting_TemplateStore{\n    data{\n        Title string\n        TypeParticipants int\n        TypeVoting int\n        TypeDecision int\n        Volume int\n        Quorum int\n        Precondition string \"optional\" //old subject, any propertion\n        Subject string\n        Voters string\n        InitCondition string \"optional\"\n        Vacancies int\n        ContractAccept string \"optional\"\n        ParamsAccept string \"optional\"\n        ContractReject string \"optional\"\n        ParamsReject string \"optional\"\n    }\n    \n    func conditions{\n        if Size($InitCondition) > 0{\n            if !IsObject($InitCondition, $ecosystem_id){\n                warning \"Init condition not found\"\n            }\n        }\n        \n        if Size($Title) <3{\n            warning \"Please enter title\"\n        }\n        if $Volume <0 || $Volume > 100{\n            warning \"Wrong volume range\"\n        }\n        if $Quorum <0 || $Quorum > 100{\n            warning \"Wrong volume range\"\n        }\n        \n        if $Vacancies < 1 {\n            warning \"wrong number vacancies\"\n        }\n        \n        if Size($ContractAccept) > 0{\n            if !IsObject($ContractAccept, $ecosystem_id){\n                warning \"wrong contract on voting accept\"\n            }\n        }\n        if Size($ContractReject) > 0{\n            if !IsObject($ContractReject, $ecosystem_id){\n                warning \"wrong contract on voting accept\"\n            }\n        }\n    }\n    \n    func action{\n        DBInsert(\"voting_templates\", \"title,precondition,subject,voters,init_condition,volume,quorum,type_voting,type_participants,type_decision,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", $Title,$Precondition,$Subject,$Voters,$InitCondition,$Volume,$Quorum,$TypeVoting,$TypeParticipants,$TypeDecision,$Vacancies,$ContractAccept,$ParamsAccept,$ContractReject,$ParamsReject)\n        \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_RejectDecision",
            "Value": "contract voting_RejectDecision {\n    data {\n        votingID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting is not found\"\n\t\t}\n\t\t\n\t\t// check the participant of the voting\n\t\t$participant_id = DBFind(`voting_participants`).Where(\"voting_id=$ and member_id=$\", $votingID, $key_id).One(\"id\")\n\t\tif ($participant_id == nil){\n\t\t\twarning \"You are not a participant in this voting\"\n\t\t}\n    }\n\n    action {\n\t\t// if notifications have been sent, then close it\n\t\tif ( Int($voting_map[\"flag_notifics\"]) == 1 ){\n\t\t\tvar params string\n\t\t\tparams = \"notific_param=\" + Str($votingID)\t\n\t\t\t$notific_id = DBFind(`notifications`).Where(\"recipient_id=$ and page_name=$ and page_params=$ and closed=$\", $key_id, \"voting_view\", params, 0).One(\"id\")\n\t\t\tif ($notific_id != nil){\n\t\t\t\tNotifications_Single_Close(\"notific_id\", Int($notific_id))\n\t\t\t}\n\t\t}\n\n\t\t// check the decision\n\t\tif ( Int($voting_map[\"flag_decision\"]) == 1 ){\n\t\t\twarning \"Decision was taken. Voting is now not possible\"\n\t\t} \n\t\t\n\t\t// check start-end of voting time\n\t\t$voting_start = DBFind(`voting_instances`).Where(\"id=$ and startdate < now()\", $votingID).One(\"id\")\n\t\t$voting_end   = DBFind(`voting_instances`).Where(\"id=$ and enddate   > now()\", $votingID).One(\"id\")\n\t\tif ($voting_start == nil){\n\t\t\twarning \"Voting has not yet begun. Try again later, please\"\n\t\t}\n\t\tif ($voting_end == nil){\n\t\t\twarning \"Voting has expired. Voting is now not possible\"\n\t\t}\n\t\t\n\t\t//-----------------------------------------------------------------------------------------------\n\n\t\t// write the result of the voting\n\t\tDBUpdate(`voting_participants`, Int($participant_id), `timestamp decision_date, decision`, $block_time, -1)\n\n\t\tvoting_UpdateDataForGraphs(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [
        {
            "Table": "pcproperty",
            "Columns": [
                "del",
                "name",
                "type",
                "coords",
                "member_id",
                "police_inspection",
                "business_suitability"
            ],
            "Data": [
                [
                    "0",
                    "Crystal Palace Parade College Road (Stop V), London SE19 1UN, United Kingdom",
                    "1",
                    "{\"coords\":[{\"lat\":51.424598,\"lng\":-0.075396},{\"lat\":51.424562,\"lng\":-0.075409},{\"lat\":51.424529,\"lng\":-0.075277},{\"lat\":51.424567,\"lng\":-0.075256}]}",
                    "7811193201318285716",
                    "1",
                    "0"
                ],
                [
                    "0",
                    "Vibeca Apartments, 7 Chicksand St, London E1 5LD, United Kingdom",
                    "1",
                    "{\"coords\":[{\"lat\":51.518489,\"lng\":-0.069201},{\"lat\":51.518416,\"lng\":-0.069653},{\"lat\":51.518314,\"lng\":-0.069601},{\"lat\":51.518365,\"lng\":-0.069295},{\"lat\":51.518129,\"lng\":-0.069192},{\"lat\":51.518149,\"lng\":-0.069056}]}",
                    "7811193201318285716",
                    "1",
                    "0"
                ],
                [
                    "0",
                    "The Winery, 11 Regents Bridge Gardens, London SW8 1JR, United Kingdom",
                    "1",
                    "{\"coords\":[{\"lat\":51.480953,\"lng\":-0.122463},{\"lat\":51.480991,\"lng\":-0.121724},{\"lat\":51.480864,\"lng\":-0.121704},{\"lat\":51.480829,\"lng\":-0.122457}]}",
                    "7811193201318285716",
                    "1",
                    "0"
                ]
            ]
        },
        {
            "Table": "voting_templates",
            "Columns": [
                "quorum",
                "precondition",
                "contract_reject",
                "contract_accept_params",
                "contract_reject_params",
                "volume",
                "vacancies",
                "type_participants",
                "type_voting",
                "type_decision",
                "init_condition",
                "contract_accept",
                "title",
                "voters",
                "subject"
            ],
            "Data": [
                [
                    "50",
                    "Candidate for validators",
                    "",
                    "",
                    "",
                    "50",
                    "1",
                    "3",
                    "2",
                    "2",
                    "MainCondition",
                    "sysparams_AcceptRole",
                    "Voting for Validator",
                    "Delegate",
                    "Validator"
                ]
            ]
        }
    ],
    "languages": [
        {
            "Name": "accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Accept\", \"ru\": \"Принять\"}"
        },
        {
            "Name": "accept_request_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Accept the request of this member?\", \"ru\": \"Принять запрос этого члена?\"}"
        },
        {
            "Name": "accepted",
            "Conditions": "",
            "Trans": "{\"en\": \"Accepted\", \"ru\": \"Принят\"}"
        },
        {
            "Name": "account",
            "Conditions": "",
            "Trans": "{\"en\": \"Account\", \"ru\": \"Счет\"}"
        },
        {
            "Name": "accounts",
            "Conditions": "",
            "Trans": "{\"en\": \"Accounts\", \"ru\": \"Счета\"}"
        },
        {
            "Name": "actions",
            "Conditions": "",
            "Trans": "{\"en\": \"Actions\", \"ru\": \"Действия\"}"
        },
        {
            "Name": "active",
            "Conditions": "",
            "Trans": "{\"en\": \"Active\", \"ru\": \"Активно\"}"
        },
        {
            "Name": "add",
            "Conditions": "",
            "Trans": "{\"en\": \"Add\", \"ru\": \"Добавить\"}"
        },
        {
            "Name": "add_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Add member\", \"ru\": \"Добавить члена\"}"
        },
        {
            "Name": "add_new_record",
            "Conditions": "",
            "Trans": "{\"en\":\"Add new record\",\"ru\":\"Добавить новую запись\"}"
        },
        {
            "Name": "add_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Add role\", \"ru\": \"Добавить роль\"}"
        },
        {
            "Name": "address",
            "Conditions": "",
            "Trans": "{\"en\":\"Address\",\"ru\":\"Адрес\"}"
        },
        {
            "Name": "admin",
            "Conditions": "",
            "Trans": "{\"en\":\"Administrator\",\"ru\":\"Администратор\"}"
        },
        {
            "Name": "admin_tools",
            "Conditions": "",
            "Trans": "{\"en\": \"Admin tools\", \"ru\": \"Инструменты администратора\"}"
        },
        {
            "Name": "agency",
            "Conditions": "",
            "Trans": "{\"en\": \"Agency\", \"ru\": \"Агенский\"}"
        },
        {
            "Name": "all",
            "Conditions": "",
            "Trans": "{\"en\": \"All\", \"ru\": \"Все\"}"
        },
        {
            "Name": "amount",
            "Conditions": "",
            "Trans": "{\"en\": \"Amount\", \"ru\": \"Сумма\"}"
        },
        {
            "Name": "application_form",
            "Conditions": "",
            "Trans": "{\"en\": \"Application Form\", \"ru\": \"Форма заявки\" }"
        },
        {
            "Name": "application_structure",
            "Conditions": "",
            "Trans": "{\"en\": \"Application structure\", \"ru\": \"Структура приложений\"}"
        },
        {
            "Name": "apply",
            "Conditions": "",
            "Trans": "{\"en\": \"Apply\", \"ru\": \"Подать\"}"
        },
        {
            "Name": "appointed",
            "Conditions": "",
            "Trans": "{\"en\": \"Appointed\", \"ru\": \"Назначен\"}"
        },
        {
            "Name": "appointment_impossible",
            "Conditions": "",
            "Trans": "{\"ru\":\"*Эта роль не является назначаемой. Назначение членов невозможно\",\"en\":\"*This role is not assignable. The appointment of members is impossible\"}"
        },
        {
            "Name": "area_size",
            "Conditions": "",
            "Trans": "{\"en\":\"Area size\",\"ru\":\"Размер\"}"
        },
        {
            "Name": "ask_accept_purchase",
            "Conditions": "",
            "Trans": "{\"en\":\" Do you want to accept the purchase?\",\"ru\":\"Вы хотите принять покупку?\"}"
        },
        {
            "Name": "ask_delete",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to delete entry?\",\"ru\":\"Вы хотите удалить эту запись?\"}"
        },
        {
            "Name": "ask_initiate_land_purchase",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to initiate land purchase?\",\"ru\":\"Вы хотите начать процесс покупки земли?\"}"
        },
        {
            "Name": "ask_reject_purchase",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to reject the purchase?\",\"ru\":\"Вы хотите отклонить покупку?\"}"
        },
        {
            "Name": "ask_request_second",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to send a second request?\",\"ru\":\"Вы хотите отправить повторный запрос?\"}"
        },
        {
            "Name": "ask_sign",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to sign?\",\"ru\":\"Вы хотите поставить подпись?\"}"
        },
        {
            "Name": "assign",
            "Conditions": "",
            "Trans": "{\"en\": \"Assign\", \"ru\": \"Назначить\"}"
        },
        {
            "Name": "assigned",
            "Conditions": "",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначен\"}"
        },
        {
            "Name": "assigned_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначаемая\"}"
        },
        {
            "Name": "at",
            "Conditions": "",
            "Trans": "{\"en\": \"at\", \"ru\": \"в\"}"
        },
        {
            "Name": "attention",
            "Conditions": "",
            "Trans": "{\"en\": \"ATTENTION! The page has not received parameters and is unavailable for viewing.\", \"ru\": \"ВНИМАНИЕ! Страница не получила параметров и не доступна для просмотра.\"}"
        },
        {
            "Name": "available",
            "Conditions": "",
            "Trans": "{\"en\":\"Available\",\"ru\":\"Доступно\"}"
        },
        {
            "Name": "avatar",
            "Conditions": "",
            "Trans": "{\"en\": \"Avatar\", \"ru\": \"Фото\"}"
        },
        {
            "Name": "back",
            "Conditions": "",
            "Trans": "{\"en\": \"Back\", \"ru\": \"Назад\"}"
        },
        {
            "Name": "balance",
            "Conditions": "",
            "Trans": "{\"en\": \"Balance\", \"ru\": \"Баланс\"}"
        },
        {
            "Name": "begin",
            "Conditions": "",
            "Trans": "{\"en\": \"Begin\", \"ru\": \"Начать\"}"
        },
        {
            "Name": "birthdate",
            "Conditions": "",
            "Trans": "{\"en\": \"Birthdate\", \"ru\": \"Дата рождения\"}"
        },
        {
            "Name": "block",
            "Conditions": "",
            "Trans": "{\"en\": \"Block\", \"ru\": \"Блок\"}"
        },
        {
            "Name": "body_text",
            "Conditions": "",
            "Trans": "{\"en\": \"Body text\", \"ru\": \"Основной текст\"}"
        },
        {
            "Name": "buildings_use_class",
            "Conditions": "",
            "Trans": "{\"en\":\"Buildings use class\",\"ru\":\"Класс используемых зданий\"}"
        },
        {
            "Name": "buy",
            "Conditions": "",
            "Trans": "{\"en\":\"Buy\",\"ru\":\"Купить\"}"
        },
        {
            "Name": "buyer",
            "Conditions": "",
            "Trans": "{\"en\":\"Buyer\",\"ru\":\"Покупатель\"}"
        },
        {
            "Name": "buyer_has_money",
            "Conditions": "",
            "Trans": "{\"en\":\"The buyer has the necessary amount in the bank account\",\"ru\":\"Покупатель имеет необходимую сумму на банковском счете\"}"
        },
        {
            "Name": "buyer_not_has_money",
            "Conditions": "",
            "Trans": "{\"en\":\"The buyer has NOT the necessary amount in the bank account\",\"ru\":\"У покупателя нет необходимой суммы на банковском счете\"}"
        },
        {
            "Name": "buyer_trans_amount",
            "Conditions": "",
            "Trans": "{\"en\":\"Buyer transferred amount to account \",\"ru\":\"Покупатель перечислил сумму на счет\"}"
        },
        {
            "Name": "buyer_trans_self",
            "Conditions": "",
            "Trans": "{\"en\":\"Buyer transferred to his account an amount\",\"ru\":\"Покупатель перечислил на свой счет сумму\"}"
        },
        {
            "Name": "buyer_transferred_to_account_amount",
            "Conditions": "",
            "Trans": "{\"en\":\"Buyer transferred to his account an amount\",\"ru\":\"Покупатель перечислил на свой счет сумму \"}"
        },
        {
            "Name": "can_apply_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"You can apply for voting\", \"ru\": \"Вы можете подать заявку на голосование\"}"
        },
        {
            "Name": "cancel",
            "Conditions": "",
            "Trans": "{\"en\":\"Cancel\",\"ru\":\"Отмена\"}"
        },
        {
            "Name": "candidates",
            "Conditions": "",
            "Trans": "{\"en\": \"Candidates\", \"ru\": \"Кандидаты\"}"
        },
        {
            "Name": "change",
            "Conditions": "",
            "Trans": "{\"en\": \"Change\", \"ru\": \"Изменить\"}"
        },
        {
            "Name": "check_expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"Check expiration\", \"ru\": \"Проверить истечение\"}"
        },
        {
            "Name": "close",
            "Conditions": "",
            "Trans": "{\"en\": \"Close\", \"ru\": \"Закрыть\"}"
        },
        {
            "Name": "closure_type",
            "Conditions": "",
            "Trans": "{\"en\": \"Closure type\", \"ru\": \"Тип закрытия\"}"
        },
        {
            "Name": "code",
            "Conditions": "",
            "Trans": "{\"en\":\"Code\",\"ru\":\"Код\"}"
        },
        {
            "Name": "column_name",
            "Conditions": "",
            "Trans": "{\"en\": \"Column name\", \"ru\": \"Название столбца\"}"
        },
        {
            "Name": "column_name_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Column name to which the value will be written (Example: onhold)\", \"ru\": \"Название столбца, в который будет записано значение (Пример: onhold)\"}"
        },
        {
            "Name": "comment",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Comment\",\n    \"ru\": \"Комментарий\"\n}"
        },
        {
            "Name": "commission_address",
            "Conditions": "",
            "Trans": "{\"en\":\"Account address\",\"ru\":\"Адрес аккаунта\"}"
        },
        {
            "Name": "commission_pub",
            "Conditions": "",
            "Trans": "{\"en\":\"Account public key\",\"ru\":\"Публичный ключ аккаунта\"}"
        },
        {
            "Name": "companies",
            "Conditions": "",
            "Trans": "{\"en\":\"Companies\",\"ru\":\"Компании\"}"
        },
        {
            "Name": "company",
            "Conditions": "",
            "Trans": "{\"en\": \"Company\", \"ru\": \"Компания\"}"
        },
        {
            "Name": "company_add",
            "Conditions": "",
            "Trans": "{\"en\":\"Add company\",\"ru\":\"Добавить компанию\"}"
        },
        {
            "Name": "company_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Company role\",\"ru\":\"Роль компании\"}"
        },
        {
            "Name": "confirm",
            "Conditions": "",
            "Trans": "{\"en\":\"Confirm\",\"ru\":\"Подтвердить\"}"
        },
        {
            "Name": "confirmation",
            "Conditions": "",
            "Trans": "{\"en\":\"Confirmation\",\"ru\":\"Подтверждение\"}"
        },
        {
            "Name": "consideration_value",
            "Conditions": "",
            "Trans": "{\"en\":\"Consideration value\",\"ru\":\"Справедливая стоимость\"}"
        },
        {
            "Name": "contract",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract\", \"ru\": \"Контракт\"}"
        },
        {
            "Name": "contract_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract of accept\", \"ru\": \"Контракт при принятии\"}"
        },
        {
            "Name": "contract_accept_des",
            "Conditions": "",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is accepted\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет одобрено\"}"
        },
        {
            "Name": "contract_accepted",
            "Conditions": "",
            "Trans": "{\"en\": \"Contractaccept\", \"ru\": \"Контракт принят\"}"
        },
        {
            "Name": "contract_code",
            "Conditions": "",
            "Trans": "{\"en\":\"Сontract code\",\"ru\":\"Код контракта\"}"
        },
        {
            "Name": "contract_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract of reject\", \"ru\": \"Контракт при отклонении\"}"
        },
        {
            "Name": "contract_reject_des",
            "Conditions": "",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is rejected\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет отклонено\"}"
        },
        {
            "Name": "contract_rejected",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract reject\", \"ru\": \"Контракт отклонен\"}"
        },
        {
            "Name": "coordinates",
            "Conditions": "",
            "Trans": "{\"en\":\"Coordinates\",\"ru\":\"Координаты\"}"
        },
        {
            "Name": "create",
            "Conditions": "",
            "Trans": "{\"en\": \"Create\", \"ru\": \"Создать\"}"
        },
        {
            "Name": "create_account",
            "Conditions": "",
            "Trans": "{\"en\": \"Create account\", \"ru\": \"Создать счет\"}"
        },
        {
            "Name": "created",
            "Conditions": "",
            "Trans": "{\"en\": \"Created\", \"ru\": \"Создан\"}"
        },
        {
            "Name": "creator",
            "Conditions": "",
            "Trans": "{\"en\": \"Creator\", \"ru\": \"Кто создал\"}"
        },
        {
            "Name": "dashboard",
            "Conditions": "",
            "Trans": "{\"en\": \"Dashboard\", \"ru\": \"Приборная панель\"}"
        },
        {
            "Name": "date_created",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Date created\",\n    \"ru\": \"Дата создания\"\n}"
        },
        {
            "Name": "date_end",
            "Conditions": "",
            "Trans": "{\"en\": \"Date end\", \"ru\": \"Дата окончания\"}"
        },
        {
            "Name": "date_start",
            "Conditions": "",
            "Trans": "{\"en\": \"Date start\", \"ru\": \"Дата начала\"}"
        },
        {
            "Name": "decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision\", \"ru\": \"Решение\"}"
        },
        {
            "Name": "decision_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision accept\", \"ru\": \"Решение одобрено\"}"
        },
        {
            "Name": "decision_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision reject\", \"ru\": \"Решение отклонено\"}"
        },
        {
            "Name": "deleted",
            "Conditions": "",
            "Trans": "{\"en\": \"Deleted\", \"ru\": \"Удалено\"}"
        },
        {
            "Name": "demo_description_sendContract",
            "Conditions": "",
            "Trans": "{\"en\":\"Send some parameter to contract `DemoContract`\",\"ru\":\"Отправить параметр в контракт `DemoContract`\"}"
        },
        {
            "Name": "demo_description_sendMessage",
            "Conditions": "",
            "Trans": "{\"en\":\"Send direct message to ecosystem member\",\"ru\":\"Отправить сообщение члену экосистемы\"}"
        },
        {
            "Name": "demo_description_sendPage",
            "Conditions": "",
            "Trans": "{\"en\":\"Send some text on this page\",\"ru\":\"Отправить какой-то текст на эту страницу\"}"
        },
        {
            "Name": "demo_sendContract",
            "Conditions": "",
            "Trans": "{\"en\":\"Send to contract\",\"ru\":\"Передача в контракт\"}"
        },
        {
            "Name": "demo_sendMessage",
            "Conditions": "",
            "Trans": "{\"en\":\"Send a text parameter to a notification\",\"ru\":\"Передача текстового параметра в оповещении\"}"
        },
        {
            "Name": "demo_sendPage",
            "Conditions": "",
            "Trans": "{\"en\":\"Send to page\",\"ru\":\"Передача на страницу\"}"
        },
        {
            "Name": "demo_title",
            "Conditions": "",
            "Trans": "{\"en\":\"Demonstration\",\"ru\":\"Демонстрация\"}"
        },
        {
            "Name": "demo_welcome",
            "Conditions": "",
            "Trans": "{\"en\":\"Welcome!\",\"ru\":\"Добро пожаловать!\"}"
        },
        {
            "Name": "depart_role1",
            "Conditions": "",
            "Trans": "{\"en\":\"Department of Land Resources\",\"ru\":\"Департамент земельных ресурсов\"}"
        },
        {
            "Name": "depart_role2",
            "Conditions": "",
            "Trans": "{\"en\":\"Department of Legal Affairs\",\"ru\":\"Департамент по правовым вопросам\"}"
        },
        {
            "Name": "depart_role3",
            "Conditions": "",
            "Trans": "{\"en\":\"Department of Revenue\",\"ru\":\"Департамент налогов и сборов\"}"
        },
        {
            "Name": "department_of_land_resources",
            "Conditions": "",
            "Trans": "{\"en\":\"Department of Land Resources\",\"ru\":\"Отдел земельных ресурсов\"}"
        },
        {
            "Name": "description",
            "Conditions": "",
            "Trans": "{\"en\": \"Description\", \"ru\": \"Описание\"}"
        },
        {
            "Name": "description_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Text description of the subject of voting\", \"ru\": \"Текстовое описание предмета голосования\"}"
        },
        {
            "Name": "description_equipment",
            "Conditions": "",
            "Trans": "{\"en\":\"Description equipment\",\"ru\":\"Описание оборудования\"}"
        },
        {
            "Name": "did_not_vote",
            "Conditions": "",
            "Trans": "{\"en\": \"Did not vote\", \"ru\": \"Не голосовал\"}"
        },
        {
            "Name": "document_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Document accept\", \"ru\": \"Документ одобрен\"}"
        },
        {
            "Name": "document_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Document reject\", \"ru\": \"Документ отклонен\"}"
        },
        {
            "Name": "edit",
            "Conditions": "",
            "Trans": "{\"en\":\"Edit\",\"ru\":\"Редактировать\"}"
        },
        {
            "Name": "edit_block",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Edit block\",\n    \"ru\": \"Редактировать блок\"\n}"
        },
        {
            "Name": "edit_contract",
            "Conditions": "",
            "Trans": "{\"en\":\"Edit contract\",\"ru\":\"Редактировать контракт\"}"
        },
        {
            "Name": "edit_page",
            "Conditions": "",
            "Trans": "{\"en\":\"Edit page\",\"ru\":\"Редактировать страницу\"}"
        },
        {
            "Name": "editing_profile",
            "Conditions": "",
            "Trans": "{\"en\": \"Editing profile\", \"ru\": \"Редактирование профиля\"}"
        },
        {
            "Name": "elective",
            "Conditions": "",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выбран\"}"
        },
        {
            "Name": "elective_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выборная\"}"
        },
        {
            "Name": "emission",
            "Conditions": "",
            "Trans": "{\"en\": \"Emission\", \"ru\": \"Эмиссия\"}"
        },
        {
            "Name": "emission_account_not_found",
            "Conditions": "",
            "Trans": "{\"en\":\"System emission account is not found\",\"ru\":\"Системный эмиссионный счет не найден\"}"
        },
        {
            "Name": "empty",
            "Conditions": "",
            "Trans": "{\"en\": \"[no]\", \"ru\": \"[нет]\"}"
        },
        {
            "Name": "encumbrance_certificate",
            "Conditions": "",
            "Trans": "{\"en\":\"Encumbrance certificate\",\"ru\":\"Сертификат обременения\"}"
        },
        {
            "Name": "execute",
            "Conditions": "",
            "Trans": "{\"en\": \"Execute\", \"ru\": \"Выполнить\"}"
        },
        {
            "Name": "expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"Expiration\", \"ru\": \"Окончание\"}"
        },
        {
            "Name": "expiration_only_visitor",
            "Conditions": "",
            "Trans": "{\"en\": \"Expiration only for visitor\", \"ru\": \"Окончание только для посетителя\"}"
        },
        {
            "Name": "expired",
            "Conditions": "",
            "Trans": "{\"en\": \"Expired\", \"ru\": \"Истекло\"}"
        },
        {
            "Name": "female",
            "Conditions": "",
            "Trans": "{\"en\": \"Female\", \"ru\": \"Женский\"}"
        },
        {
            "Name": "filled",
            "Conditions": "",
            "Trans": "{\"en\": \"Filled\", \"ru\": \"Заполнено\"}"
        },
        {
            "Name": "finished",
            "Conditions": "",
            "Trans": "{\"en\": \"Finished\", \"ru\": \"Завершено\"}"
        },
        {
            "Name": "gender",
            "Conditions": "",
            "Trans": "{\"en\": \"Gender\", \"ru\": \"Пол\"}"
        },
        {
            "Name": "government_value",
            "Conditions": "",
            "Trans": "{\"en\":\"Government value\",\"ru\":\"Государственная стоимость\"}"
        },
        {
            "Name": "group_person",
            "Conditions": "",
            "Trans": "{\"en\":\"Group of person\",\"ru\":\"Группа персон\"}"
        },
        {
            "Name": "have_offer_buy_land",
            "Conditions": "",
            "Trans": "{\"en\":\"You have an offer to buy land\",\"ru\":\"Вы получили предложение купить землю\"}"
        },
        {
            "Name": "header",
            "Conditions": "",
            "Trans": "{\"en\": \"Header\", \"ru\": \"Заголовок\"}"
        },
        {
            "Name": "host_ip",
            "Conditions": "",
            "Trans": "{\"en\":\"IP\",\"ru\":\"IP\"}"
        },
        {
            "Name": "icon",
            "Conditions": "",
            "Trans": "{\"en\": \"Icon\", \"ru\": \"Иконка\"}"
        },
        {
            "Name": "id",
            "Conditions": "",
            "Trans": "{\"en\": \"ID\", \"ru\": \"ID\"}"
        },
        {
            "Name": "impossible",
            "Conditions": "",
            "Trans": "{\"en\": \"Impossible\", \"ru\": \"Не возможно\"}"
        },
        {
            "Name": "include_in_role",
            "Conditions": "",
            "Trans": "{\"en\":\"YES - Include a member in the role\",\"ru\":\"ДА - Включить члена в роль\"}"
        },
        {
            "Name": "init_condition",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Initiate process condition\",\n    \"ru\": \"Условие для начала процесса\"\n}"
        },
        {
            "Name": "input",
            "Conditions": "",
            "Trans": "{\"en\":\"Input\",\"ru\":\"Ввод\"}"
        },
        {
            "Name": "install_app",
            "Conditions": "",
            "Trans": "{\"en\":\"Install app\",\"ru\":\"Установить приложение\"}"
        },
        {
            "Name": "institution",
            "Conditions": "",
            "Trans": "{\"en\":\"Institution\",\"ru\":\"Учреждение\"}"
        },
        {
            "Name": "land_bank",
            "Conditions": "",
            "Trans": "{\"ru\":\"Земельный Банк\",\"en\":\"Land Bank\"}"
        },
        {
            "Name": "land_nature",
            "Conditions": "",
            "Trans": "{\"en\":\"Nature\",\"ru\":\"Тип\"}"
        },
        {
            "Name": "land_record",
            "Conditions": "",
            "Trans": "{\"en\":\"Land record\",\"ru\":\"Земельная запись\"}"
        },
        {
            "Name": "land_records",
            "Conditions": "",
            "Trans": "{\"en\":\"Land Registry\",\"ru\":\"Земельный реестр\"}"
        },
        {
            "Name": "land_records_add",
            "Conditions": "",
            "Trans": "{\"en\":\"Land Record adding\",\"ru\":\"Добавление земельной записи\"}"
        },
        {
            "Name": "land_records_admin",
            "Conditions": "",
            "Trans": "{\"en\":\"Land records (edit)\",\"ru\":\"Земельный реестр (ред.)\"}"
        },
        {
            "Name": "land_records_edit",
            "Conditions": "",
            "Trans": "{\"en\":\"Land record edit\",\"ru\":\"Редактирование земельной записи\"}"
        },
        {
            "Name": "land_records_sales",
            "Conditions": "",
            "Trans": "{\"en\":\"Land records (Available for sale)\",\"ru\":\"Земельный реестр (продажа)\"}"
        },
        {
            "Name": "land_registry",
            "Conditions": "",
            "Trans": "{\"en\":\"Land Registry\",\"ru\":\"Земельный реестр\"}"
        },
        {
            "Name": "land_registry_bank",
            "Conditions": "",
            "Trans": "{\"en\":\"Land Bank\",\"ru\":\"Земельный Банк\"}"
        },
        {
            "Name": "land_registry_edit_role1",
            "Conditions": "",
            "Trans": "{\"en\":\"Add price\",\"ru\":\"Установите цену\"}"
        },
        {
            "Name": "land_registry_edit_role2",
            "Conditions": "",
            "Trans": "{\"en\":\"Department of Legal Affairs\",\"ru\":\"Департамент по правовым вопросам\"}"
        },
        {
            "Name": "land_registry_edit_role3",
            "Conditions": "",
            "Trans": "{\"en\":\"Department of Revenue\",\"ru\":\"Департамент налогов и сборов\"}"
        },
        {
            "Name": "land_registry_view",
            "Conditions": "",
            "Trans": "{\"en\":\"Land record\",\"ru\":\"Страница земельного ресурса\"}"
        },
        {
            "Name": "land_use",
            "Conditions": "",
            "Trans": "{\"en\":\"Land use\",\"ru\":\"Землепользование\"}"
        },
        {
            "Name": "legal_status",
            "Conditions": "",
            "Trans": "{\"en\":\"Legal status\",\"ru\":\"Правовой статус\"}"
        },
        {
            "Name": "limited",
            "Conditions": "",
            "Trans": "{\"en\": \"Limited\", \"ru\": \"Ограничены\"}"
        },
        {
            "Name": "lists_of_roles",
            "Conditions": "",
            "Trans": "{\"en\": \"Lists of roles and\", \"ru\": \"Список ролей и\"}"
        },
        {
            "Name": "local_body",
            "Conditions": "",
            "Trans": "{\"en\":\"Local Body\",\"ru\":\"Местный орган\"}"
        },
        {
            "Name": "male",
            "Conditions": "",
            "Trans": "{\"en\": \"Male\", \"ru\": \"Мужской\"}"
        },
        {
            "Name": "market_value",
            "Conditions": "",
            "Trans": "{\"en\":\"Market value\",\"ru\":\"Рыночная стоимость\"}"
        },
        {
            "Name": "member",
            "Conditions": "",
            "Trans": "{\"en\": \"Member\", \"ru\": \"Член\"}"
        },
        {
            "Name": "member_id",
            "Conditions": "",
            "Trans": "{\"en\": \"Member ID\", \"ru\": \"ID члена\"}"
        },
        {
            "Name": "member_name",
            "Conditions": "",
            "Trans": "{\"en\":\"Full name\",\"ru\":\"Полное имя\"}"
        },
        {
            "Name": "members",
            "Conditions": "",
            "Trans": "{\"en\": \"Members\", \"ru\": \"Члены\"}"
        },
        {
            "Name": "membership",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership\", \"ru\": \"Членство\"}"
        },
        {
            "Name": "membership_management",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership management and\", \"ru\": \"Управление членами и\"}"
        },
        {
            "Name": "membership_requests",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership requests\", \"ru\": \"Запросы на членство\"}"
        },
        {
            "Name": "membership_roles_notifications",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership, roles, notifications\", \"ru\": \"Членство, роли, уведомления\"}"
        },
        {
            "Name": "message",
            "Conditions": "",
            "Trans": "{\"en\":\"Message\",\"ru\":\"Сообщение\"}"
        },
        {
            "Name": "modification_date",
            "Conditions": "",
            "Trans": "{\"en\":\"Modification date\",\"ru\":\"Дата изменения\"}"
        },
        {
            "Name": "multiple",
            "Conditions": "",
            "Trans": "{\"en\": \"Multiple\", \"ru\": \"Множественные\"}"
        },
        {
            "Name": "my_account",
            "Conditions": "",
            "Trans": "{\"en\": \"My account\", \"ru\": \"Мой счет\"}"
        },
        {
            "Name": "name",
            "Conditions": "",
            "Trans": "{\"en\": \"Name\", \"ru\": \"Название\"}"
        },
        {
            "Name": "name_first",
            "Conditions": "",
            "Trans": "{\"en\": \"First name\", \"ru\": \"Имя\"}"
        },
        {
            "Name": "name_last",
            "Conditions": "",
            "Trans": "{\"en\": \"Last name\", \"ru\": \"Фамилия\"}"
        },
        {
            "Name": "name_middle",
            "Conditions": "",
            "Trans": "{\"en\": \"Middle name\", \"ru\": \"Отчество\"}"
        },
        {
            "Name": "need_your_processing",
            "Conditions": "",
            "Trans": "{\"en\":\"Need your processing\",\"ru\":\"Нужна ваша обработка\"}"
        },
        {
            "Name": "new_ecosystem",
            "Conditions": "",
            "Trans": "{\"en\":\"New ecosystem\",\"ru\":\"Создать экосистему\"}"
        },
        {
            "Name": "new_land",
            "Conditions": "",
            "Trans": "{\"en\":\"New land\",\"ru\":\"Новая земля\"}"
        },
        {
            "Name": "new_purchase",
            "Conditions": "",
            "Trans": "{\"en\":\"New purchase\",\"ru\":\"Новая покупка\"}"
        },
        {
            "Name": "new_role",
            "Conditions": "",
            "Trans": "{\"en\": \"New role\", \"ru\": \"Новая роль\"}"
        },
        {
            "Name": "new_template",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"New template\",\n    \"ru\": \"Новый шаблон\"\n}"
        },
        {
            "Name": "new_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"New voting\", \"ru\": \"Новое голосование\"}"
        },
        {
            "Name": "no",
            "Conditions": "",
            "Trans": "{\"en\":\"No\",\"ru\":\"Нет\"}"
        },
        {
            "Name": "no_expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"No expiration\", \"ru\": \"Без окончания\"}"
        },
        {
            "Name": "no_include_in_role",
            "Conditions": "",
            "Trans": "{\"en\":\"NO - Do not include a member in the role\",\"ru\":\"НЕТ - Не включать члена в роль\"}"
        },
        {
            "Name": "no_problem",
            "Conditions": "",
            "Trans": "{\"en\":\"No Issues\",\"ru\":\"Нет проблем\"}"
        },
        {
            "Name": "not_enough_votes",
            "Conditions": "",
            "Trans": "{\"en\": \"Not enough votes\", \"ru\": \"Недостаточно голосов\"}"
        },
        {
            "Name": "notifications",
            "Conditions": "",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}"
        },
        {
            "Name": "notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}"
        },
        {
            "Name": "num_members",
            "Conditions": "",
            "Trans": "{\"en\": \"Number of members\", \"ru\": \"Количество членов\"}"
        },
        {
            "Name": "offer_purchase_sent",
            "Conditions": "",
            "Trans": "{\"en\":\"The offer for purchase sent to the owner\",\"ru\":\"Предложение о покупке, отправленно владельцу\"}"
        },
        {
            "Name": "onhold",
            "Conditions": "",
            "Trans": "{\"en\": \"onHold\", \"ru\": \"Закрыт\"}"
        },
        {
            "Name": "only_if_role_type",
            "Conditions": "",
            "Trans": "{\"en\":\"Only if role type -> Company role. For all other types is not used\",\"ru\":\"Только если тип роли - Роль компании. Для всех других типов не используется\"}"
        },
        {
            "Name": "optional",
            "Conditions": "",
            "Trans": "{\"en\": \"[Optional]\", \"ru\": \"[Необязательный]\"}"
        },
        {
            "Name": "organization",
            "Conditions": "",
            "Trans": "{\"en\":\"Organization\",\"ru\":\"Организация\"}"
        },
        {
            "Name": "owner",
            "Conditions": "",
            "Trans": "{\"en\":\"Owner\",\"ru\":\"Владелец\"}"
        },
        {
            "Name": "owner_rejected_purchase",
            "Conditions": "",
            "Trans": "{\"en\":\"Owner rejected to purchase\",\"ru\":\"Владелец отказался от продажи\"}"
        },
        {
            "Name": "owner_rejected_selling",
            "Conditions": "",
            "Trans": "{\"en\":\"Owner rejected to selling\",\"ru\":\"Владелец отказался от продажи\"}"
        },
        {
            "Name": "page",
            "Conditions": "",
            "Trans": "{\"en\": \"Page\", \"ru\": \"Страница\"}"
        },
        {
            "Name": "page_code",
            "Conditions": "",
            "Trans": "{\"en\":\"Page code\",\"ru\":\"Код страницы\"}"
        },
        {
            "Name": "page_name",
            "Conditions": "",
            "Trans": "{\"en\": \"Page name\", \"ru\": \"Название страницы\"}"
        },
        {
            "Name": "params",
            "Conditions": "",
            "Trans": "{\"en\":\"Parameters\",\"ru\":\"Параметры\"}"
        },
        {
            "Name": "participants",
            "Conditions": "",
            "Trans": "{\"en\": \"Participants\", \"ru\": \"Участники\"}"
        },
        {
            "Name": "participants_add",
            "Conditions": "",
            "Trans": "{\"en\": \"Add participants\", \"ru\": \"Добавить участников\"}"
        },
        {
            "Name": "pending_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Pending notifications\", \"ru\": \"Ожидающие уведомления\"}"
        },
        {
            "Name": "person",
            "Conditions": "",
            "Trans": "{\"en\": \"Person\", \"ru\": \"Персональный\"}"
        },
        {
            "Name": "please_amount",
            "Conditions": "",
            "Trans": "{\"en\":\"Please enter the amount\",\"ru\":\"Пожалуйста введите сумму\"}"
        },
        {
            "Name": "possible",
            "Conditions": "",
            "Trans": "{\"en\": \"Possible\", \"ru\": \"Возможно\"}"
        },
        {
            "Name": "price",
            "Conditions": "",
            "Trans": "{\"en\":\"Price\",\"ru\":\"Цена\"}"
        },
        {
            "Name": "problem",
            "Conditions": "",
            "Trans": "{\"en\":\"Have Issues\",\"ru\":\"Проблемы\"}"
        },
        {
            "Name": "processing",
            "Conditions": "",
            "Trans": "{\"en\": \"Processing\", \"ru\": \"Обработка\"}"
        },
        {
            "Name": "profile",
            "Conditions": "",
            "Trans": "{\"en\": \"Profile\", \"ru\": \"Профиль\"}"
        },
        {
            "Name": "profile_edit",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Profile edit\",\n    \"ru\": \"Редактирование профиля\"\n}"
        },
        {
            "Name": "progress",
            "Conditions": "",
            "Trans": "{\"en\": \"Progress\", \"ru\": \"Прогресс\"}"
        },
        {
            "Name": "publickey",
            "Conditions": "",
            "Trans": "{\"en\":\"Public key\",\"ru\":\"Публичный ключ\"}"
        },
        {
            "Name": "purchase_approved",
            "Conditions": "",
            "Trans": "{\"en\":\"Purchase Approved\",\"ru\":\"Подтверждение покупки\"}"
        },
        {
            "Name": "purchase_rejected",
            "Conditions": "",
            "Trans": "{\"en\":\"Purchase rejected\",\"ru\":\"Сделка отменена\"}"
        },
        {
            "Name": "purchase_request",
            "Conditions": "",
            "Trans": "{\"en\":\"Purchase request\",\"ru\":\"Предложение о покупке\"}"
        },
        {
            "Name": "quorum",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Quorum\",\n    \"ru\": \"Кворум\"\n}"
        },
        {
            "Name": "recipient",
            "Conditions": "",
            "Trans": "{\"en\": \"Recipient\", \"ru\": \"Получатель\"}"
        },
        {
            "Name": "recipient_account",
            "Conditions": "",
            "Trans": "{\"en\": \"Recipient account\", \"ru\": \"Счет получателя\"}"
        },
        {
            "Name": "record_add_date",
            "Conditions": "",
            "Trans": "{\"en\":\"Record Add Date\",\"ru\":\"Дата добавления записи\"}"
        },
        {
            "Name": "referendum",
            "Conditions": "",
            "Trans": "{\"en\":\"Referendum\",\"ru\":\"Референдум\"}"
        },
        {
            "Name": "registration_date",
            "Conditions": "",
            "Trans": "{\"en\":\"Registration Date\",\"ru\":\"Дата регистрации\"}"
        },
        {
            "Name": "reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Reject\", \"ru\": \"Отклонить\"}"
        },
        {
            "Name": "rejected",
            "Conditions": "",
            "Trans": "{\"en\": \"Rejected\", \"ru\": \"Отклонено\"}"
        },
        {
            "Name": "request",
            "Conditions": "",
            "Trans": "{\"en\": \"Request\", \"ru\": \"Запрос\"}"
        },
        {
            "Name": "result",
            "Conditions": "",
            "Trans": "{\"en\":\"Result\",\"ru\":\"Результат\"}"
        },
        {
            "Name": "right_sign",
            "Conditions": "",
            "Trans": "{\"en\":\"Signature right\",\"ru\":\"Право подписи\"}"
        },
        {
            "Name": "right_sign_no",
            "Conditions": "",
            "Trans": "{\"en\":\"No signature right\",\"ru\":\"Нет права подписи\"}"
        },
        {
            "Name": "right_sign_yes",
            "Conditions": "",
            "Trans": "{\"en\":\"Have signature rights\",\"ru\":\"Имеет право подписи\"}"
        },
        {
            "Name": "role",
            "Conditions": "",
            "Trans": "{\"en\": \"Role\", \"ru\": \"Роль\"}"
        },
        {
            "Name": "role_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Role notifications\", \"ru\": \"Ролевые уведомления\"}"
        },
        {
            "Name": "roles",
            "Conditions": "",
            "Trans": "{\"en\": \"Roles\", \"ru\": \"Роли\"}"
        },
        {
            "Name": "rollback",
            "Conditions": "",
            "Trans": "{\"en\": \"Rollback\", \"ru\": \"Откат\"}"
        },
        {
            "Name": "row_id",
            "Conditions": "",
            "Trans": "{\"en\": \"Row ID\", \"ru\": \"ID строки\"}"
        },
        {
            "Name": "row_id_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Row ID to which the value will be written (Example: 14)\", \"ru\": \"ID строки, в которую будет записано значение (Пример: 14)\"}"
        },
        {
            "Name": "save",
            "Conditions": "",
            "Trans": "{\"en\": \"Save\", \"ru\": \"Сохранить\"}"
        },
        {
            "Name": "select_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Select a member to add\", \"ru\": \"Укажите члена, чтобы добавить\"}"
        },
        {
            "Name": "select_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Select a role to add all members of this role\", \"ru\": \"Выберите роль, чтобы добавить всех участников этой роли\"}"
        },
        {
            "Name": "select_role_if_include",
            "Conditions": "",
            "Trans": "{\"ru\":\"Выберите роль, если вы хотите включить члена в роль\",\"en\":\"Select a role if you want to include a member in the role\"}"
        },
        {
            "Name": "send",
            "Conditions": "",
            "Trans": "{\"en\": \"Send\", \"ru\": \"Отправить\"}"
        },
        {
            "Name": "send_contract",
            "Conditions": "",
            "Trans": "{\"en\":\"Send to contract\",\"ru\":\"Отправить в контракт\"}"
        },
        {
            "Name": "send_notify",
            "Conditions": "",
            "Trans": "{\"en\":\"Send Notification\",\"ru\":\"Отправить оповещение\"}"
        },
        {
            "Name": "send_page",
            "Conditions": "",
            "Trans": "{\"en\":\"Send to page\",\"ru\":\"Отправить на страницу\"}"
        },
        {
            "Name": "send_request",
            "Conditions": "",
            "Trans": "{\"en\":\"Send request\",\"ru\":\"Послать запрос\"}"
        },
        {
            "Name": "sender_account",
            "Conditions": "",
            "Trans": "{\"en\":\"Sender account\",\"ru\":\"Счет отправителя\"}"
        },
        {
            "Name": "sign_sales_contract",
            "Conditions": "",
            "Trans": "{\"en\":\"Sign the sales contract\",\"ru\":\"Подписать договор купли-продажи\"}"
        },
        {
            "Name": "single",
            "Conditions": "",
            "Trans": "{\"en\": \"Single\", \"ru\": \"Одиночные\"}"
        },
        {
            "Name": "single_and_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Single and Role\", \"ru\": \"Одиночные и ролевые\"}"
        },
        {
            "Name": "single_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Single notifications\", \"ru\": \"Одиночные уведомления\"}"
        },
        {
            "Name": "start",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Start\",\n    \"ru\": \"Начать\"\n}"
        },
        {
            "Name": "start_buying_land",
            "Conditions": "",
            "Trans": "{\"en\":\"Start buying land\",\"ru\":\"Начать процесс покупки земли\"}"
        },
        {
            "Name": "started",
            "Conditions": "",
            "Trans": "{\"en\": \"Started\", \"ru\": \"Начато\"}"
        },
        {
            "Name": "status",
            "Conditions": "",
            "Trans": "{\"en\": \"Status\", \"ru\": \"Статус\"}"
        },
        {
            "Name": "struct",
            "Conditions": "",
            "Trans": "{\"en\": \"Structure\", \"ru\": \"Структура\"}"
        },
        {
            "Name": "struct_app",
            "Conditions": "",
            "Trans": "{\"en\": \"Application structure\", \"ru\": \"Структура приложения\"}"
        },
        {
            "Name": "subject_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"Subject of voting\", \"ru\": \"Предмет голосования\"}"
        },
        {
            "Name": "subject_voting_edit",
            "Conditions": "",
            "Trans": "{\"en\": \"Edit subject of voting\", \"ru\": \"Редактировать предмет голосования\"}"
        },
        {
            "Name": "success",
            "Conditions": "",
            "Trans": "{\"en\": \"Success\", \"ru\": \"Успешно\"}"
        },
        {
            "Name": "sys_emission",
            "Conditions": "",
            "Trans": "{\"en\":\"sys-emission\",\"ru\":\"Эмиссия (системный)\"}"
        },
        {
            "Name": "sys_trash",
            "Conditions": "",
            "Trans": "{\"en\":\"sys-trash\",\"ru\":\"Корзина (системный)\"}"
        },
        {
            "Name": "sysparams_candidate_validators_form",
            "Conditions": "",
            "Trans": "{\"en\":\"Request form of candidate for validators\",\"ru\":\"Форма запроса кандидата в валидаторы\"}"
        },
        {
            "Name": "sysparams_candidates_list",
            "Conditions": "",
            "Trans": "{\"en\":\"Candidate for validators list\",\"ru\":\"Список кандидатов в валидаторы\"}"
        },
        {
            "Name": "sysparams_list",
            "Conditions": "",
            "Trans": "{\"en\":\"System parameters list\",\"ru\":\"Список системных параметров\"}"
        },
        {
            "Name": "system_params",
            "Conditions": "",
            "Trans": "{\"en\":\"System parameters\",\"ru\":\"Системные параметры\"}"
        },
        {
            "Name": "system_role",
            "Conditions": "",
            "Trans": "{\"en\":\"System\",\"ru\":\"Системная\"}"
        },
        {
            "Name": "system_tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"System of tokens\", \"ru\": \"Система токенов\"}"
        },
        {
            "Name": "table_to_written",
            "Conditions": "",
            "Trans": "{\"en\": \"Table name\", \"ru\": \"Название таблицы\"}"
        },
        {
            "Name": "table_to_written_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Table to which the value will be written (Example: accounts)\", \"ru\": \"Таблица, в которую будет записано значение (Пример: accounts)\"}"
        },
        {
            "Name": "taken_note",
            "Conditions": "",
            "Trans": "{\"en\":\"Taken note\",\"ru\":\"Понятно\"}"
        },
        {
            "Name": "tax",
            "Conditions": "",
            "Trans": "{\"ru\":\"Налог\",\"en\":\"Tax\"}"
        },
        {
            "Name": "tax_and_bills",
            "Conditions": "",
            "Trans": "{\"en\":\"Tax and bills\",\"ru\":\"Налог и счета\"}"
        },
        {
            "Name": "template_create",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Creating template\",\"ru\": \"Создание шаблона\"}"
        },
        {
            "Name": "test_page",
            "Conditions": "",
            "Trans": "{\"en\": \"Test page\", \"ru\": \"Тестовая страница\"}"
        },
        {
            "Name": "text_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Text of the document\", \"ru\": \"Текст документа\"}"
        },
        {
            "Name": "their_members",
            "Conditions": "",
            "Trans": "{\"en\": \"their members\", \"ru\": \"их члены\"}"
        },
        {
            "Name": "title",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Title\",\n    \"ru\": \"Название\"\n}"
        },
        {
            "Name": "to_land_bank",
            "Conditions": "",
            "Trans": "{\"en\":\"to Land Bank\",\"ru\":\"к Земельному банку\"}"
        },
        {
            "Name": "tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"Tokens\", \"ru\": \"Токены\"}"
        },
        {
            "Name": "tokens_rollback",
            "Conditions": "",
            "Trans": "{\"en\": \"Tokens rollback\", \"ru\": \"Удаление токенов\"}"
        },
        {
            "Name": "tokens_transfer",
            "Conditions": "",
            "Trans": "{\"en\": \"Tokens transfer\", \"ru\": \"Перевод токенов\"}"
        },
        {
            "Name": "total",
            "Conditions": "",
            "Trans": "{\"en\":\"Total\",\"ru\":\"Всего\"}"
        },
        {
            "Name": "total_votes",
            "Conditions": "",
            "Trans": "{\"en\":\"Total votes\",\"ru\":\"Всего проголосовало\"}"
        },
        {
            "Name": "tranche",
            "Conditions": "",
            "Trans": "{\"en\":\"Tranche\",\"ru\":\"Транш\"}"
        },
        {
            "Name": "transfer_tokens",
            "Conditions": "",
            "Trans": "{\"en\":\"Transfer INR tokens\",\"ru\":\"Перевести токены\"}"
        },
        {
            "Name": "trash_account_not_found",
            "Conditions": "",
            "Trans": "{\"en\":\"System trash account is not found\",\"ru\":\"Системный счет корзины не найден\"}"
        },
        {
            "Name": "type",
            "Conditions": "",
            "Trans": "{\"en\": \"Type\", \"ru\": \"Тип\"}"
        },
        {
            "Name": "type_voting_custom",
            "Conditions": "",
            "Trans": "{\"en\":\"Custom\",\"ru\":\"Пользовательское\"}"
        },
        {
            "Name": "type_voting_system",
            "Conditions": "",
            "Trans": "{\"en\":\"System\",\"ru\":\"Системное\"}"
        },
        {
            "Name": "undefined",
            "Conditions": "",
            "Trans": "{\"en\":\"Undefined\",\"ru\":\"Не определено\"}"
        },
        {
            "Name": "unlimited",
            "Conditions": "",
            "Trans": "{\"en\": \"Unlimited\", \"ru\": \"Не ограничены\"}"
        },
        {
            "Name": "use",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Use\",\n    \"ru\": \"Использовать\"\n}"
        },
        {
            "Name": "user_info",
            "Conditions": "",
            "Trans": "{\"en\": \"User information\", \"ru\": \"Информация о пользователе\"}"
        },
        {
            "Name": "username",
            "Conditions": "",
            "Trans": "{\"en\": \"Username\", \"ru\": \"Никнейм\"}"
        },
        {
            "Name": "vacancies",
            "Conditions": "",
            "Trans": "{\"en\": \"Vacancies\", \"ru\": \"Вакансии\"}"
        },
        {
            "Name": "value",
            "Conditions": "",
            "Trans": "{\"en\":\"Value\",\"ru\":\"Значение\"}"
        },
        {
            "Name": "value_number",
            "Conditions": "",
            "Trans": "{\"en\": \"Value number\", \"ru\": \"Значение (число)\"}"
        },
        {
            "Name": "value_string",
            "Conditions": "",
            "Trans": "{\"en\": \"Value string\", \"ru\": \"Значение (строка)\"}"
        },
        {
            "Name": "view",
            "Conditions": "",
            "Trans": "{\"en\": \"View\", \"ru\": \"Просмотр\"}"
        },
        {
            "Name": "view_all",
            "Conditions": "",
            "Trans": "{\"en\": \"View all\", \"ru\": \"Посмотреть все\"}"
        },
        {
            "Name": "view_table",
            "Conditions": "",
            "Trans": "{\"en\": \"View table\", \"ru\": \"Смотреть таблицу\"}"
        },
        {
            "Name": "visitor",
            "Conditions": "",
            "Trans": "{\"en\": \"Visitor\", \"ru\": \"Посетитель\"}"
        },
        {
            "Name": "visitor_rights",
            "Conditions": "",
            "Trans": "{\"en\": \"Visitor (with SR)\", \"ru\": \"Посетитель (с правами)\"}"
        },
        {
            "Name": "volume",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Volume\",\n    \"ru\": \"Объем\"\n}"
        },
        {
            "Name": "vote",
            "Conditions": "",
            "Trans": "{\"en\": \"Vote\", \"ru\": \"Голосовать\"}"
        },
        {
            "Name": "vote_for_candidate",
            "Conditions": "",
            "Trans": "{\"en\": \"Vote for the candidate\", \"ru\": \"Проголосовал за кандидата\"}"
        },
        {
            "Name": "voted",
            "Conditions": "",
            "Trans": "{\"en\": \"Voted\", \"ru\": \"Проголосовавшие\"}"
        },
        {
            "Name": "voters",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Voters\",\n    \"ru\": \"Голосующие\"\n}"
        },
        {
            "Name": "votes_taken_accept",
            "Conditions": "",
            "Trans": "{\"ru\":\"Положительных голосов\",\"en\":\"Positive votes\"}"
        },
        {
            "Name": "votes_taken_reject",
            "Conditions": "",
            "Trans": "{\"ru\":\"Отрицательных голосов\",\"en\":\"Negative votes\"}"
        },
        {
            "Name": "voting",
            "Conditions": "",
            "Trans": "{\"en\": \"Voting\", \"ru\": \"Голосование\"}"
        },
        {
            "Name": "voting_contract_accept",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Run contract after accept decision\",\n    \"ru\": \"Выполнить контракт при положительном решении\"\n}"
        },
        {
            "Name": "voting_contract_reject",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Run contract after reject decision\",\n    \"ru\": \"Выполнить контракт при отрицательном решении\"\n}"
        },
        {
            "Name": "voting_decisions_candidate_manual",
            "Conditions": "",
            "Trans": "{\"en\": \"Role candidates with manual registration of participants\", \"ru\": \"Ролевые кандидаты с ручной регистрацией участников\"}"
        },
        {
            "Name": "voting_decisions_candidate_requests",
            "Conditions": "",
            "Trans": "{\"en\": \"Role candidates with registration of participants by request\", \"ru\": \"Ролевые кандидаты с регистрацией участников по запросу\"}"
        },
        {
            "Name": "voting_decisions_contract",
            "Conditions": "",
            "Trans": "{\"en\": \"Performance of the contract\", \"ru\": \"Выполнение контракта\"}"
        },
        {
            "Name": "voting_decisions_db",
            "Conditions": "",
            "Trans": "{\"en\": \"Formal decision\", \"ru\": \"Формальное решение\"}"
        },
        {
            "Name": "voting_decisions_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Document approval\", \"ru\": \"Утверждение документа\"}"
        },
        {
            "Name": "voting_graph_progress",
            "Conditions": "",
            "Trans": "{\"en\": \"Graph of the percentages of votes needed to make a decision\", \"ru\": \"График процента голосов, необходимых для принятия решения\"}"
        },
        {
            "Name": "voting_graph_voted",
            "Conditions": "",
            "Trans": "{\"en\": \"Graph of the proportion of voters from the total number of participants\", \"ru\": \"График отношения проголосовавших от общего числа участников\"}"
        },
        {
            "Name": "voting_init_condition",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Initial Сondition for starts\",\n    \"ru\": \"Условие при запуске\"\n}"
        },
        {
            "Name": "voting_init_condition_desc",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Contract for check rights for starts voting\",\n    \"ru\": \"Контракт для проверки права начать голосование\"\n}"
        },
        {
            "Name": "voting_participants_everybody",
            "Conditions": "",
            "Trans": "{\"en\": \"Anybody\", \"ru\": \"Все\"}"
        },
        {
            "Name": "voting_participants_manual",
            "Conditions": "",
            "Trans": "{\"en\": \"Choose manually\", \"ru\": \"Ручной выбор\"}"
        },
        {
            "Name": "voting_participants_role",
            "Conditions": "",
            "Trans": "{\"en\": \"By role\", \"ru\": \"По роли\"}"
        },
        {
            "Name": "voting_precondition",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Initial condition for the subject of voting\",\n    \"ru\": \"Начальное условие для предмета голосования\"\n}"
        },
        {
            "Name": "voting_quorum",
            "Conditions": "",
            "Trans": "{\"en\": \"Quorum\", \"ru\": \"Кворум\"}"
        },
        {
            "Name": "voting_quorum_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Percentage value of votes for a decision (from 5 to 100)\", \"ru\": \"Процентная доля голосов для принятия решения (от 5 до 100)\"}"
        },
        {
            "Name": "voting_start",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Voting start\",\n    \"ru\": \"Начать голосование\"\n}"
        },
        {
            "Name": "voting_subject",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Voting subject\",\n    \"ru\": \"Предмет голосования\"\n}"
        },
        {
            "Name": "voting_templates",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Voting templates\",\n    \"ru\": \"Шаблоны голосования\"\n}"
        },
        {
            "Name": "voting_type",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Voting type\",\n    \"ru\": \"Тип голосования\"\n}"
        },
        {
            "Name": "voting_volume",
            "Conditions": "",
            "Trans": "{\"en\": \"Volume\", \"ru\": \"Объем\"}"
        },
        {
            "Name": "voting_volume_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Percentage value of votes to fulfill requirements of this voting (from 50 to 100)\", \"ru\": \"Процентная доля голосов для выполнения этого голосования (от 50 до 100)\"}"
        },
        {
            "Name": "waiting",
            "Conditions": "",
            "Trans": "{\"en\": \"Waiting\", \"ru\": \"Ожидание\"}"
        },
        {
            "Name": "waiting_bank",
            "Conditions": "",
            "Trans": "{\"en\":\"Waiting for a response bank\",\"ru\":\"Ожидание ответа банка\"}"
        },
        {
            "Name": "want_accept_contract",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to accept this contract?\", \"ru\": \"Вы хотите принять этот контракт?\"}"
        },
        {
            "Name": "want_accept_decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to accept decision?\", \"ru\": \"Вы уверены, что хотите принять решение?\"}"
        },
        {
            "Name": "want_accept_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to accept document?\", \"ru\": \"Вы уверены, что хотите принять документ?\"}"
        },
        {
            "Name": "want_assign_member_to_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to assign this member of the ecosystem to this role?\",\"ru\":\"Вы хотите назначить этого члена экосистемы на эту роль?\"}"
        },
        {
            "Name": "want_change_status",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to change the status of this member?\", \"ru\": \"Вы хотите изменить статус этого члена?\"}"
        },
        {
            "Name": "want_check_decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to check decision?\", \"ru\": \"Вы хотите проверить решение?\"}"
        },
        {
            "Name": "want_check_tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to check the expiration of the tokens?\", \"ru\": \"Вы хотите проверить истечение токенов?\"}"
        },
        {
            "Name": "want_close_account",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to close this account?\", \"ru\": \"Вы хотите закрыть этот счет?\"}"
        },
        {
            "Name": "want_close_notification",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to close this notification?\", \"ru\": \"Вы хотите закрыть это уведомление?\"}"
        },
        {
            "Name": "want_create_new_account",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to create a new account?\",\"ru\":\"Вы хотите создать новый счет?\"}"
        },
        {
            "Name": "want_create_new_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to add a new company? The current account will become a multi-account. This action is not reversible.\",\"ru\":\"Вы хотите добавить новую компанию? Текущий аккаунт станет мульти-аккаунтом. Это действие не обратимо.\"}"
        },
        {
            "Name": "want_create_new_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to create a new role?\",\"ru\":\"Вы хотите создать новую роль?\"}"
        },
        {
            "Name": "want_create_role_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to create a new role for the company?\",\"ru\":\"Вы хотите создать новую роль для компании?\"}"
        },
        {
            "Name": "want_delete_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to delete the company? All company roles will also be deleted\",\"ru\":\"Вы хотите удалить компанию? Также будут удалены все роли компании\"}"
        },
        {
            "Name": "want_delete_from_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to delete this member from the role?\", \"ru\": \"Вы уверены, что хотите удалить этого члена из роли?\"}"
        },
        {
            "Name": "want_delete_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this member?\", \"ru\": \"Вы хотите удалить этого члена?\"}"
        },
        {
            "Name": "want_delete_participant_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to remove a participant from the company?\",\"ru\":\"Вы хотите удалить участника из компании?\"}"
        },
        {
            "Name": "want_delete_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this role?\", \"ru\": \"Вы хотите удалить эту роль?\"}"
        },
        {
            "Name": "want_delete_tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this tokens?\", \"ru\": \"Вы хотите удалить эти токены?\"}"
        },
        {
            "Name": "want_delete_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this voting?\", \"ru\": \"Вы хотите удалить это голосование?\"}"
        },
        {
            "Name": "want_finish_processing",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to finish processing this notification?\", \"ru\": \"Вы хотите завершить обработку этого уведомления?\"}"
        },
        {
            "Name": "want_make_emission",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to make an emission?\",\"ru\":\"Вы хотите выполнить эмиссию?\"}"
        },
        {
            "Name": "want_reject_contract",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to reject this contract?\", \"ru\": \"Вы хотите отклонить этот контракт?\"}"
        },
        {
            "Name": "want_reject_decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to reject decision?\", \"ru\": \"Вы уверены, что хотите отклонить решение?\"}"
        },
        {
            "Name": "want_reject_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to reject document?\", \"ru\": \"Вы уверены, что хотите отклонить документ?\"}"
        },
        {
            "Name": "want_reject_request",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to reject the request?\", \"ru\": \"Вы хотите отклонить запрос?\"}"
        },
        {
            "Name": "want_release_tokens",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to release new tokens?\",\"ru\":\"Вы хотите выпустить новые токены?\"}"
        },
        {
            "Name": "want_return_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to return this member?\", \"ru\": \"Вы хотите восстановить этого члена?\"}"
        },
        {
            "Name": "want_rollback_tokens",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to rollback the tokens?\",\"ru\":\"Вы хотите откатить токены?\"}"
        },
        {
            "Name": "want_save",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to save changes?\",\"ru\":\"Действительно хотите сохранить\"}"
        },
        {
            "Name": "want_save_changes",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to save the changes?\",\"ru\":\"Вы хотите сохранить изменения?\"}"
        },
        {
            "Name": "want_send_notific_voters",
            "Conditions": "",
            "Trans": "{\"en\": \" Do you want to send a notification to all the voters?\", \"ru\": \"Вы хотите отправить уведомление всем участникам голосования?\"}"
        },
        {
            "Name": "want_send_tokens",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to send tokens?\",\"ru\":\"Вы хотите отправить токены?\"}"
        },
        {
            "Name": "want_start_processing",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to start processing this notification?\", \"ru\": \"Вы хотите начать обработку этого уведомления?\"}"
        },
        {
            "Name": "want_vote_for_candidate",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to vote for this candidate?\", \"ru\": \"Вы уверены, что хотите проголосовать за этого кандидата?\"}"
        },
        {
            "Name": "written_value",
            "Conditions": "",
            "Trans": "{\"en\": \"Written value\", \"ru\": \"Записываемое значение\"}"
        },
        {
            "Name": "written_value_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Value to be written to the table (Example: 1)\", \"ru\": \"Значение, которое должно быть записано в таблицу (Пример: 1)\"}"
        },
        {
            "Name": "yes",
            "Conditions": "",
            "Trans": "{\"en\":\"Yes\",\"ru\":\"Да\"}"
        },
        {
            "Name": "сlosed",
            "Conditions": "",
            "Trans": "{\"en\": \"Closed\", \"ru\": \"Закрыто\"}"
        }
    ],
    "menus": [
        {
            "Name": "Applications",
            "Value": "MenuItem(Title:$referendum$, Page:referendums_list, Icon:\"fa fa-gavel\")\nMenuItem(Title: \"Land Records (All)\",Page: land_registry_records,Icon: \"fa icon-home\")\nMenuItem(Icon: \"icon-grid\", Page: \"demoApplicationForm\", Title: \"Business License Issuance\")\nMenuItem(Icon: \"icon-globe\", Page: \"demoProperty\", Title: \"Property\")\nMenuItem(Icon: \"icon-briefcase\", Page: \"demoCompanies\", Title: \"Companies\")\nIf(){\n    MenuGroup(Title: $application_structure$, Icon: fa fa-microchip){\n        MenuItem(Title: \"Land Records (All)\",Page: struct_land_registry,Icon: \"fa icon-home\")\n        MenuItem(Title: $referendum$, Page:struct_referendums, Icon:\"fa fa-gavel\")\n        MenuItem(Title: \"Business License Issuance\", Page: struct_appform, Icon: \"icon-grid\")\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        },
        {
            "Name": "Structures",
            "Value": "MenuItem(Title: \"Land Records (All)\",Page: struct_land_registry,Icon: \"fa icon-home\")\nMenuItem(Title: $referendum$, Page:struct_referendums, Icon:\"fa fa-gavel\")\nMenuItem(Title: \"Business License Issuance\", Page: struct_appform, Icon: \"icon-grid\")",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "admin_menu",
            "Value": "MenuItem(Title: \"Land Records(admin)\", Page: land_registry_records_admin,Icon: \"fa icon-globe\")",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "default_menu",
            "Value": "MenuItem(Title: $demo_sendPage$, Page: demo_page_sendPage, Icon: fa fa-envelope-open-o)\nMenuItem(Title: $demo_sendContract$, Page: demo_page_sendContract, Icon:fa fa-envelope-o)\nMenuItem(Title: $demo_sendMessage$, Page: demo_page_sendMessage, Icon:fa fa-paper-plane-o)\nMenuItem(Title: $notifications$, Page: demo_notifications, Icon:fa fa-inbox)\nMenuItem(Title: $profile_edit$, Page: profile_edit, Icon:fa fa-address-card-o)\nMenuItem(Title: \"Applications\", Page: applications_list, Icon:\"fa fa-list-ul\")",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        }
    ],
    "pages": [
        {
            "Name": "applications_list",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle(Applications)\n\tDiv(Class: breadcrumb){\n\t\tSpan(Class: text-muted, Body: Applications)\n\t}\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\n            Data(src_parameters,\"id,name\"){\n                1,$referendum$\n                2,\"Land Records(All)\"\n                3,\"Business License Issuance\"\n            }.Custom(custom_link){\n                If(#id#==1){\n                    LinkPage(Page: referendums_list){        \n                        Div(media-box){\n                            Div(Class: pull-left){\n                                Em(Class: fa fa-2x fa-gavel text-primary)\n                            } \n                            Div(media-box-body clearfix){ \n                                Div(Class: h5 text-bold, Body: #name#)\n                            }\n                        }\n                    }\n                }\n                If(#id#==2){\n                    LinkPage(Page: land_registry_records){        \n                        Div(media-box){\n                            Div(Class: pull-left){\n                                Em(Class: fa fa-2x icon-home text-primary)\n                            } \n                            Div(media-box-body clearfix){ \n                                Div(Class: h5 text-bold, Body: #name#)\n                            }\n                        }\n                    }\n                }\n                If(#id#==3){\n                    LinkPage(Page: demoApplicationForm){        \n                        Div(media-box){\n                            Div(Class: pull-left){\n                                Em(Class: fa fa-2x icon-grid text-primary)\n                            } \n                            Div(media-box-body clearfix){ \n                                Div(Class: h5 text-bold, Body: #name#)\n                            }\n                        }\n                    }\n                }\n            }.Custom(custom_value){\n                SysParam(#name#)\n            }.Custom(actions){\n                Span(Class: text-center text-bold, Body: \"Installed\")\n            }\n            \n            Table(src_parameters, \"=custom_link,=actions\")\n\n\t\t}\n\t\tDiv(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "Applications"
        },
        {
            "Name": "companies_add",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($company_add$)\n\tDiv(Class: breadcrumb){\n\t\tLinkPage($companies$, companies_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: $company_add$)\n\t}\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(company_add))\n                Form(){\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: company_name){\n                                    Span(Body: LangRes(name))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                Input(Class: form-control, Value: \"Company\", Type: text, Name: company_name)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: company_type){\n                                    Span(Body: LangRes(type))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                EcosysParam(Name: company_type, Source: src_company)\n                                Select(Name: company_type, Source: src_company, NameColumn: name, ValueColumn: id)\n                            } \n                        }\n\t\t\t\t\t}\t\n\t\t\t\t\t\t\n                    Div(Class: panel-footer clearfix){\n                        Div(Class: pull-right){\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: companies_list, Contract: Companies_Add).Alert(Text: $want_create_new_company$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                        }\n                    }\n                }\n\n            }\n        }\n\n        Div(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "companies_list",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($companies$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $companies$)\n\t}\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"company_name='#v_Search#'\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"id!=0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n\n    DBFind(Name: companies, Source: src_companies).Custom(custom_address){\n        If(#delete# == 0){\n            Span(Class: text-normal, Body: Address(#id#))\n        }.Else{\n            Span(Class: text-muted, Body: Address(#id#))\n        }\n    }.Custom(custom_id){\n        If(#delete# == 0){\n            Span(Class: text-normal, Body: #id#)\n        }.Else{\n            Span(Class: text-muted, Body: #id#)\n        }\n    }.Custom(custom_name){\n        If(#delete# == 0){\n            LinkPage(Page: companies_view, PageParams: \"company_id=#id#\"){\n                Span(Class: h5 text-bold, Body: #company_name#)\n            }\n        }.Else{\n            Span(Class:text-bold text-muted, Body: #company_name#)\n        }\n\t}.Custom(custom_type){\n        If(#delete# == 0){\n            Span(Class: text-normal, Body: EcosysParam(Name: company_type, Index: #company_type#))\n        }.Else{\n            Span(Class: text-muted, Body: EcosysParam(Name: company_type, Index: #company_type#))\n        }\n    }.Custom(custom_date){\n        If(#delete# == 0){\n            Div(Class: h6 m0, Body: DateTime(DateTime: #date_start#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: h6 m0, Body: DateTime(DateTime: #date_end#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_start#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_end#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n    }.Custom(actions){\n        If(#delete# == 0){\n            Div(Class: text-center, Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Companies_Del, Params: \"company_id=#id#\", Page: companies_list))\n        }\n    }.Where(#v_Where#).Order(\"company_name ASC\")\n\n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(name))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: companies_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }  \n            }\n\n            Div(Class: list-group-item){ \n                Table(Source: src_companies, Columns: \"$name$=custom_name,$id$=custom_id,$address$=custom_address,$type$=custom_type,$created$ / $deleted$=custom_date,$actions$=actions\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){  \n                        Button(Body: $view_all$, Class: btn btn-primary, Page: companies_list, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n\n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: companies_add)\n                }\n            }\n            \n        }           \n    }\n\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "companies_participants",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(Or(#param_company_id#>0,#param_company_id#<0)){\n\n        DBFind(Name: companies, Source: src_companies).Where(\"id=#param_company_id#\").Vars(instance)\n\t\t\n        SetTitle($participants$)\n        Div(Class: breadcrumb){\n            LinkPage($companies$, companies_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_company_name#, companies_view,, \"company_id=#param_company_id#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $participants$)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-3)\n            Div(Class: col-md-6){\n\t\t\t\n                Div(Class: panel panel-primary){\n\t\t\t\t\tDiv(Class: panel-heading, Body: LangRes(participants))\n                    Form(){\n\t\t\t\t\t\n\t\t\t\t\t\tInput(Name: company_id, Class: form-control hidden, Type: text, Value: #param_company_id#)\n\t\t\t\t\t\n\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(company))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-9 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: #instance_company_name#)\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(member))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    DBFind(Name: members, Source: source_members).Columns(member_name, id).Custom(custom_username){\n                                        Span(Body: #member_name# ( Address(#id#) ) ) \n                                    }\n                                    Select(Name: member_id, Source: source_members, NameColumn: custom_username, ValueColumn: id)\n                                    Data(src_sign,\"id,name\"){ \n                                        0,$right_sign_no$\n                                        1,$right_sign_yes$\n                                    }\n                                    RadioGroup(Name: right_sign, Source: src_sign, NameColumn: \"name\", ValueColumn: \"id\")\n                                } \n                            }\n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-lg text-right){\n                                    Label(){\n                                        Span(Body: LangRes(assign))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Data(src_inclusion,\"id,name\"){\n                                        0,$no_include_in_role$\n                                        1,$include_in_role$\n                                    }\n                                    RadioGroup(Name: inclusion_in_role, Source: src_inclusion, NameColumn: \"name\", ValueColumn: \"id\")\n                                }\n                            }\n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(role))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    DBFind(Name: roles_list, Source: source_roles).Columns(role_name, id).Where(\"company_id=#param_company_id# and delete=0\")\n                                    Select(Name: role_id, Source: source_roles, NameColumn: role_name, ValueColumn: id)\n                                    P(Class: m0 text-muted, Body: $select_role_if_include$)\n                                }\n                            }\n                        }\n\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(add),  Class: btn btn-primary, Page: companies_view, PageParams: \"company_id=#param_company_id#\", Contract: Companies_Participants_Add)\n                            }\n                        }\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n            }\n            Div(Class: col-md-3)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "companies_view",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(Or(#company_id#>0,#company_id#<0)){\n\n        DBFind(Name: companies, Source: src_companies).Where(id=#company_id#).Vars(prefix)\n\t\t\n        SetTitle($company$ : #prefix_company_name#)\n        Div(Class: breadcrumb){\n            LinkPage($companies$, companies_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #prefix_company_name#)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\t\t\t\n                Div(Class: panel panel-default){\n                    Form(){ \n                        Div(Class: list-group-item text-center){\n                            P(Class: h3 text-bold m0, Body: #prefix_company_name#)\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-12 mt-sm){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: EcosysParam(Name: company_type, Index: #prefix_company_type#))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                        }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n                Div(Class: panel panel-default){\n                    Form(){ \n                        Input(Name: company_id, Class: form-control hidden, Type: text, Value: #company_id#)\n                        Div(Class: list-group-item text-center){\n                            P(Class: h4 text-bold m0, Body: LangRes(roles))\n                        }\n                        Div(Class: list-group-item){\n                            DBFind(Name: roles_list, Source: src_roles_list).Custom(custom_id){\n                                If(#delete# == 0){\n                                    Span(Body: #id#)  \n                                }.Else{\n                                    Span(Class: text-muted, Body: #id#)\n                                }\n                            }.Custom(custom_name){\n                                If(#delete# == 0){\n                                    LinkPage(Page: roles_view, PageParams: \"v_role_id=#id#,v_role_name=#role_name#\"){\n                                        Span(Class: h5 text-bold, Body: #role_name#)\n                                    }\n                                }.Else{\n                                    Span(Class: h5 text-muted, Body: #role_name#)\n                                }\n                            }.Custom(custom_date){\n                                If(#delete# == 0){\n                                    Div(Class: h6 m0, Body: DateTime(DateTime: #date_create#, Format: \"DD.MM.YYYY HH:MI\"))\n                                    Div(Class: h6 m0, Body: DateTime(DateTime: #date_delete#, Format: \"DD.MM.YYYY HH:MI\"))\n                                }.Else{\n                                    Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_create#, Format: \"DD.MM.YYYY HH:MI\"))\n                                    Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_delete#, Format: \"DD.MM.YYYY HH:MI\"))\n                                }\n                            }.Custom(custom_status){\n                                If(#delete# == 0){\n                                    Span(Body: LangRes(active))\n                                }.Else{\n                                    Span(Class: text-muted, Body: LangRes(deleted))\n                                }\n                            }.Custom(actions){\n                                If(And(#delete#==0,#role_type#!=3)){\n                                    Div(Class: text-center, Body: Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Roles_Del, Params: \"role_id=#id#\", Page: companies_view, PageParams: \"company_id=#company_id#\"))\n                                }\n                            }.Where(\"company_id=#company_id#\").Order(\"delete ASC, id ASC\")\n\n                            Table(Source: src_roles_list, Columns: \"$id$=custom_id,$name$=custom_name,$created$ / $deleted$=custom_date,$status$=custom_status,$actions$=actions\")     \n                        }\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(create), Class: btn btn-default, Page: roles_create, PageParams: \"param_company_id=#company_id#,param_role_type=4\")\n                            }\n                        }\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n                Div(Class: panel panel-default){\n                    Form(){ \n                        Input(Name: company_id, Class: form-control hidden, Type: text, Value: #company_id#)\n                        Div(Class: list-group-item text-center){\n                            P(Class: h4 text-bold m0, Body: LangRes(participants))\n                        }\n                        Div(Class: list-group-item){\n                            DBFind(Name: companies_participants, Source: src_companies_participants).Custom(custom_member){\n\t\t\t\t\t\t\t\tIf(#delete# == 0){\n\t\t\t\t\t\t\t\t\tLinkPage(Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n\t\t\t\t\t\t\t\t\t\tIf(#member_avatar# != \"\"){\n\t\t\t\t\t\t\t\t\t\t\tImage(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: #member_name#)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\tDiv(){\n\t\t\t\t\t\t\t\t\t\tIf(#member_avatar# != \"\"){\n\t\t\t\t\t\t\t\t\t\t\tImage(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-muted, Body: #member_name#)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}.Custom(custom_sign){\n\t\t\t\t\t\t\t\tIf(#delete# == 0){\n\t\t\t\t\t\t\t\t\tIf(#right_sign# == 0 ){\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(yes))\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(no))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\tIf(#right_sign# == 0 ){\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-muted, Body: LangRes(yes))\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-muted, Body: LangRes(no))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}.Custom(custom_role){\n\t\t\t\t\t\t\t\tIf(#delete# == 0){\n                                    If(#role_id# > 0){\n                                        Span(Class: h5 text-normal, Body: #role_name#)\n                                    }\n                                }.Else{\n                                    If(#role_id# > 0){\n                                        Span(Class: h5 text-muted, Body: #role_name#)\n                                    }\n                                }\n                            }.Custom(custom_date){\n                                If(#delete# == 0){\n                                    Div(Class: h6 m0, Body: DateTime(DateTime: #date_start#, Format: \"DD.MM.YYYY HH:MI\"))\n                                    Div(Class: h6 m0, Body: DateTime(DateTime: #date_end#, Format: \"DD.MM.YYYY HH:MI\"))\n                                }.Else{\n                                    Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_start#, Format: \"DD.MM.YYYY HH:MI\"))\n                                    Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_end#, Format: \"DD.MM.YYYY HH:MI\"))\n                                }\n                            }.Custom(actions){\n\t\t\t\t\t\t\t\tIf(#delete# == 0){\n\t\t\t\t\t\t\t\t\tDiv(Class: text-center, Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Companies_Participants_Del, Params: \"participant_id=#id#\", Page: companies_view, PageParams: \"company_id=#company_id#\"))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}.Where(\"company_id=#company_id#\").Order(\"delete ASC, id ASC\")\n\n                            Table(src_companies_participants, \"$id$=id,$member$=custom_member,$right_sign$=custom_sign,$role$=custom_role,$appointed$ / $deleted$=custom_date,$actions$=actions\")  \n                        }\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(add), Class: btn btn-default, Page: companies_participants, PageParams: \"param_company_id=#company_id#\")\n                            }\n                        }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "default_page",
            "Value": "Include(demo_block_sendMessage)",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "demoApplicationForm",
            "Value": "SetTitle(\"Application Form\")\nDiv(Class: content-wrapper){\n    DBFind(Name: members, Source: ava).Columns(\"id,member_name,avatar\").Custom(mem_shar){[#id#] #member_name#}.Where(\"id!=0\")\n    SetVar(Name: app_company_name, Value: \"\")\n    SetVar(Name: app_id, Value:\"0\")\n    DBFind(Name: pc_license_application, Source: app).Vars(app).Where(\"company_founder=#key_id# and status != 4\")\n    If(#app_status# > 0){\n        Div(Class: col-md-6 panel-default data-sweet-alert){\n            Div(Class: list-group-item){\n                Span(Class: h3,Body: Application id: #app_id#)\n                Div(Class: panel-body){\n                    Div(Class: well box-placeholder){\n                        Span(Class: h4 text-bold, Body: List of shareholders)\n                        DBFind(Name: pc_app_shareholders, Source: sh).Columns(\"id,person_id,shareholding,name,person_status\").Where(\"application_id=#app_id# and status != 0\").Order(id)\n                        ForList(sh){\n                            P(Class: h4 pclass,Body:\"#name# - #shareholding#%\")\n                        }\n                    }\n                    Span(Class: h3 ,Body: \"Company detail\")\n                    Div(Class: clearfix){\n                        Div(Class: pull-left){\n                            P(Class: h4 text-bold, Body: \"Company name:\")\n                        }\n                        Div(Class: pull-right){\n                            P(Class: h4, Body: \"#app_company_name#\")\n                        }\n                    }\n                    Div(Class: clearfix){\n                        Div(Class: pull-left){\n                            P(Class: h4 text-bold, Body: \"Business scope:\")\n                        }\n                        Div(Class: pull-right){\n                            P(Class: h4, Body: EcosysParam(business_scope, #app_business_scope#))\n                        }\n                    }\n                    Div(Class: clearfix){\n                        Div(Class: pull-left){\n                            P(Class: h4 text-bold, Body: \"Bussiness premises:\")\n                        }\n                        Div(Class: pull-right){\n                            DBFind(\"pcproperty\").Columns(\"name\").Vars(pref).WhereId(\"#app_business_premises#\")\n                            P(Class: h4, Body:\"#pref_name#\")\n                        }\n                    }\n                }\n            }\n        }\n        Div(Class: col-md-6 panel-default data-sweet-alert){\n            Div(panel-heading, Div(panel-title, Overall progress))\n            Div(Class: panel panel-body){\n                Div(Class: \"processfs\"){\n                    If(#app_name_reservation#==2){\n                        Div(){\n                            Span(Class: \"faProcBellDenied\", Body: Em(Class: fa fa-bell))\n                            Span(Class:text-danger, Body: Company name is not approved. Enter the new name.)\n                            Form(Class: d-inline-block){\n                                Input(Name: business_scope, Class: hidden, Type: text, Placeholder: text,Value: #app_business_scope#)\n                                Input(Name: business_premises, Class: hidden, Type: text, Placeholder: text,Value: #app_business_premises#)\n                                Input(Name: id, Class: hidden, Type: text, Placeholder: text,Value: #app_id#)\n                                Div(Class: input-group){\n                                    Input(Name: company_name, Class: form-control, Type: text, Placeholder: text,Value: #app_company_name#)\n                                }\n                                Div(Class: input-group-btn){\n                                    Button(Save,Contract:pcApplicationFormEdit,Class:btn btn-default bl0 radius-tl-clear radius-bl-clear,Page: demoApplicationForm)\n                                }\n                            }\n                        }\n                    }.ElseIf(#app_name_reservation#==1){\n                        Div(){Span(Class:\"faLineSucces\")}\n                        Span(Class:\"faProcBellSuccess\",Body: Em(Class:fa fa-bell))\n                        Span(Class:text-success,Body: Company name is approved)\n                        \n                    }\n                }\n                Div(Class: \"process\"){\n                    If(#app_police_inspection#==2){\n                        \n                        Span(Class: \"faProcBellDenied\",Body: Em(Class:fa fa-bell))\n                        Span(Class: text-danger,Body:\" No Police inspection.\") \n                    }.ElseIf(#app_police_inspection#==1){\n                        Div(){Span(Class:\"faLineSucces\")}\n                        Span(Class:\"faProcBellSuccess\",Body: Em(Class:fa fa-bell))\n                        Span(Class:text-success, Body:\"Police inspection.\")    \n                    } \n                }\n                Div(Class: \"process\"){\n                    If(#app_ministry_economy#==2){\n                        Span(Class: \"faProcBellDenied\",Body: Em(Class:fa fa-bell))\n                        Span(Class: text-danger, Body:\"No Decision of Ministry Economy.\") \n                    }.ElseIf(#app_ministry_economy#==1){\n                        Div(){Span(Class:\"faLineSucces\")}\n                        Span(Class:\"faProcBellSuccess\",Body: Em(Class:fa fa-bell))\n                        Span(Class:text-success, Body:\"Decision of Ministry Economy.\") \n                    }\n                }\n                Div(Class: \"process\"){\n                    If(#app_status# > 1){\n                        If(#app_status# == 3){\n                            If(#app_company_id# != 0){\n                                Span(Class:\"faProcBellInfo\", Body: Em(Class:fa fa-bell))\n                                Span(Class:text-info, Body: Company #app_company_name# registered DateTime(#app_date_end#, YYYY.MM.DD) - ID = #app_company_id#)\n                            }.Else{\n                            Span(Class:\"faProcBellDenied\", Body: Em(Class:fa fa-bell))\n                            Span(Class:text-danger, Body: Registration is denied DateTime(#app_date_end#, YYYY.MM.DD)) \n                            }\n                        }\n                    }\n                }\n                Div(Class: panel-footer){\n                    Div(Class: clearfix){\n                        Div(Class: pull-right){\n                            If(#app_company_founder#==#key_id#){\n                                If(#app_status# > 1){\n                                    Form(){\n                                        Input(Name:application_id, Class: hidden, Type: text, Placeholder: text,Value: #app_id#)\n                                        Button(New,Contract:pcNewApplication,Class:btn btn-primary,Page: demoApplicationForm)\n                                    }\n                                }.Else{\n                                    SetVar(note_page_name=\"\")\n                                    Form(){\n                                        Input(Name:application_id, Class: hidden, Type: text, Placeholder: text,Value: #app_id#)\n                                        Button(Check,Class:btn btn-primary,Page: demoApplicationForm)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(Class:col-md-6 panel-primary data-sweet-alert){\n            Div(Class: panel-heading panel-title,Body: \"Application Form\")\n            If(#app_id# != 0){\n                DBFind(Name: pc_app_shareholders, Source:sh).Columns(\"id,person_id,shareholding,name,person_status,application_id\").Where(\"application_id=#app_id# and status!=0\").Order(\"id\")\n                Form(){\n                    Div(Class: list-group-item){\n                        ForList(Source: sh){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    If(#person_status#!=4){\n                                        Label(Name : #name#)\n                                    }.Else{\n                                        Label(Name : #name#)\n                                        Span(Class: h4, Body:\"Person is forbidden to conduct business!\") \n                                    }\n                                }\n                                Div(Class: col-md-7 mt-sm text-center){\n                                    \n                                    Input(Name:share, Class: \"form-control\", Type: int, Placeholder: text,Value: #shareholding#)\n                                    Input(Name:idshare, Class: \"hidden\", Type: text, Placeholder: text,Value: #id#)\n                                }\n                                Div(Class: col-md-2 mt-sm){\n                                    Div(Class: clearfix){\n                                        Div(Class: pull-right){\n                                            Button(Delete,Contract:pcAppShareholdersDel,Class:btn btn-default,Params:\"Id=#id#,application_id=#app_id#\",Page:demoApplicationForm).Alert(Text:Are you sure you want to delete?,ConfirmButton:Confirm,CancelButton:Cancel)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        Input(Name:share, Class: \"hidden\", Type: int, Placeholder: text,Value:\"0\")\n                        Input(Name:idshare, Class: \"hidden\", Type: text, Placeholder: text,Value:\"0\")\n                        Div(Class: clearfix){\n                            Div(Class: pull-right){\n                                Button(Save,Class: btn btn-primary,Contract: pcShareholding,Params: \"Shareholding=Val(share),Id=Val(idshare)\",Page:\"demoApplicationForm\")\n                            }\n                        }\n                    }\n                }\n                Form(){\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(\"Add shareholder ID\")\n                            }\n                            Div(Class: col-md-7 mt-sm text-center){\n                                Select(Name: person_id,Source: ava,NameColumn:mem_shar ,ValueColumn: id)\n                            }\n                            Div(Class: col-md-2 mt-sm){\n                                Input(Name:application_id, Class: hidden, Type: text, Placeholder: text,Value: #app_id#)\n                                Button(Add,Contract:pcAppShareholders,Class:btn btn-default pull-right,Params:\"person_id=Val(person_id)\",Page:demoApplicationForm)\n                            }\n                        }\n                    }\n                }\n            }\n            Form(){\n                Div(Class: list-group-item){\n                    Div(Class: row df f-valign){\n                        Div(Class: col-md-3 mt-sm text-right){\n                            Label(\"Company Name\")\n                        }\n                        Div(Class: col-md-9 mt-sm text-center){\n                            Input(Name:company_name,Type:text,Class:form-control m-b, Value: #app_company_name#)\n                        }\n                    }\n                }\n                Div(Class: list-group-item){\n                    Div(Class: row df f-valign){\n                        Div(Class: col-md-3 mt-sm text-right){\n                            Label(\"Business Scope\")\n                        }\n                        Div(Class: col-md-9 mt-sm text-center){\n                            EcosysParam(Name:business_scope, Source:src_scope)\n                            Select(Name:business_scope,Source:src_scope,NameColumn:\"name\", ValueColumn: \"id\", Value: #app_business_scope#)\n                        }\n                    }\n                    Div(Class: row df f-valign){\n                        Div(Class: col-md-3 mt-sm text-right){\n                            Label(\"Business premises\")\n                        }\n                        Div(Class: col-md-9 mt-sm text-center){\n                            DBFind(Name: pcproperty, Source: src_property).Where(\"del=0\")\n                            Select(Name:business_premises,Source:src_property,NameColumn:\"name\",ValueColumn:\"id\",Value:#app_business_premises# )\n                        }\n                    }\n                }\n                Input(Name: id, Class: hidden, Type: text,Placeholder: text,Value:#app_id#)\n                Div(Class: panel-footer){\n                    Div(Class: clearfix){\n                        Div(Class: pull-right){\n                            If(#app_company_name# != \"\"){\n                                Button(Edit,Contract:pcApplicationFormEdit,Class:btn btn-default btn-pill-left,Page: demoApplicationForm)\n                                Button(Send,Contract:pcApplicationFormSend,Class:btn btn-primary btn-pill-right,Params:\"id=#app_id#,Shareholding=share,Id=idshare\",Page:demoApplicationForm)\n                            }.Else{\n                                Button(Create,Contract:pcApplicationForm,Class:btn btn-primary,Page:demoApplicationForm,PageParams:\"app_business_premises=Val(business_premises),app_company_name=Val(company_name),app_business_scope=Val(business_scope)\")\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        If(!GetVar(#app_status#)){\n            Div(Class: col-md-6 panel panel-default data-sweet-alert){\n                Div(Class: panel-heading){\n                    Div(Class: panel-title,Body: Overall progress)\n                }\n                Div(Class: panel-body){\n                    Div(Class: \"processfs\"){\n                        Div(){Span(Class:\"faLine\")}\n                        Span(Class:\"faProcBell\",Body: Em(Class:fa fa-bell))\n                        Span(Class:,Body: Approve company name)\n                    }\n                    Div(Class: \"process\"){\n                        Div(){Span(Class:\"faLine\")}\n                        Span(Class:\"faProcBell\",Body: Em(Class:fa fa-bell))\n                        Span(Class:,Body:Police inspection)\n                    }\n                    Div(Class: \"process\"){\n                        Span(Class:\"faProcBell\",Body: Em(Class:fa fa-bell))\n                        Span(Class:,Body:Decision of Ministry Economy)\n                    }\n                }\n            }\n        }\n    }\n    If(#app_company_founder#==#key_id#){\n        If(GetVar(app_id)){\n            Form(){\n                Input(Name: application_id,Class: hidden,Type: text,Placeholder: text,Value: #app_id#)\n                Button(Reset,Contract: pcCancel,Class: btn btn-default btn-xs ml-lg,Page:demoApplicationForm)\n            }\n        }\n    }\n}",
            "Conditions": "true",
            "Menu": "Applications"
        },
        {
            "Name": "demoCompanies",
            "Value": "SetTitle(Companies)\nDiv(Class: content-wrapper){\n    Div(Class: col-md-12 panel panel-primary data-sweet-alert){\n        Form(){\n            Div(panel-heading, Div(Class:panel-title, Registry of Companies))\n            Div(Class: list-group-item){\n                Div(Class: table-responsive){\n                    DBFind(Name:pc_companies,Source: src_prop).Custom(type){EcosysParam(business_scope, #business_scope#)}.Custom(Reg_date){DateTime(#date_start#,DD.MM.YYYY HH:MI)}.Where(delete=0)\n                    Table(Source: src_prop,Columns:\"ID=id,Company name = company_name, Company founder = company_founder,Type = type,Registration Date=Reg_date\")\n                }\n            }\n        }\n    }\n\n    Div(Class: col-md-12 panel panel-primary data-sweet-alert){\n        Form(){\n            Div(panel-heading, Div(Class:panel-title, Registry of Shareholders))\n            Div(Class: list-group-item){\n                Div(Class: table-responsive){\n                    DBFind(Name:pc_shareholders,Source: src_shar).Custom(founder).Custom(type){EcosysParam(business_scope, #business_scope#)}.Custom(Reg_date){DateTime(#date_start#,DD.MM.YYYY HH:MI)}.Where(delete=0)\n                    Table(Source: src_shar,Columns:\"ID=id,Company name = company_name,Name=person_name,Registration Date=#Reg_date#,%=shareholding\")\n                }\n            }\n        }\n    }\n}",
            "Conditions": "true",
            "Menu": "Applications"
        },
        {
            "Name": "demoProperty",
            "Value": "SetTitle(Property)\nDiv(Class: content-wrapper){\n    DBFind(Name:pcproperty,Source: src_prop).Custom(typ){EcosysParam(business_scope, #type#)}.Custom(Maps){Map(Value: `#coords#`, MapType: \"satellite\", Hmap: 150)}.Where(del=0)\n    Div(Class:col-md-12 panel panel-primary data-sweet-alert){\n        Table(Source: src_prop,Columns:\"ID=id,Location on the map=Maps,Address=name,Owner=member_id,Type=typ\")\n    }\n}",
            "Conditions": "true",
            "Menu": "Applications"
        },
        {
            "Name": "demo_notifications",
            "Value": "DBFind(Name: notifications, Source: noti_s).Where(\"closed=0 and notification_type=1 and recipient_id=#key_id#\")\nSetTitle($notifications$)\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Div(panel panel-primary){\n                Div(panel-heading){$notifications$}\n                Div(panel-body){\n                    ForList(noti_s){\n                        Div(Class: list-group-item){\n                            LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){\n                                Div(media-box){\n                                    Div(Class: pull-left){\n                                        Em(Class: fa #icon# fa-1x text-info)\n                                    }\n                                    Div(media-box-body clearfix){\n                                        Div(Class: m0 text-normal, Body: #header_text#)\n                                        Div(Class: m0 text-muted h6, Body: #body_text#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "demo_page_message",
            "Value": "If(#notific_id#>0){\n    SetTitle($demo_sendMessage$)\n    Div(content-wrapper){\n        Div(row){\n            Div(col-xs-8 col-xs-offset-2 col-lg-6 col-lg-offset-3){\n                Div(panel panel-primary){\n                    Div(panel-heading){$result$}\n                    Div(panel-body){\n                        Div(row){\n                            Div(col-sm-10 col-sm-offset-1 alert alert-default){\n                                Div(){Header: #notific_header#}\n                                Div(){SomeText: #SomeText#}\n                            }\n                            \n                        }.Style(display: flex;align-items: flex-end;)\n                    }\n                    Div(panel-footer clearfix){\n                        Div(pull-right text-right){\n                            Button(Page: demo_page_sendMessage, Class: btn btn-primary, Contract:Notifications_Single_Close, Params:\"notific_id=#notific_id#\", Body: $close$)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "demo_page_sendContract",
            "Value": "Include(demo_block_sendContract)",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "demo_page_sendMessage",
            "Value": "Include(demo_block_sendMessage)",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "demo_page_sendPage",
            "Value": "Include(demo_block_sendPage)",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "ecosystem_new",
            "Value": "Div(Class: content-wrapper){\n    Div(Class: content-heading, Body: NewEcosystem)\n\n    Div(row df f-valign){\n        Div(col-md-3)\n        Div(col-md-6){\n            Div(panel panel-primary){\n                Div(panel-heading, NewEcosystem)\n                Form(){ \n\n\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\tDiv(row df f-valign){\n\t\t\t\t\t\t\tDiv(col-md-3 mt-sm  text-right){\n\t\t\t\t\t\t\t\tLabel(For: Name){\n\t\t\t\t\t\t\t\t\tSpan(Name)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-9 mc-sm text-left){\n\t\t\t\t\t\t\t\tInput(Class:form-control, Placeholder:text, Type:text, Name:Name)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n                    \n\t\t\t\t\tDiv(panel-footer clearfix){\n\t\t\t\t\t\tDiv(pull-right){\n\t\t\t\t\t\t\tButton(Body: LangRes(save), Class: btn btn-primary, Contract: NewEcosystem)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n                }\n            }\n        }\n        Div(col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "land_registry_add",
            "Value": "Div(content-wrapper){\n    Div(breadcrumb){\n        Div(){\n            LinkPage(LangRes(land_records), land_registry_records)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(LangRes(land_records_add), text-muted)\n        }\n    }\n    SetTitle($department_of_land_resources$)\n    \n    Div(row df f-valign){\n        Div(col-sm-8 col-sm-offset-2 text-left){\n            Div(panel panel-primary data-sweet-alert){\n                Form(){\n                    Div(panel-heading){\n                        Div(panel-title, LangRes(add_new_record))\n                    }\n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-3 text-right){\n                                Strong(LangRes(address))\n                            }\n                            Div(col-md-9 text-center){\n                                InputMap(Name: Coords,Type: polygon, MapType: hybrid, Value: `{\"zoom\":8, \"center\":{\"lat\":55.749942860682545,\"lng\":37.6207172870636}}`)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-3 text-right){\n                                Strong(LangRes(owner))\n                            }\n                            Div(col-md-9 mt-xs text-left){\n                                DBFind(Name: members, Source: src_owners)\n                                Select(Name: OwnerId, Source: src_owners, ValueColumn: id, NameColumn: member_name, Class: form-control m-b)\n                            }\n                        }\n                        Div(row df f-valign){\n                            Div(col-md-3 text-right){\n                                Strong(LangRes(land_nature))\n                            }\n                            Div(col-md-9 mt-xs text-left){\n                                EcosysParam(Name: land_nature, Source: src_nature)\n                                Select(Name: LandNature, Source: src_nature, Class: form-control, ValueColumn: id, NameColumn: name)\n                            }\n                        }\n                        \n                        Div(row df f-valign){\n                            Div(col-md-3 text-right){\n                                Strong(LangRes(buildings_use_class))\n                            }\n                            Div(col-md-9 mt-xs text-left){\n                                EcosysParam(Name: land_buildings_use_class, Source: use_class)\n                                Select(Name: BuildingsUseClass, Source: use_class, Class: form-control, ValueColumn: id, NameColumn: name)\n                            }\n                        }\n                    }\n                    Div(panel-footer){\n                        Div(clearfix){\n                            Div(pull-right){\n                                Div(btn-group){\n                                    Input(Name: RegistrationDate, Type: hidden, Value: Now(datetime))\n                                    Button(Page: land_registry_records, Body: LangRes(back), Class: btn btn-default btn-pill-left)\n                                    Button(Body: LangRes(add), Class: btn btn-primary btn-pill-right, Contract: land_registry_Add, Page: land_registry_records)\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Applications"
        },
        {
            "Name": "land_registry_edit",
            "Value": "Include(land_registry_edit)",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Applications"
        },
        {
            "Name": "land_registry_records",
            "Value": "SetTitle($land_records$)\nSetVar(this, land_registry_records)\nSetVar(admin, 0)\n\nIf(And(#isSearch#==1, #str_search#>0)){\n    SetVar(v_Where, \"delete=0 and land_use=#str_search#\")\n}.Else{\n    SetVar(v_Where, \"delete=0\")\n}\n\nInclude(land_registry_records)\n",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Applications"
        },
        {
            "Name": "land_registry_records_admin",
            "Value": "SetTitle($land_records$ (admin))\nSetVar(this, land_registry_records_admin)\nSetVar(admin, 1)\n\nIf(And(#isSearch#==1, #str_search#>0)){\n    SetVar(v_Where, \"delete=0 and land_use=#str_search#\")\n}.Else{\n    SetVar(v_Where, \"delete=0\")\n}\n\nInclude(land_registry_records)\n",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "Applications"
        },
        {
            "Name": "land_registry_view",
            "Value": "If(GetVar(notific_val_int)){\n    SetVar(LandId, #notific_val_int#)\n}.Else{}\n\nIf(GetVar(notific_id)){}.Else{SetVar(notific_id,0)}\n\nSetVar(title,$land_record$)\n\nIf(#admin#==1){}.Else{SetVar(admin, 0)}\n\nIf(#LandId#>0){}.Else{SetVar(LandId, 1)}\n\nIf(GetVar(LandId)){\n    DBFind(Name: land_registry, Source: src_entry).WhereId(#LandId#).Vars(entry)\n    DBFind(Name: land_registry_ownership, Source: src_land_ownership).Where(lend_object_id=#LandId#).Vars(ownership)\n    \n    DBFind(Name: members, Source: src_owner).Where(id=#ownership_owner_id#).Vars(owner)\n}\nSetTitle(#title#)\n\nDiv(content-wrapper){\n    Div(breadcrumb){\n        Div(){\n            LinkPage(Body:$land_records$,Page: land_registry_records, PageParams: \"admin=#admin#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(#title#, text-muted)\n        }\n    }\n    If(GetVar(LandId)){\n        Div(row df f-valign){\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3 mt-sm text-left){\n                Div(panel panel-default){\n                    Form(){\n                        Div(list-group-item){\n                            Div(h3){$land_record$ #GetVar(LandId)}\n                        }\n                        Div(row df f-valign){\n                            Div(col-sm-12){\n                                Map(MapType: hybrid, Hmap:300, Value: #entry_map_coords#)\n                            }\n                        }\n                        Div(list-group-item){\n                            Div(row df f-valign){\n                                Div(col-md-5 mt-sm text-right h5){\n                                    Strong($owner$:)\n                                }\n                                Div(col-md-6 mt-sm text-left h5){\n                                    Div(){\n                                        Image(Src: #owner_avatar#, Alt: ava, Class: img-thumbnail img-circle).Style(max-width:40px;margin-right:10px;)\n                                        Span(#owner_member_name#)\n                                    }\n                                }\n                            }\n                            Div(row df f-valign){\n                                Div(col-md-5 mt-sm text-right h5){\n                                    Strong($area_size$)\n                                    (Span(m).(2).Style(vertical-align: super;font-size:small;)):\n                                }\n                                Div(col-md-7 mt-sm text-left h5){#entry_area#}\n                            }\n                            Div(row df f-valign){\n                                Div(col-md-5 mt-sm text-right h5){\n                                    Strong($address$:)\n                                }\n                                Div(col-md-7 mt-sm text-left h5){#entry_address#}\n                            }\n                            \n                            Div(row df f-valign){\n                                Div(col-md-5 mt-sm text-right h5){Strong($record_add_date$:)}\n                                Div(col-md-7 mt-sm text-left h5){DateTime(#entry_date_create#)}\n                            }\n                            \n                            Div(row df){\n                                Div(col-md-5 mt-sm text-right h5){Strong($buildings_use_class$:)}\n                                Div(col-md-7 mt-sm text-left h5){\n                                    EcosysParam(Name: buildings_use_class, Index: #entry_buildings_use_class#)\n                                }\n                            }\n                            \n                            Div(row df){\n                                Div(col-md-5 mt-sm text-right h5){Strong($land_nature$:)}\n                                Div(col-md-7 mt-sm text-left h5){\n                                    EcosysParam(Name: land_nature, Index: #entry_land_nature#)\n                                }\n                            }\n                            \n                            DBFind(Name: notifications, Source: src_alert).Where(page_params='LandId=#LandId#,admin=1,second_request=1' and closed=0).Vars(alert)\n                            Div(row df){\n                                Div(col-md-5 mt-sm text-right h5){Strong($legal_status$:)}\n                                Div(col-md-7 mt-sm text-left h5){\n                                    If(GetVar(alert_id)){\n                                        SetVar(alert, 1)\n                                    }.Else{\n                                        SetVar(alert, 0)\n                                    }\n                                    Span(EcosysParam(Name: legal_status, Index: #entry_legal_status#)).Style(margin-right:10px;)\n                                    If(And(#entry_legal_status#!=1, #alert#==0)){\n                                        Button(Contract: land_registry_SecondRequest, Body:$send_request$, Params: \"LandId=#LandId#\", Class: btn btn-default, Page: land_registry_view, PageParams: \"LandId=#LandId#\").Alert(Text:$ask_request_second$, ConfirmButton:$confirm$, CancelButton:$cancel$)\n                                    }\n                                }\n                            }\n                            \n                            Div(row df){\n                                Div(col-md-5 mt-sm text-right h5){Strong($encumbrance_certificate$:)}\n                                Div(col-md-7 mt-sm text-left h5){\n                                    Span(EcosysParam(Name: land_ec_status, Index: #entry_encumbrance_certificate#)).Style(padding-right:10px;)\n                                    If(And(#entry_encumbrance_certificate#!=1, #alert#==0)){\n                                        Button(Contract: land_registry_SecondRequest, Body:$send_request$, Params: \"LandId=#LandId#\", Class: btn btn-default, Page: land_registry_view, PageParams: \"LandId=#LandId#\").Alert(Text:$ask_request_second$, ConfirmButton:$confirm$, CancelButton:$cancel$)\n                                    }\n                                }\n                            }\n                            \n                            Div(row df f-valign){\n                                Div(col-md-5 mt-sm text-right h5){Strong($consideration_value$:)}\n                                Div(col-md-7 mt-sm text-left h5){\n                                    If(#entry_price#>0){\n                                        Span(#entry_price# INR).Style(padding-right:10px;)\n                                    }.Else{\n                                        $undefined$\n                                    }\n                                    If(#ownership_owner_id#==#key_id#){\n                                        Button(Page: land_registry_edit, Body:$change$, PageParams: \"LandId=#LandId#\", Class: btn btn-default)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Applications"
        },
        {
            "Name": "members_list",
            "Value": "Div(Class: content-wrapper){\n    \n    SetTitle($membership$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $membership$)\n    }\n    \n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"member_name='#v_Search#'\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"id!=0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n    \n    DBFind(Name: members, Source: src_member).Custom(custom_username){\n        LinkPage(Page: profile_view, PageParams: \"v_member_id=#id#\"){\n            Image(Class: img-circle, Alt: avatar, Src: \"#avatar#\").Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n            Span(Class: h5 text-bold, Body: #member_name#)\n        }\n    }.Custom(custom_member_id){\n        Span(Body: Address(#id#))\n    }.Where(#v_Where#).Order(\"member_name\")\n    \n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(username))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: members_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }\n            }\n            \n            Div(Class: list-group-item){\n                Table(Source: src_member, Columns: \"$username$=custom_username,$id$=id,$member_id$=custom_member_id\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: members_list, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n            \n        }\n    }\n    \n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "money_transfer",
            "Value": "Div(Class: content-wrapper){\n    Div(Class: content-heading, Body: Money transfer)\n    Div(Class: row df f-valign){\n        DBFind(Name: keys, Source: src_key)\n        Table(Source: src_key)\n\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: Money transfer)\n                Form(){\n                    Div(list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(\"Recipient\")\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                Input(Name: \"Recipient\", Type: \"text\", Placeholder: \"xxxx-xxxx-xxxx-xxxx\")\n                            } \n                        } \n                    }\n                    Div(list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(\"Pub\")\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                Input(Name: \"Pub\", Type: \"text\")\n                            } \n                        } \n                    }\n                    Div(list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(\"Amount\")\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                Input(Name: \"Amount\", Type: \"text\", Placeholder: \"0\", Value: \"50000000000000000000000\")\n                            } \n                        }  \n                    }\n                    Div(panel-footer text-right){\n                        Button(Contract: \"@1MoneyTransfer\", Body: \"Send\", Class: \"btn btn-primary\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications",
            "Value": "DBFind(Name: notifications, Source: noti_s).Where(\"closed=0 and notification_type=1 and recipient_id=#key_id#\")\nDBFind(Name: notifications, Source: noti_r).Where(\"closed=0 and notification_type=2 and (started_processing_id=0 or started_processing_id=#key_id#)\")\n\nForList(noti_s){\n        Div(Class: list-group-item){\n            LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){        \n                Div(media-box){\n                    Div(Class: pull-left){\n                        Em(Class: fa #icon# fa-1x text-info)\n                    } \n                    Div(media-box-body clearfix){ \n                        Div(Class: m0 text-normal, Body: #header_text#) \n                        Div(Class: m0 text-muted h6, Body: #body_text#)\n                    }\n                }\n            }\n        }\n}\n\nForList(noti_r){\n    DBFind(Name: roles_assign, Source: src_roles).Where(\"member_id=#key_id# and role_id=#role_id# and delete=0\").Vars(prefix)\n    If(#prefix_id# > 0){\n        Div(Class: list-group-item){\n            LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){        \n                Div(media-box){\n                    Div(Class: pull-left){\n                        Em(Class: fa #icon# fa-1x text-primary)\n                    } \n                    Div(media-box-body clearfix){ \n                        Div(Class: m0 text-normal, Body: #header_text#) \n                        Div(Class: m0 text-muted h6, Body: #body_text#)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_roles",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($role_notifics$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $role_notifics$)\n\t}\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"role_name='#v_Search#' and notification_type=2\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"notification_type=2\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n\n    DBFind(Name: notifications, Source: src_notifications).Custom(custom_id){\n        If(#closed# == 0){\n            Span(Body: #id#)  \n        }.Else{\n            Span(Body: #id#).Style(color:#A9A9A9;)\n        }\n    }.Custom(custom_role){\n        If(#closed# == 0){\n            Span(Body: ID: #role_id# - #role_name#)  \n        }.Else{\n            Span(Body: ID: #role_id# - #role_name#).Style(color:#A9A9A9;)\n        }\n    }.Custom(custom_icon){\n        If(#closed# == 0){\n            Em(Class: fa #icon# fa-2x text-info)\n        }.Else{\n            Em(Class: fa #icon# fa-2x text-muted)\n        }\n    }.Custom(custom_page){\n        If(#closed# == 0){\n            LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){\n                Span(Class: h5 text-bold, Body: #page_name#)\n            }\n        }.Else{\n            Div(){\n                Span(Class: h5 text-muted, Body: #page_name#)\n            }\n        }\n    }.Custom(custom_params){\n        If(#closed# == 0){\n            Span(Class: h6 m0, Body: \"#page_params#\")  \n        }.Else{\n            Span(Class: h6 m0, Body: #page_params#).Style(color:#A9A9A9;)\n        }\n    }.Custom(custom_date_started){\n        If(#started_processing_id# == 0){\n        }.Else{\n            If(#closed# == 0){\n                P(Class: m0, Body: DateTime(DateTime: #started_processing_time#, Format: \"DD.MM.YYYY HH:MI\"))\n                P(Class: m0 h6, Body: Address(#started_processing_id#))\n            }.Else{\n                P(Class: m0, Body: DateTime(DateTime: #started_processing_time#, Format: \"DD.MM.YYYY HH:MI\")).Style(color:#A9A9A9;)\n                P(Class: m0 h6, Body: Address(#started_processing_id#)).Style(color:#A9A9A9;)\n            }\n        }\n    }.Custom(custom_date_finished){\n        If(#finished_processing_id# == 0){\n        }.Else{\n            P(Class: m0, Body: DateTime(DateTime: #finished_processing_time#, Format: \"DD.MM.YYYY HH:MI\")).Style(color:#A9A9A9;)\n            P(Class: m0 h6, Body: Address(#finished_processing_id#)).Style(color:#A9A9A9;)\n        }\n    }.Custom(custom_status){\n        If(#closed# == 0){\n            If(#started_processing_id# == 0){\n                Span(Body: LangRes(active))\n            }.Else{\n                Span(Body: LangRes(processing))\n            }\n        }.Else{\n            Span(Body: LangRes(active)).Style(color:#A9A9A9;)\n        }\n    }.Custom(actions){\n        If(#closed# == 0){\n            If(#started_processing_id# == 0){\n                Button(Body: Em(Class: fa icon-paper-clip), Class: btn btn-danger, Contract: Notifications_Roles_Processing, Params: \"notific_id=#id#\", Page: notifications_roles)\n            }.Else{\n                Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Notifications_Roles_Finishing, Params: \"notific_id=#id#\", Page: notifications_roles)\n            }\n        }\n    }.Where(#v_Where#).Order(\"closed ASC, id ASC\")\n\n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(role))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: notifications_roles, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }  \n            }\n\n            Div(Class: list-group-item){ \n                Table(Source: src_notifications, Columns: \"$id$=custom_id,$role$=custom_role,$icon$=custom_icon,$page_name$=custom_page,$params$=custom_params,$started$=custom_date_started,$сlosed$=custom_date_finished,$status$=custom_status,$actions$=actions\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){  \n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_roles, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n\n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_roles_send)\n                }\n            }\n            \n        }           \n    }\n\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_roles_send",
            "Value": "Div(Class: content-wrapper){\n\tSetTitle($role_notifics$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $role_notifics$)\n\t}\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(role_notifics))\n                Form(){\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: role_id){\n                                    Span(Body: LangRes(role))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                DBFind(Name: roles_list, Source: source_roles).Columns(role_name, id).Where(\"delete=0\")\n                                Select(Name: role_id, Source: source_roles, NameColumn: role_name, ValueColumn: id)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: closure_type){\n                                    Span(Body: LangRes(closure_type))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                EcosysParam(Name: notification_closure, Source: src_closure_type)\n                                Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\n                            } \n                        }\n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: emission_type){\n                                    Span(Body: LangRes(icon))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                EcosysParam(Name: notification_icon, Source: src_icon)\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: text_header){\n                                    Span(Body: LangRes(header))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                Input(Class: form-control, Value: \"Header text\", Type: text, Name: text_header)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: text_body){\n                                    Span(Body: LangRes(body_text))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                Input(Class: form-control, Value: \"Body text\", Type: text, Name: text_body)\n                            } \n                        }\n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: page_name){\n                                    Span(Body: LangRes(page_name))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                Input(Class: form-control, Value: \"notifications_testpage\", Type: text, Name: page_name)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: params_val){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                Input(Class: form-control, Value: \"notific_val_int=11,notific_val_str=string\", Type: text, Name: params_val)\n                            } \n                        }\n                    }\n\n                    Div(Class: panel-footer clearfix){\n                        Div(Class: pull-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_roles)\n                            Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_roles, Contract: Notifications_Roles_Send)\n                        }\n                    }\n                }\n\n            }\n        }\n\n        Div(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_single",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($single_notifics$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $single_notifics$)\n\t}\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"recipient_name='#v_Search#' and notification_type=1\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"notification_type=1\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n\n    DBFind(Name: notifications, Source: src_notifications).Custom(custom_id){\n        If(#closed# == 0){\n            Span(Body: #id#)  \n        }.Else{\n            Span(Body: #id#).Style(color:#A9A9A9;)\n        }\n    }.Custom(custom_recipient){\n        If(#closed# == 0){\n            LinkPage(Page: profile_view, PageParams: \"v_member_id=#recipient_id#\"){\n                Image(Src: \"#recipient_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(Class: h5 text-bold, Body: #recipient_name#)\n            }\n        }.Else{\n            Div(){\n                Image(Src: \"#recipient_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(Class: h5 text-muted, Body: #recipient_name#)\n            }\n        }\n    }.Custom(custom_icon){\n        If(#closed# == 0){\n            Em(Class: fa #icon# fa-2x text-info)\n        }.Else{\n            Em(Class: fa #icon# fa-2x text-muted)\n        }\n    }.Custom(custom_page){\n        If(#closed# == 0){\n            LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){\n                Span(Class: h5 text-bold, Body: #page_name#)\n            }\n        }.Else{\n            Div(){\n                Span(Class: h5 text-muted, Body: #page_name#)\n            }\n        }\n    }.Custom(custom_params){\n        If(#closed# == 0){\n            Span(Class: h6 m0, Body: \"#page_params#\")  \n        }.Else{\n            Span(Class: h6 m0, Body: #page_params#).Style(color:#A9A9A9;)\n        }\n    }.Custom(custom_date){\n        If(#closed# == 0){\n        }.Else{\n            P(Class: m0, Body: DateTime(DateTime: #finished_processing_time#, Format: \"DD.MM.YYYY HH:MI\")).Style(color:#A9A9A9;)\n            P(Class: m0 h6, Body: Address(#finished_processing_id#)).Style(color:#A9A9A9;)\n        }\n    }.Custom(custom_status){\n        If(#closed# == 0){\n            Span(Body: LangRes(active))\n        }.Else{\n            Span(Body: LangRes(active)).Style(color:#A9A9A9;)\n        }\n    }.Custom(actions){\n        If(#closed# == 0){\n            Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Notifications_Single_Close, Params: \"notific_id=#id#\", Page: notifications_single)\n        }\n    }.Where(#v_Where#).Order(\"closed ASC, id ASC\")\n\n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(recipient))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: notifications_single, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }  \n            }\n\n            Div(Class: list-group-item){ \n                Table(Source: src_notifications, Columns: \"$id$=custom_id,$recipient$=custom_recipient,$icon$=custom_icon,$page_name$=custom_page,$params$=custom_params,$сlosed$=custom_date,$status$=custom_status,$actions$=actions\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){  \n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_single, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n\n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_single_send)\n                }\n            }\n            \n        }           \n    }\n\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_single_send",
            "Value": "Div(Class: content-wrapper){\n\tSetTitle($single_notifics$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $single_notifics$)\n\t}\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(single_notifics))\n                Form(){\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: role_name){\n                                    Span(Body: LangRes(member))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                DBFind(Name: members, Source: source_members).Columns(member_name, id)\n                                Select(Name: member_id, Source: source_members, NameColumn: member_name, ValueColumn: id)\n                            } \n                        }\n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: emission_type){\n                                    Span(Body: LangRes(icon))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                EcosysParam(Name: notification_icon, Source: src_icon)\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: text_header){\n                                    Span(Body: LangRes(header))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                Input(Class: form-control, Value: \"Header text\", Type: text, Name: text_header)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: text_body){\n                                    Span(Body: LangRes(body_text))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                Input(Class: form-control, Value: \"Body text\", Type: text, Name: text_body)\n                            } \n                        }\n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: page_name){\n                                    Span(Body: LangRes(page_name))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                Input(Class: form-control, Value: \"notifications_testpage\", Type: text, Name: page_name)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: params_val){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                Input(Class: form-control, Value: \"notific_val_int=11,notific_val_str=string\", Type: text, Name: params_val)\n                            } \n                        }\n                    }\n\n                    Div(Class: panel-footer clearfix){\n                        Div(Class: pull-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_single)\n                            Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_single, Contract: Notifications_Single_Send)\n                        }\n                    }\n                }\n\n            }\n        }\n\n        Div(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_testpage",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($test_page$)\n\tDiv(Class: breadcrumb){\n\t\tSpan(Class: text-muted, Body: LangRes(test_page))\n\t}\n\n    If(#notific_id# > 0){\n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n        SetVar(Name: notific_id, Value: \"0\")\n        SetVar(Name: notific_type, Value: \"0\")\n        SetVar(Name: notific_header, Value: \"null\")\n        SetVar(Name: notific_val_int, Value: \"null\")\n        SetVar(Name: notific_val_str, Value: \"null\")\n    }\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n            Div(Class: panel panel-default){\n                Form(){ \n\n\t\t\t\t\tDiv(Class: list-group-item text-center){\n\t\t\t\t\t\tSpan(Class: h3 , Body: #notific_header#)\t\n\t\t\t\t\t}\n\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(id))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: #notific_id#)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(type))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n                                If(#notific_type# > 0){\n\t\t\t\t\t\t\t\t    Span(Class: h4, Body: EcosysParam(Name: notification_type, Index: #notific_type#))\n                                }.Else{\n                                    Span(Class: h4, Body: #notific_type#)\n                                }\n                            } \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(value_number))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: #notific_val_int#)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(value_string))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: #notific_val_str#)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\n\n\t\t\t\t\tIf(#notific_type# == 1){\n\t\t\t\t\t\tDiv(Class: panel-footer clearfix){\n\t\t\t\t\t\t\tDiv(Class: pull-right){\n                                Button(Body: LangRes(close), Class: btn btn-danger, Contract: Notifications_Single_Close, Params: \"notific_id=#notific_id#\", Page: notifications_single)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tIf(#notific_type# == 2){\n\t\t\t\t\t\tDiv(Class: panel-footer clearfix){\n\t\t\t\t\t\t\tDiv(Class: pull-left){\n                                Button(Body: LangRes(begin), Class: btn btn-danger, Contract: Notifications_Roles_Processing, Params: \"notific_id=#notific_id#\", Page: notifications_roles)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: pull-right){\n                                Button(Body: LangRes(close), Class: btn btn-danger, Contract: Notifications_Roles_Finishing, Params: \"notific_id=#notific_id#\", Page: notifications_roles)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n                }\n            }\n        }\n        Div(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "pcMinistryEconomyPage",
            "Value": "SetTitle(Ministry Economy)\nDiv(Class: content-wrapper){\n    If(GetVar(application_id)){\n        DBFind(Name:\"pc_license_application\",Source:src_lic).Vars(app).WhereId(#application_id#)\n        DBFind(Name: \"pcproperty\",Source:src_prop).Columns(\"id\").Vars(property)\n        Div(Class: col-md-6 panel-default data-sweet-alert){\n            Div(Class: list-group-item){\n                Span(Class: h2,Body: Ministry Economy)\n                Div(Class: panel-body pt0){\n                     DBFind(Name:pcproperty,Source: serch_prop).Custom(typ){EcosysParam(business_scope, #type#)}.Custom(Maps){Map(Value: `#coords#`, MapType: \"satellite\", Hmap: 400)}.WhereId(\"#app_business_premises#\")\n                     Table(Source: serch_prop,Columns:\"Location on the map=Maps\")\n                }\n            }\n        }\n        Div(Class: col-md-6 panel-default data-sweet-alert){\n            Div(Class: list-group-item){\n                Span(Class: h3,Body: Application id: #app_id#)\n                Div(Class: panel-body){\n                    Div(Class: well box-placeholder){\n                        Span(Class: h4 text-bold, Body: List of shareholders)\n                        DBFind(Name: \"pc_app_shareholders\", Source: sh).Columns(\"id,person_id,shareholding,name,person_status\").Where(\"application_id=#app_id# and status != 0\").Order(id)\n                        ForList(sh){\n                            P(Class: h4 pclass,Body:\"#name# - #shareholding#%\")\n                        }\n                    }\n                }\n                Span(Class: h3 ,Body: \"Company detail\")\n                Div(Class: clearfix){\n                    Div(Class: pull-left){\n                        P(Class: h4 text-bold, Body: \"Company name:\")\n                    }\n                    Div(Class: pull-right){\n                        P(Class: h4, Body: \"#app_company_name#\")\n                    }\n                }\n                Div(Class: clearfix){\n                    Div(Class: pull-left){\n                        P(Class: h4 text-bold, Body: \"Business scope:\")\n                    }\n                    Div(Class: pull-right){\n                        P(Class: h4, Body: EcosysParam(business_scope, #app_business_scope#))\n                    }\n                }\n                Div(Class: clearfix){\n                    Div(Class: pull-left){\n                        P(Class: h4 text-bold, Body: \"Bussiness premises:\")\n                    }\n                    Div(Class: pull-right){\n                        DBFind(\"pcproperty\").Columns(\"name\").Vars(pref).WhereId(\"#app_business_premises#\")\n                        P(Class: h4, Body:\"#pref_name#\")\n                    }\n                }\n                Div(Class: clearfix){\n                    Div(Class: pull-left){\n                        Button(Denial,Contract:pcDenialEco,Class: btn btn-danger,Params:\"notific_id = #notific_id#,application_id = #application_id#\",Page:demoApplicationForm)\n                    }\n                    Div(Class: pull-right){\n                        Button(Approve,Contract:pcConfirmEco,Class:btn btn-success,Params:\"notific_id = #notific_id#,application_id = #application_id#\",Page:demoApplicationForm)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "true",
            "Menu": "Applications"
        },
        {
            "Name": "pcPolicePage",
            "Value": "SetTitle(Police)\nDiv(Class: content-wrapper){\n    If(GetVar(application_id)){\n        DBFind(Name:\"pc_license_application\",Source:src_lic).Vars(app).WhereId(#application_id#)\n        DBFind(Name: \"pcproperty\",Source:src_prop).Columns(\"id,name\").Vars(property).WhereId(\"#app_business_premises#\")\n        Div(Class: col-md-6 panel-default data-sweet-alert){\n            Div(Class: list-group-item){\n                Span(Class: h2,Body: Police Departament)\n                Div(Class: panel-body pt0){\n                     DBFind(Name:pcproperty,Source: serch_prop).Custom(typ){EcosysParam(business_scope, #type#)}.Custom(Maps){Map(Value: `#coords#`, MapType: \"satellite\", Hmap: 400)}.WhereId(\"#app_business_premises#\")\n                     Table(Source: serch_prop,Columns:\"Location on the map=Maps\")\n                }\n            }\n        }\n        Div(Class: col-md-6 panel-default data-sweet-alert){\n            Div(Class: list-group-item){\n                Span(Class: h3,Body: Application id: #app_id#)\n                Div(Class: panel-body){\n                    Div(Class: well box-placeholder){\n                        Span(Class: h4 text-bold, Body: List of shareholders)\n                        DBFind(Name: \"pc_app_shareholders\", Source: sh).Columns(\"id,person_id,shareholding,name,person_status\").Where(\"application_id=#app_id# and status != 0\").Order(id)\n                        ForList(sh){\n                            P(Class: h4 pclass,Body:\"#name# - #shareholding#%\")\n                        }\n                    }\n                }\n                Span(Class: h3 ,Body: \"Company detail\")\n                Div(Class: clearfix){\n                    Div(Class: pull-left){\n                        P(Class: h4 text-bold, Body: \"Company name:\")\n                    }\n                    Div(Class: pull-right){\n                        P(Class: h4, Body: \"#app_company_name#\")\n                    }\n                }\n                Div(Class: clearfix){\n                    Div(Class: pull-left){\n                        P(Class: h4 text-bold, Body: \"Business scope:\")\n                    }\n                    Div(Class: pull-right){\n                        P(Class: h4, Body: EcosysParam(business_scope, #app_business_scope#))\n                    }\n                }\n                Div(Class: clearfix){\n                    Div(Class: pull-left){\n                        P(Class: h4 text-bold, Body: \"Bussiness premises:\")\n                    }\n                    Div(Class: pull-right){\n                        P(Class: h4, Body:\"#property_name#\")\n                    }\n                }\n                Div(Class: clearfix){\n                    Div(Class: pull-left){\n                        Button(Denial,Contract:pcDenial,Class: btn btn-danger,Params:\"notific_id=#notific_id#,application_id = #application_id#\",Page:demoApplicationForm)\n                    }\n                    Div(Class: pull-right){\n                        Button(Approve,Contract:pcConfirmPolice,Class:btn btn-success,Params:\"notific_id=#notific_id#,application_id = #application_id#\",Page:demoApplicationForm)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "true",
            "Menu": "Applications"
        },
        {
            "Name": "profile_edit",
            "Value": "SetTitle($profile_edit$)\nDiv(content-wrapper){\n    \n    If(Or(#v_id#>0,#v_id#<0)){\n        DBFind(Name: members, Source: src_member).Where(id=#v_id#).Vars(prefix)\n    }.Else{\n        DBFind(Name: members, Source: src_member).Where(id=#key_id#).Vars(prefix)\n    }\n    \n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Div(panel panel-primary){\n                Div(panel-heading, Body: LangRes(profile_edit))\n                Form(){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: username){\n                                    Span(Body: LangRes(username))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mt-sm text-left){\n                                Input(Class: form-control, Type: text, Name: Username, Value: #prefix_member_name#)\n                            }\n                        }\n                    }\n                    \n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: avatar){\n                                    Span(Body: LangRes(avatar))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                ImageInput(Name: Avatar, Width: 100, Ratio: 1/1)\n                            }\n                        }\n                    }\n                    \n                    Div(panel-footer clearfix){\n                        Div(pull-right){\n                            Input(Type: hidden, Value: 0, Name: Kid)\n                            Button(Body: LangRes(save), Class: btn btn-primary, Contract: Profile_Edit, Page: members_list).Alert(Text: $want_save$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "profile_view",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($user_info$)\n\tDiv(Class: breadcrumb){\n\t\tSpan(Class: text-muted, Body: LangRes(user_info))\n\t}\n\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\n    }.Else{\n\t\tSetVar(Name: v_member_id, Value: #key_id#)\n    }\n\tDBFind(Name: members, Source: src_member).Where(id=#v_member_id#).Vars(prefix)\n\tDBFind(Name: keys, Source: src_keys).Where(id=#v_member_id#).Vars(tokens)\t\n\t\n\tIf(Or(#prefix_id#>0,#prefix_id#<0)){\n    }.Else{\n        SetVar(Name: prefix_member_name, Value: \"\")\n    }\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n            Div(Class: panel panel-default){\n                Form(){ \n\t\t\t\t\tDiv(Class: list-group-item text-center){\n\t\t\t\t\t\tSpan(Class: h3, Body: LangRes(user_info))\t\n\t\t\t\t\t}\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-12 mt-sm text-center){\n\n\t\t\t\t\t\t\t\tIf(Or(#prefix_id#>0,#prefix_id#<0)){\n\t\t\t\t\t\t\t\t\tIf(#prefix_id# == #key_id#){\n\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: profile_edit, PageParams: \"v_member_id=#id#\"){\n                                            If(#prefix_avatar# != \"\"){\n\t\t\t\t\t\t\t\t\t\t\t    Image(Src: \"#prefix_avatar#\", Class: img-circle).Style(width: 100px;  border: 1px solid #5A5D63; margin-bottom: 15px;)\n\t\t\t\t\t\t\t\t\t\t\t}\n                                            Div(Body: Span(Class: h3 text-bold, Body: #prefix_member_name#))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}.Else{\n                                        If(#prefix_avatar# != \"\"){\n\t\t\t\t\t\t\t\t\t\t    Image(Src: \"#prefix_avatar#\", Class: img-circle).Style(width: 100px;  border: 1px solid #5A5D63; margin-bottom: 15px;)\n\t\t\t\t\t\t\t\t\t\t}\n                                        Div(Body: Span(Class: h3 text-bold, Body: #prefix_member_name#))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: profile_edit){\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h3 text-bold, Body: LangRes(editing_profile))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-12 mt-sm text-center){\n\t\t\t\t\t\t\t\tSpan(Class: h4 text-bold, Body: Address(#prefix_id#))\n\t\t\t\t\t\t\t\tDiv(Class: text-muted m0 h5, Body: LangRes(member_id))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\n                }\n            }\n\n        }\n        Div(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "referendums_add",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($new_voting$)\n\tDiv(Class: breadcrumb){\n\t\tLinkPage($referendum$, referendums_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: $new_voting$)\n\t}\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\t\t\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(new_voting))\n                Form(){\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: referendum_name){\n                                    Span(Body: LangRes(name))\n                                }\n                \t\t\t}\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                \t\t\t    Input(Name: referendum_name, Class: form-control, Type: text)\n                \t\t\t}\n                        }                   \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-lg text-right){\n                                Label(For: question){\n                                    Span(Body: LangRes(description))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                \t\t\t    Input(Name: question, Class: form-control, Type: textarea)\n                \t\t\t}\n                        }                      \n                    }\n\n                    Div(Class: panel-footer clearfix){\n                        Div(Class: pull-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: referendums_list)\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: referendums_list, Contract: referendums_add)\n                        }\n                    }\n\n                }\n            }\n\t\t}\n\t\tDiv(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "Applications"
        },
        {
            "Name": "referendums_list",
            "Value": "Div(Class: content-wrapper){\n    \n    SetTitle($referendum$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $referendum$)\n    }\n    \n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"name='#v_Search#' and delete = 0\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"delete=0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n    \n    DBFind(Name: referendums, Source: src_referendums).Custom(custom_id){\n\t\tSpan(#id#)\n    }.Custom(custom_name){\n        LinkPage(Page: referendums_view, PageParams: \"referendum_id=#id#\"){\n            Span(Class: h4 text-bold, Body: #name#)\n        }\n    }.Custom(custom_all){\n        Span(Class: h5, Body: #votes_total#)\n    }.Custom(custom_accept){\n        Span(Class: h5 text-success, Body: #votes_accept# ( #percent_accept# %))\n    }.Custom(custom_reject){\n        Span(Class: h5 text-danger, Body: #votes_reject# ( #percent_reject# %))\n    }.Custom(custom_voting){\n        SetVar(Name: participant_id, Value: 0)\n        DBFind(Name: referendums_participants, Source: src_referendums_participants).Where(\"referendum_id=#id# and member_id=#key_id#\").Vars(participant)\n        If(#participant_id# > 0){\n        }.Else{\n            Div(Class: pull-right){\n                Button(Body: Em(Class: fa fa-thumbs-down), Class: btn btn-danger, Contract: referendums_reject, Params: \"referendum_id=#id#\", Page: referendums_list)\n            }\n            Div(Class: pull-right){\n                Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success, Contract: referendums_accept, Params: \"referendum_id=#id#\", Page: referendums_list)\n            }\n        }\n    }.Custom(custom_question){\n        Span(Class: h6, Body: #question#)\n    }.Where(#v_Where#).Order(id)\n    \n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(name))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: referendums_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }\n            }\n            \n            Div(Class: list-group-item){\n                Table(src_referendums, \"$id$=custom_id,$name$=custom_name,$description$=custom_question,$votes_taken_accept$=custom_accept,$votes_taken_reject$=custom_reject,$total_votes$=custom_all,=custom_voting\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: referendums_list, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n            \n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: referendums_add)\n                }\n            }\n            \n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "Applications"
        },
        {
            "Name": "referendums_view",
            "Value": "Div(Class: content-wrapper){\n    If(#referendum_id# > 0){\n\n        DBFind(Name: referendums, Source: src_referendums).Where(\"id=#referendum_id#\").Vars(instance)\n        DBFind(Name: referendums_participants, Source: src_referendums_participants).Where(\"referendum_id=#referendum_id# and member_id=#key_id#\").Vars(participant)\n\n        SetTitle($referendum$: #instance_name#)\n        Div(Class: breadcrumb){\n            LinkPage($referendum$, referendums_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #instance_name#)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-default){\n                    Form(){ \n\n                        Div(Class: list-group-item text-center){\n                            P(Class: h2 text-bold m0, Body: #instance_name#)\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-12 mt-sm){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: LangRes(total_votes): #instance_votes_total#)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                        }\n                        Div(Class: list-group-item text-center){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-2 mt-sm)\n                                Div(Class: col-md-8 mt-sm){\n\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: #instance_question#)\n\t\t\t\t\t\t\t\t}\n                                Div(Class: col-md-2 mt-sm)\n\t\t\t\t\t\t\t}\n                        }\n                        Div(Class: list-group-item text-center){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-2 mt-sm )\n                                Div(Class: col-md-4 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-success m0, Body: LangRes(votes_taken_accept))\n                                }\n                                Div(Class: col-md-4 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(votes_taken_reject))\n                                }\n                                Div(Class: col-md-2 mt-sm)\n                            }\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-2 mt-sm )\n                                Div(Class: col-md-8 mt-sm text-center){\n                                    If(Or(#instance_percent_accept#>0,#instance_percent_reject#>0)){\n                                        Div().Style(background-color:green;height:10px;display:inline-block;width:#instance_percent_accept#%)\n                                        Div().Style(background-color:red;height:10px;display:inline-block;width:#instance_percent_reject#%)\n                                    }.Else{\n                                        Div().Style(background-color:LightGray;height:10px;display:inline-block;width:100%)\n                                    }\n                                }\n                                Div(Class: col-md-2 mt-sm)\n                            }\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-2 mt-sm )\n                                Div(Class: col-md-4 mt-sm text-left){\n                                    P(Class: h5 text-success m0, Body: #instance_percent_accept# % (#instance_votes_accept#))\n                                }\n                                Div(Class: col-md-4 mt-sm text-right){\n                                    P(Class: h5 text-danger m0, Body: #instance_percent_reject# % (#instance_votes_reject#))\n                                }\n                                Div(Class: col-md-2 mt-sm)\n                            }\n\t\t\t\t\t\t}\n                        If(#participant_id# > 0){\n                        }.Else{\n                            Div(Class: list-group-item text-center){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-1 mt-sm )\n                                    Div(Class: col-md-5 mt-sm text-center){\n                                        Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success, Contract: referendums_accept, Params: \"referendum_id=#referendum_id#\", Page: referendums_view, PageParams: \"referendum_id=#referendum_id#\")\n                                    }\n                                    Div(Class: col-md-5 mt-sm text-center){\n                                        Button(Body: Em(Class: fa fa-thumbs-down), Class: btn btn-danger, Contract: referendums_reject, Params: \"referendum_id=#referendum_id#\", Page: referendums_view, PageParams: \"referendum_id=#referendum_id#\")\n                                    }\n                                    Div(Class: col-md-1 mt-sm)\n                                }\n                            }\n                        }\n\n                    }\n                }\n\n            }\n            Div(Class: col-md-2)\n        }   \n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "Applications"
        },
        {
            "Name": "roles_assign",
            "Value": "Div(Class: content-wrapper){\n    \n    If(#v_role_id# > 0){\n        \n        SetTitle($assign$)\n        Div(Class: breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#v_role_name#, roles_view,, \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $assign$)\n        }\n        \n        Div(Class: row df f-valign){\n            Div(Class: col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                \n                Div(Class: panel panel-primary){\n                    Div(Class: panel-heading, Body: LangRes(assign))\n                    Form(){\n                        \n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: role_id){\n                                        Span(Body: LangRes(role))\n                                    }\n                                }\n                                Div(Class: col-md-9 mt-sm text-left){\n                                    DBFind(Name: roles_list, Source: source_roles).Where(\"id=#v_role_id#\").Vars(prefix)\n                                    Input(Class: form-control hidden, Type: text, Name: role_id, Value: #prefix_id#)\n                                    Span(Class: h5, Body: LangRes(#prefix_role_name#))\n                                }\n                            }\n                        }\n                        \n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: role_id){\n                                        Span(Body: LangRes(type))\n                                    }\n                                }\n                                Div(Class: col-md-9 mt-sm text-left){\n                                    Span(Class: h5, Body: EcosysParam(Name: roles_types, Index: #prefix_role_type#)\n                                    If(#prefix_role_type# != 1){\n                                        P(Class: m0 text-danger h6, Body: LangRes(appointment_impossible))\n                                    }\n                                }\n                            }\n                        }\n                        \n                        If(#prefix_role_type# == 1){\n                            Div(Class: list-group-item){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-3 mt-sm text-right){\n                                        Label(For: role_name){\n                                            Span(Body: LangRes(member))\n                                        }\n                                    }\n                                    Div(Class: col-md-9 mc-sm text-left){\n                                        DBFind(Name: members, Source: source_members).Custom(custom_username){\n                                            Span(Body: #member_name# (Address(#id#) ) )\n                                        }\n                                        Select(Name: member_id, Source: source_members, NameColumn: custom_username, ValueColumn: id)\n                                    }\n                                }\n                            }\n                        }\n                        \n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: roles_view, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\")\n                                If(#prefix_role_type# == 1){\n                                    Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_view, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\", Contract: Roles_Assign, Params: \"member_id=Val(member_id)\").Alert(Text: $want_assign_member_to_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                                }\n                            }\n                        }\n                        \n                    }\n                    \n                }\n            }\n        }\n        \n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_create",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($new_role$)\n\tDiv(Class: breadcrumb){\n\t\tLinkPage($roles$, roles_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: $new_role$)\n\t}\n\n    If(Or(#param_company_id#>0,#param_company_id#<0)){\n    }.Else{\n        SetVar(Name: param_company_id, Value: 0)\n    }\n    If(#param_role_type#>0){\n    }.Else{\n        SetVar(Name: param_role_type, Value: 1)\n    }\n\t\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(new_role))\n                Form(){   \n\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\n\t\t\t\t\t\t\t\tLabel(For: role_name){\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(name))\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\n\t\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: role_name)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\n\t\t\t\t\t\t\t\tLabel(){\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(type))\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tIf(Or(#param_company_id#>0,#param_company_id#<0)){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-9 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tInput(Class: form-control hidden, Type: text, Name: role_type, Value: #param_role_type#)\n\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: EcosysParam(Name: roles_types, Index: #param_role_type#))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tEcosysParam(Name: roles_types, Source: src_roles)\n\t\t\t\t\t\t\t\t\tSelect(Name: role_type, Source: src_roles, NameColumn: name, ValueColumn: id, Value: #param_role_type#)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n                    If(Or(#param_company_id#>0,#param_company_id#<0)){\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tLabel(){\n\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(company))\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t}\n                                }\n                                Div(Class: col-md-9 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tDBFind(Name: companies, Source: source_companies).Where(id=#param_company_id#).Vars(prefix)\n\t\t\t\t\t\t\t\t\tInput(Class: form-control hidden, Type: text, Name: company_id, Value: #param_company_id#)\n\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: #prefix_company_name#)\n                                } \n                            }\n                        }\n                    }\n\t\t\t\t\t\n\t\t\t\t\tDiv(Class: panel-footer clearfix){\n\t\t\t\t\t\tDiv(Class: pull-right){\n                            If(Or(#param_company_id#>0,#param_company_id#<0)){\n                                Button(Body: LangRes(create), Class: btn btn-primary, Page: companies_view, PageParams: \"company_id=#param_company_id#\", Contract: Roles_Create).Alert(Text: $want_create_new_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }.Else{\n                                Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_list, Contract: Roles_Create).Alert(Text: $want_create_new_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n                }\n            }\n        }\n\t\t\n        Div(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_list",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($roles$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $roles$)\n\t}\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"role_name='#v_Search#'\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"id>0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n\n    DBFind(Name: roles_list, Source: src_roles_list).Custom(custom_id){\n        If(#delete# == 0){\n            Span(Body: #id#)  \n        }.Else{\n            Span(Class: text-muted, Body: #id#)\n        }\n    }.Custom(custom_creator){\n        If(#role_type#==3){\n            Div(){\n                Span(Class: h5, Body: LangRes(system_role))\n            }\n        }.Else{\n            If(#delete# == 0){\n                LinkPage(Page: profile_view, PageParams: \"v_member_id=#creator_id#\"){\n                    If(#creator_avatar# != \"\"){\n                        Image(Src: \"#creator_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-bold, Body: #creator_name#)\n                }\n            }.Else{\n                Div(){\n                    If(#creator_avatar# != \"\"){\n                        Image(Src: \"#creator_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-muted, Body: #creator_name#)\n                }\n            }\n        }\n    }.Custom(custom_name){\n        If(#delete# == 0){\n            LinkPage(Page: roles_view, PageParams: \"v_role_id=#id#,v_role_name=#role_name#\"){\n                Span(Class: h5 text-bold, Body: LangRes(#role_name#))\n            }\n        }.Else{\n            Span(Class: h5 text-muted, Body: LangRes(#role_name#))\n        }\n\t}.Custom(custom_date){\n        If(#delete# == 0){\n            Div(Class: h6 m0, Body: DateTime(DateTime: #date_create#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: h6 m0, Body: DateTime(DateTime: #date_delete#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_create#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_delete#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n\t}.Custom(custom_type){\n        If(#delete# == 0){\n            Span(Body: EcosysParam(Name: roles_types, Index: #role_type#))\n        }.Else{\n            Span(Class: text-muted, Body: EcosysParam(Name: roles_types, Index: #role_type#))\n        }\n    }.Custom(custom_status){\n        If(#delete# == 0){\n            Span(Body: LangRes(active))\n        }.Else{\n            Span(Class: text-muted, Body: LangRes(deleted))\n        }\n    }.Custom(actions){\n        If(And(#delete#==0,#role_type#!=3)){\n            Div(Class: text-center, Body: Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Roles_Del, Params: \"role_id=#id#\", Page: roles_list))\n        }\n   }.Where(#v_Where#).Order(\"delete ASC, id ASC\")\n\n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(name))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: roles_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }  \n            }\n\n            Div(Class: list-group-item){ \n                Table(Source: src_roles_list, Columns: \"$id$=custom_id,$name$=custom_name,$type$=custom_type,$created$ / $deleted$=custom_date,$status$=custom_status,$creator$=custom_creator,$actions$=actions\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){  \n                        Button(Body: $view_all$, Class: btn btn-primary, Page: roles_list, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n\n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_create)\n                }\n            }\n            \n        }           \n    }\n\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_view",
            "Value": "Div(Class: content-wrapper){\n    \n    If(#v_role_id# > 0){\n        \n        SetTitle($role$: #v_role_name#)\n        Div(Class: breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #v_role_name#)\n        }\n        \n        DBFind(Name: roles_assign, Source: src_roles_assign).Custom(custom_id){\n            If(#delete# == 0){\n                Span(Body: #id#)\n            }.Else{\n                Span(Class: text-muted, Body: #id#)\n            }\n        }.Custom(custom_appointed){\n            If(#delete# == 0){\n                Span(Body: #appointed_by_name#)\n            }.Else{\n                Span(Class: text-muted, Body: #appointed_by_name#)\n            }\n        }.Custom(custom_role_name){\n            If(#delete# == 0){\n                Span(Body: LangRes(#role_name#) )\n            }.Else{\n                Span(Class: text-muted, Body: LangRes(#role_name#))\n            }\n        }.Custom(custom_member){\n            If(#delete# == 0){\n                LinkPage(Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n                    If(#member_avatar# != \"\"){\n                        Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-bold, Body: #member_name#)\n                }\n            }.Else{\n                Div(){\n                    If(#member_avatar# != \"\"){\n                        Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-muted, Body: #member_name#)\n                }\n            }\n        }.Custom(custom_address){\n            If(#delete# == 0){\n                Span(Body: Address(#member_id#))\n            }.Else{\n                Span(Class: text-muted, Body: Address(#member_id#))\n            }\n        }.Custom(custom_type){\n            If(#delete# == 0){\n                Span(Body: EcosysParam(Name: roles_types, Index: #role_type#))\n            }.Else{\n                Span(Class: text-muted, Body: EcosysParam(Name: roles_types, Index: #role_type#))\n            }\n        }.Custom(custom_date){\n            If(#delete# == 0){\n                Div(Class: h6 m0, Body: DateTime(DateTime: #date_start#, Format: \"DD.MM.YYYY HH:MI\"))\n                Div(Class: h6 m0, Body: DateTime(DateTime: #date_end#, Format: \"DD.MM.YYYY HH:MI\"))\n            }.Else{\n                Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_start#, Format: \"DD.MM.YYYY HH:MI\"))\n                Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_end#, Format: \"DD.MM.YYYY HH:MI\"))\n            }\n        }.Custom(custom_status){\n            If(#delete# == 0){\n                Span(Body: LangRes(active))\n            }.Else{\n                Span(Class: text-muted, Body: LangRes(deleted))\n            }\n        }.Custom(actions){\n            If(#delete# == 0){\n                Div(Class: text-center, Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Roles_Unassign, Params: \"row_id=#id#\", Page: roles_view, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\"))\n            }\n        }.Where(\"role_id='#v_role_id#'\").Order(\"delete ASC, id ASC\")\n        \n        Div(Class: panel panel-primary){\n            Form(){\n                Div(Class: list-group-item){\n                    Table(Source: src_roles_assign, Columns: \"$id$=custom_id,$member$=custom_member,$member_id$=custom_address,$role$=custom_role_name,$type$=custom_type,$appointed$ / $deleted$=custom_date,$appointed$=custom_appointed,$status$=custom_status,$actions$=actions\")\n                }\n                Div(Class: panel-footer clearfix){\n                    Div(Class: pull-right){\n                        Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_assign, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\")\n                    }\n                }\n            }\n        }\n        \n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n    \n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "struct_appform",
            "Value": "SetTitle($struct_app$: $application_form$)\nSetVar(col, col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2)\nDiv(content-wrapper){\n    Div(row){\n        Div(#col#){\n            Div(panel panel-default){\n                Div(panel-heading){\n                    DBFind(pages).Where(name='demoApplicationForm').Vars(form)\n                    $page$: demoApplicationForm [LinkPage(Page: \"edit-page\", PageParams: \"id=#form_id#\", Body: $edit_page$)]\n                    Div(h3){$application_form$}\n                }\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: members, Source: ava).Columns(\"id,avatar\").Where(\"id!=0\")\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=members,source_page=struct_appform\", Body:$view_table$)]\n                    }\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: pc_license_application, Source: app).Vars(app).Where(\"company_founder=#key_id# and status != 4\")\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=pc_license_application,source_page=struct_appform\", Body:$view_table$)]\n                    }\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: pc_app_shareholders, Source: sh).Columns(\"id,person_id,shareholding,name,person_status\").Where(\"application_id=#app_id# and status != 0\").Order(id)\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=pc_app_shareholders,source_page=struct_appform\", Body:$view_table$)]\n                    }\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: pcproperty).Columns(\"name\").Vars(pref).WhereId(\"#app_business_premises#\")\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=pcproperty,source_page=struct_appform\", Body:$view_table$)]\n                    }\n                    \n                    Div(list-group-item){\n                        Button(Body: Em(Class: fa fa-thumbs-down), Class: btn btn-danger)\n                        Div(){\nCode(\n    Button(Edit,Contract:pcApplicationFormEdit,Class:btn btn-default bl0 radius-tl-clear radius-bl-clear,Page: demoApplicationForm)\n)\n                        }\n                        $contract$: referendums_reject [LinkPage(Page: \"edit-contract\", PageParams: \"name=referendums_reject\", Body: $edit_contract$)]\n                    }\n                    Div(list-group-item){\n                        Button(New,Class:btn btn-primary)\n                        Div(){\nCode(\n    Button(New,Contract:pcNewApplication,Class:btn btn-primary,Page: demoApplicationForm)\n)\n                        }\n                        $contract$: pcNewApplication [LinkPage(Page: \"edit-contract\", PageParams: \"name=pcNewApplication\", Body: $edit_contract$)]\n                    }\n                    Div(list-group-item){\n                        Button(Send, Class:btn btn-primary btn-pill-right)\n                        Div(){\nCode(\n    Button(Send,Contract:pcApplicationFormSend,Class:btn btn-primary btn-pill-right,Params:\"id=#app_id#, Shareholding=share, Id=idshare\",Page:demoApplicationForm)\n)\n                        }\n                        $contract$: pcApplicationFormSend [LinkPage(Page: \"edit-contract\", PageParams: \"name=pcApplicationFormSend\", Body: $edit_contract$)]\n                    }\n                    Div(list-group-item){\n                        Button(Create, Class:btn btn-primary)\n                        Div(){\nCode(\n    Button(Create,Contract:pcApplicationForm,Class:btn btn-primary,Page:demoApplicationForm,PageParams:\"app_business_premises=Val(business_premises), app_company_name=Val(company_name), app_business_scope=Val(business_scope)\")\n)\n                        }\n                        $contract$: pcApplicationForm [LinkPage(Page: \"edit-contract\", PageParams: \"name=pcApplicationForm\", Body: $edit_contract$)]\n                    }\n                    Div(list-group-item){\n                        Button(Reset,Class: btn btn-default btn-xs)\n                        Div(){\nCode(\n    Button(Reset,Contract: pcCancel,Class: btn btn-default btn-xs ml-lg,Page:demoApplicationForm)\n)\n                        }\n                        $contract$: pcCancel [LinkPage(Page: \"edit-contract\", PageParams: \"name=pcCancel\", Body: $edit_contract$)]\n                    }\n                    Div(list-group-item){\n                        Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success)\n                        Div(){\nCode(\n    Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success, Contract: referendums_accept, Params: \"referendum_id=#id#\", Page: referendums_list)\n)\n                        }\n                        $contract$: referendums_accept [LinkPage(Page: \"edit-contract\", PageParams: \"name=referendums_reject\", Body: $edit_contract$)]\n                    }\n                }\n            }\n        }\n    }\n    Div(row){\n        Div(#col#){\n            Div(panel panel-default){\n                Div(panel-heading){\n                    DBFind(pages).Where(name='referendums_add').Vars(add)\n                    $page$: referendums_add [LinkPage(Page: \"edit-page\", PageParams: \"id=#add_id#\", Body: $edit_page$)]\n                    Div(h3){$new_voting$}\n                }\n                Div(panel-body){\n                    Div(list-group-item){\n                        Button(Body: LangRes(create), Class: btn btn-primary)\n                        Div(){\nCode(\n    Button(Body: LangRes(create), Class: btn btn-primary, Page: referendums_list, Contract: referendums_add)\n)\n                        }\n                        $contract$: referendums_accept [LinkPage(Page: \"edit-contract\", PageParams: \"name=referendums_add\", Body: $edit_contract$)]\n                    }\n                }\n            }\n        }\n    }\n    Div(row){\n        Div(#col#){\n            Div(panel panel-default){\n                Div(panel-heading){\n                    DBFind(pages).Where(name='referendums_view').Vars(view)\n                    $page$: referendums_view [LinkPage(Page: \"edit-page\", PageParams: \"id=#view_id#\", Body: $edit_page$)]\n                    Div(h3){$referendum$: #instance_name#}\n                }\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: referendums, Source: src_referendums).Where(\"id=#referendum_id#\").Vars(instance)\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=referendums,source_page=struct_referendums\", Body: $view_table$)]\n                    }\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: referendums_participants, Source: src_referendums_participants).Where(\"referendum_id=#referendum_id# and member_id=#key_id#\").Vars(participant)\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=referendums_participants,source_page=struct_referendums\", Body: $view_table$)]\n                    }\n                    Div(list-group-item){\n                        Button(Body: Em(Class: fa fa-thumbs-down), Class: btn btn-danger)\n                        Div(){\nCode(\n    Button(Body: Em(Class: fa fa-thumbs-down), Class: btn btn-danger, Contract: referendums_reject, Params: \"referendum_id=#id#\", Page: referendums_list)\n)\n                        }\n                        $contract$: referendums_reject [LinkPage(Page: \"edit-contract\", PageParams: \"name=referendums_reject\", Body: $edit_contract$)]\n                    }\n                    Div(list-group-item){\n                        Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success)\n                        Div(){\nCode(\n    Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success, Contract: referendums_accept, Params: \"referendum_id=#id#\", Page: referendums_list)\n)\n                        }\n                        $contract$: referendums_accept [LinkPage(Page: \"edit-contract\", PageParams: \"name=referendums_reject\", Body: $edit_contract$)]\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Structures"
        },
        {
            "Name": "struct_land_registry",
            "Value": "+SetTitle($struct_app$: $land_registry$)\nSetVar(col, col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2)\nDiv(content-wrapper){\n    Div(row){\n        Div(#col#){\n            Div(panel panel-default){\n                Div(panel-heading){\n                    DBFind(blocks).Where(name='land_registry_records').Vars(list)\n                    $block$: land_registry_records [LinkPage(Page: \"edit-block\", PageParams: \"id=#list_id#\", Body: $edit_block$)]\n                    Div(h3){$land_registry$}\n                }\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: land_registry, Source: src_land_registry).Where(#v_Where#).Order(#v_Order#)\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=land_registry,source_page=struct_land_registry\", Body:$view_table$)]\n                    }\n                }\n            }\n        }\n    }\n    Div(row){\n        Div(#col#){\n            Div(panel panel-default){\n                Div(panel-heading){\n                    DBFind(pages).Where(name='land_registry_add').Vars(add)\n                    $page$: land_registry_add [LinkPage(Page: \"edit-page\", PageParams: \"id=#add_id#\", Body: $edit_page$)]\n                    Div(h3){$department_of_land_resources$}\n                }\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: members, Source: src_owners)\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=members,source_page=struct_land_registry\", Body: $view_table$)]\n                    }\n                    Div(list-group-item){\n                        Button(Body: LangRes(add), Class: btn btn-primary btn-pill-right)\n                        Div(){\nCode(\n    Button(Body: LangRes(add), Class: btn btn-primary btn-pill-right, Contract: land_registry_Add, Page: land_registry_records)\n)\n                        }\n                        [LinkPage(Page: \"edit-contract\", PageParams: \"name=land_registry_Add\", Body: $edit_contract$)]\n                    }\n                }\n            }\n        }\n    }\n    Div(row){\n        Div(#col#){\n            Div(panel panel-default){\n                Div(panel-heading){\n                    DBFind(blocks).Where(name='land_registry_edit').Vars(edit)\n                    $block$: land_registry_edit [LinkPage(Page: \"edit-block\", PageParams: \"id=#edit_id#\", Body: $edit_block$)]\n                    Div(h3){$depart_role2$/$owner$}\n                }\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: members, Source: src_owners)\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=members,source_page=struct_land_registry\", Body: $view_table$)]\n                    }\n                    Div(list-group-item){\n                        Button(Body: LangRes(add), Class: btn btn-primary btn-pill-right)\n                        Div(){\nCode(\n    Button(Body: LangRes(add), Class: btn btn-primary btn-pill-right, Contract: land_registry_Add, Page: land_registry_records)\n)\n                        }\n                        [LinkPage(Page: \"edit-contract\", PageParams: \"name=land_registry_Add\", Body: $edit_contract$)]\n                    }\n                    \n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: land_registry, Source: src_entry).WhereId(#LandId#).Vars(entry)\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=land_registry,source_page=struct_land_registry\", Body:$view_table$)]\n                    }\n                    \n                    Div(list-group-item){\n                        Button(Body: $save$, Class: btn btn-primary btn-pill-right)\n                        Div(){\nCode(\n    If(#admin#==1){\n        Button(Body: $save$, Class: btn btn-primary btn-pill-right, Contract: land_registry_UpdateAdmin, Params: \"NotificId=#notific_id#\", Page: land_registry_records_admin)\n    }\n)\n                        }\n                        [LinkPage(Page: \"edit-contract\", PageParams: \"name=land_registry_UpdateAdmin\", Body: $edit_contract$)]\n                    }\n                    \n                    Div(list-group-item){\n                        Button(Body: $save$, Class: btn btn-primary btn-pill-right)\n                        Div(){\nCode(\n    .Else{\n        Button(Body: $save$, Class: btn btn-primary btn-pill-right, Contract: land_registry_UpdateOwner, Params: \"Price=Val(Price),NotificId=#notific_id#\", Page: land_registry_records)\n    }\n)\n                        }\n                        [LinkPage(Page: \"edit-contract\", PageParams: \"name=land_registry_UpdateOwner\", Body: $edit_contract$)]\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Structures"
        },
        {
            "Name": "struct_referendums",
            "Value": "SetTitle($struct_app$: $referendum$)\nSetVar(col, col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2)\nDiv(content-wrapper){\n    Div(row){\n        Div(#col#){\n            Div(panel panel-default){\n                Div(panel-heading){\n                    DBFind(pages).Where(name='referendums_list').Vars(list)\n                    $page$: land_registry_records [LinkPage(Page: \"edit-page\", PageParams: \"id=#list_id#\", Body: $edit_page$)]\n                    Div(h3){$referendum$}\n                }\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: referendums, Source: src_referendums).Where(#v_Where#).Order(id)\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=referendums,source_page=struct_referendums\", Body:$view_table$)]\n                    }\n                    \n                    Div(list-group-item){\n                        Button(Body: Em(Class: fa fa-thumbs-down), Class: btn btn-danger)\n                        Div(){\nCode(\n    Button(Body: Em(Class: fa fa-thumbs-down), Class: btn btn-danger, Contract: referendums_reject, Params: \"referendum_id=#id#\", Page: referendums_list)\n)\n                        }\n                        $contract$: referendums_reject [LinkPage(Page: \"edit-contract\", PageParams: \"name=referendums_reject\", Body: $edit_contract$)]\n                    }\n                    Div(list-group-item){\n                        Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success)\n                        Div(){\nCode(\n    Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success, Contract: referendums_accept, Params: \"referendum_id=#id#\", Page: referendums_list)\n)\n                        }\n                        $contract$: referendums_accept [LinkPage(Page: \"edit-contract\", PageParams: \"name=referendums_reject\", Body: $edit_contract$)]\n                    }\n                }\n            }\n        }\n    }\n    Div(row){\n        Div(#col#){\n            Div(panel panel-default){\n                Div(panel-heading){\n                    DBFind(pages).Where(name='referendums_add').Vars(add)\n                    $page$: referendums_add [LinkPage(Page: \"edit-page\", PageParams: \"id=#add_id#\", Body: $edit_page$)]\n                    Div(h3){$new_voting$}\n                }\n                Div(panel-body){\n                    Div(list-group-item){\n                        Button(Body: LangRes(create), Class: btn btn-primary)\n                        Div(){\nCode(\n    Button(Body: LangRes(create), Class: btn btn-primary, Page: referendums_list, Contract: referendums_add)\n)\n                        }\n                        $contract$: referendums_accept [LinkPage(Page: \"edit-contract\", PageParams: \"name=referendums_add\", Body: $edit_contract$)]\n                    }\n                }\n            }\n        }\n    }\n    Div(row){\n        Div(#col#){\n            Div(panel panel-default){\n                Div(panel-heading){\n                    DBFind(pages).Where(name='referendums_view').Vars(view)\n                    $page$: referendums_view [LinkPage(Page: \"edit-page\", PageParams: \"id=#view_id#\", Body: $edit_page$)]\n                    Div(h3){$referendum$: #instance_name#}\n                }\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: referendums, Source: src_referendums).Where(\"id=#referendum_id#\").Vars(instance)\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=referendums,source_page=struct_referendums\", Body: $view_table$)]\n                    }\n                    Div(list-group-item){\n                        Div(){\nCode(\n    DBFind(Name: referendums_participants, Source: src_referendums_participants).Where(\"referendum_id=#referendum_id# and member_id=#key_id#\").Vars(participant)\n)\n                        }\n                        [LinkPage(Page: struct_table_show, PageParams: \"table_name=referendums_participants,source_page=struct_referendums\", Body: $view_table$)]\n                    }\n                    Div(list-group-item){\n                        Button(Body: Em(Class: fa fa-thumbs-down), Class: btn btn-danger)\n                        Div(){\nCode(\n    Button(Body: Em(Class: fa fa-thumbs-down), Class: btn btn-danger, Contract: referendums_reject, Params: \"referendum_id=#id#\", Page: referendums_list)\n)\n                        }\n                        $contract$: referendums_reject [LinkPage(Page: \"edit-contract\", PageParams: \"name=referendums_reject\", Body: $edit_contract$)]\n                    }\n                    Div(list-group-item){\n                        Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success)\n                        Div(){\nCode(\n    Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success, Contract: referendums_accept, Params: \"referendum_id=#id#\", Page: referendums_list)\n)\n                        }\n                        $contract$: referendums_accept [LinkPage(Page: \"edit-contract\", PageParams: \"name=referendums_reject\", Body: $edit_contract$)]\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Structures"
        },
        {
            "Name": "struct_table_show",
            "Value": "DBFind(Name: #table_name#, Source: table)\nIf(GetVar(table_name)){\n    SetTitle(#table_name#)\n    Div(content-wrapper){\n        Button(Page: #source_page#){$back$}\n        Div(table-responsive){\n            Table(table)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Structures"
        },
        {
            "Name": "sysparams_candidate_validators_form",
            "Value": "SetTitle($sysparams_candidate_validators_form$)\nDiv(content-wrapper){\n    Div(row){\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group) {\n                        Label(LangRes(host_ip)*)\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\n                        InputErr(Name: HostIp, minLength: Value is too short, maxLength: Value is too long)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(commission_pub)*)\n                        Input(Name: CommissionPub, Type: text).Validate(minLength:128, maxLength:130)\n                        InputErr(Name: CommissionPub, minLength: Invalid pub-key, maxLength: Invalid pub-key)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(commission_address)*)\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\n                        InputErr(Name: CommissionAddress, minLength: Invalid address, maxLength: Invalid address)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(description_equipment))\n                        Input(Name: Description, Type: textarea)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(comment))\n                        Input(Name: Comment, Type: textarea)\n                    }\n                }\n                Div(panel-footer){\n                    Button(Contract: sysparams_CandidateValidatorRequest, Class: btn btn-primary, Page: sysparams_candidate_validators_form, Body: $send$)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "sysparams_candidates_list",
            "Value": "SetTitle($sysparams_candidates_list$)\nSetVar(this, sysparams_candidates_list)\nDBFind(Name:sysparams_candidate, Source: src_candidates).Where(\"deleted=0\").Custom(buttons){\n    Form(btn-group){\n        \n        Input(Name:Id, Type: hidden, Value: #id#)\n        Input(Name:Start, Type: hidden, Value: Now(\"YYYY-MM-DD\"))\n        Input(Name:StartTime, Type: hidden, Value: Now(\"HH:MI\", +1 minute))\n        Input(Name:End, Type: hidden, Value: Now(\"YYYY-MM-DD\", +14 days))\n        Input(Name:EndTime, Type: hidden, Value: Now(\"HH:MI\", +3 minute))\n        Button(Body: $voting_start$, Contract: sysparams_StartVotingValidator, Page: #this#, Params: \"VotingParamId=1\", Class: btn btn-primary)\n    }\n}.Custom(_date){\n    DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\n}\nDiv(content-wrapper){\n    Div(row){\n        Div(col-md-12){\n            Div(panel panel-primary){\n                Div(table-responsive){\n                    Table(Source: src_candidates, Columns: \"$host_ip$=host_ip,$commission_address$=commission_address,$description_equipment$=description,$comment$=comment,$date_created$=_date,=buttons\")\n                    \n                }\n            }\n        }\n    }\n}\n",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "sysparams_list",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($system_params$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $system_params$)\n\t}\n\n    Data(src_parameters,\"id,name\"){\n        1,\"gap_between_blocks\"\n        2,\"default_ecosystem_page\"\n        3,\"full_nodes\"\n        4,\"count_of_nodes\"\n        5,\"ecosystem_price\"\n        6,\"blockchain_url\"\n        7,\"max_block_size\"\n    }.Custom(custom_value){\n        SysParam(#name#)\n    }.Custom(actions){\n        Button(Body: $edit$, Class: btn btn-primary, Page: sysparams_voting, PageParams: \"params_id=#id#,params_name=#name#\")\n    }\n\n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Table(src_parameters, \"$id$=id,$name$=name,$value$=custom_value,$actions$=actions\")\n            }\n        }           \n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "sysparams_voting",
            "Value": "Div(Class: content-wrapper){\n\n    SetTitle($voting$)\n    Div(Class: breadcrumb){\n        LinkPage($system_params$, sysparams_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $voting$)\n    }\n\n    If(#params_id# > 0){\n        Div(Class: row df f-valign){\n            Div(Class: col-md-3)\n            Div(Class: col-md-6){\n                Div(Class: panel panel-default){\n                    Form(){ \n                        Input(Name: now_date, Class: form-control hidden, Type: text, Value: Now(\"YYYY-MM-DD\"))\n                        Input(Name: start_date, Class: form-control hidden, Type: text, Value: Now(\"YYYY-MM-DD\", 3 days))\n                        Input(Name: end_date, Class: form-control hidden, Type: text, Value: Now(\"YYYY-MM-DD\", 21 days))\n\n                        Div(Class: list-group-item text-center){\n                            P(Class: h3 text-bold m0, Body: #params_name#)\n                        }\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-lg text-right){\n                                    Label(For: voting_name){\n                                        Span(Body: LangRes(value))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: description, Class: form-control, Type: textarea, Value: SysParam(#params_name#))\n                                }\n                            }                   \n                        }\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: voting_name){\n                                        Span(Body: LangRes(new_value))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Class: form-control, Type: text, Name: new_val)\n                                }\n                            }                   \n                        }\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\n                                Button(Body: LangRes(voting), Class: btn btn-primary, Contract: sysparams_NewVoting, Params: \"v_name=#params_name#,new_val=Val(new_val)\", Page: voting_list)\n                            }\n                        }\n\n                    }\n                }\n            }\n            Div(Class: col-md-3)\n        }\n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_create",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($new_voting$)\n\tDiv(Class: breadcrumb){\n\t\tLinkPage($voting$, voting_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: $new_voting$)\n\t}\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\t\t\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(new_voting))\n                Form(){\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: voting_name){\n                                    Span(Body: LangRes(name))\n                                }\n                \t\t\t}\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                \t\t\t    Input(Name: voting_name, Class: form-control, Type: text, Value: New voting)\n                \t\t\t}\n                        }                   \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-lg text-right){\n                                Label(For: description){\n                                    Span(Body: LangRes(description))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                \t\t\t    Input(Name: description, Class: form-control, Type: textarea, Value: no)\n                \t\t\t}\n                        }                      \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: type_participants){\n                                    Span(Body: LangRes(participants))\n                                }\n                \t\t\t}\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                                EcosysParam(Name: type_voting_participants, Source: type_voting_participants)\n                \t\t\t    Select(Name: type_participants, Source: type_voting_participants, NameColumn: name, ValueColumn: id)\n                \t\t\t}\n                        }  \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: type_decision){\n                                    Span(Body: LangRes(decision))\n                                }\n                \t\t\t}\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                                EcosysParam(Name: type_voting_decisions, Source: type_voting_decisions)\n                \t\t\t    Select(Name: type_decision, Source: type_voting_decisions, NameColumn: name, ValueColumn: id)\n                \t\t\t}\n                        }                       \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: start_date){\n                                    Span(Body: LangRes(date_start))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-5 mc-sm text-left){\n                                Input(Name: start_date, Class: form-control, Type: date, Value: Now(\"YYYY-MM-DD\", 3 days))\n                            }\n                \t\t\tDiv(Class: col-md-4 mc-sm text-left){\n                                Input(Name: start_time, Class: form-control, Type: time, Value: Now(\"HH:MI\"))\n                            }\n                        }                       \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: end_date){\n                                    Span(Body: LangRes(date_end))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-5 mc-sm text-left){\n                                Input(Name: end_date, Class: form-control, Type: date, Value: Now(\"YYYY-MM-DD\", 21 days))\n                            }\n                \t\t\tDiv(Class: col-md-4 mc-sm text-left){\n                                Input(Name: end_time, Class: form-control, Type: time, Value: Now(\"HH:MI\"))\n                            }\n                        }                       \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: volume){\n                                    Span(Body: LangRes(voting_volume))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                                Input(Name: volume, Class: form-control, Type: number, Value: 75)\n                                P(Class: m0 text-muted, Body: $voting_volume_desc$)\n                            }\n                        }                       \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: quorum){\n                                    Span(Body: LangRes(voting_quorum))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                                Input(Name: quorum, Class: form-control, Type: number, Value: 50)\n                                P(Class: m0 text-muted, Body: $voting_quorum_desc$)\n                            }\n                        }                     \n                    }\n\n                    Div(Class: panel-footer clearfix){\n                        Div(Class: pull-left){\n                            Input(Name: now_date, Class: form-control hidden, Type: text, Value: Now(\"YYYY-MM-DD HH:MI\"))\n                            Input(Name: type_voting, Class: form-control hidden, Type: text, Value: 1)\n                        }\n                        Div(Class: pull-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_list)\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_list, Contract: voting_CreateNew)\n                        }\n                    }\n\n                }\n            }\n\t\t}\n\t\tDiv(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_candidates",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n\n        SetTitle($subject_voting$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-primary){\n                    Form(){  \n\t\t\t\t\t\n\t\t\t\t\t\tInput(Name: memberID, Class: form-control hidden, Type: text, Value: 0)\n\t\t\t\t\t\tInput(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n\t\t\t\t\t\n\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tLabel($candidates$)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n                                    Div(form-text text-muted, $can_apply_voting$)\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mc-sm text-right){\n                                    Button(Body: LangRes(apply), Class: btn btn-primary, Page: voting_decision_candidates, PageParams: \"vID=Val(votingID)\", Contract: voting_SubjectCandidates)\n                                } \n\t\t\t\t\t\t\t}\n                            Div(Class: row df){\n                    \t\t\tDiv(Class: col-md-3 mt-sm)\n                    \t\t\tDiv(Class: col-md-8 mt-sm text-left){\n                                    DBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Custom(custom_address){\n                                        Span(Address(#member_id#))\n\t                                }.Custom(custom_member){\n\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n\t\t\t\t\t\t\t\t\t\t\tImage(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: #member_name#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n                                    Table(src_voting_subject, \"$candidates$=custom_member,$member_id$=custom_address\")\n                                }\n                    \t\t\tDiv(Class: col-md-1 mt-sm)\n                            }\n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: roleID){\n                                        Span(Body: LangRes(role))\n                                    }\n                                }\n                                Div(Class: col-md-9 mb-sm text-left){\n                                    DBFind(Name: roles_list, Source: source_roles).Columns(role_name, id).Where(\"role_type=2 and delete=0\")\n                                    Select(Name: roleID, Source: source_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                                } \n                            }\n\n                            Div(row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: vacancies){\n                                        Span(Body: LangRes(vacancies))\n                                    }\n                                }\n                    \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                    \t\t\t    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\n                                }\n                            }                    \n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_accept){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#)\n                                    P(Class: text-muted, Body: $contract_accept_des$)\n                                }\n                            }                     \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_reject){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#)\n                                    P(Class: m0 text-muted, Body: $contract_reject_des$)\n                                }\n                            }                     \n                        }\n\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_contract",
            "Value": "Div(Class: content-wrapper){\n    \n    If(#vID# > 0){\n        \n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n        DBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Vars(subject)\n        \n        If(#subject_id#>0){\n        }.Else{\n            SetVar(Name: subject_contract_accept, Value: \"\")\n            SetVar(Name: subject_contract_reject, Value: \"\")\n        }\n        \n        SetTitle($subject_voting$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n                \n                Div(Class: panel panel-primary){\n                    Form(){\n                        \n                        Input(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n                        \n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_accept){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #subject_contract_accept#)\n                                    P(Class: text-muted, Body: $contract_accept_des$)\n                                }\n                            }\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_reject){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #subject_contract_reject#)\n                                    P(Class: m0 text-muted, Body: $contract_reject_des$)\n                                }\n                            }\n                        }\n                        \n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectContract)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n        \n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_document",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n        DBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Vars(subject)\n\t\t\n\t\tIf(#subject_id#>0){\n\t\t}.Else{\n\t\t\tSetVar(Name: subject_text_document, Value: \"\")\n\t\t}\n\n        SetTitle($subject_voting$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-primary){\n                    Form(){  \n\n                        Input(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n\n\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-12 mt-sm){\n                                    P(Class: m0 text-muted, Body: $text_document$)\n                                    Input(Name: text_document, Class: form-control, Type: textarea, Value: #subject_text_document#)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_accept){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#)\n                                    P(Class: text-muted, Body: $contract_accept_des$)\n                                }\n                            }                     \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_reject){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#)\n                                    P(Class: m0 text-muted, Body: $contract_reject_des$)\n                                }\n                            }                     \n                        }\n\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectDocument)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_election",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n\n        SetTitle($subject_voting$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-primary){\n                    Form(){  \n\n\t\t\t\t\t\tInput(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n\t\t\t\t\t\n\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tLabel($candidates$)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                                    Div(Class: input-group){\n                                        DBFind(Name: members, Source: source_members).Columns(member_name, id).Custom(custom_username){\n                                            Span(Body: #member_name# ( Address(#id#) ) ) \n                                        }\n                                        Select(Name: memberID, Source: source_members, NameColumn: custom_username, ValueColumn: id)\n                                        Div(Class: input-group-btn){\n                                            Button(Body: LangRes(add), Class: btn btn-default, Page: voting_decision_election, PageParams: \"vID=Val(votingID)\", Contract: voting_SubjectCandidates)\n                                        }\n                                    }\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t}\n                            Div(Class: row df){\n                    \t\t\tDiv(Class: col-md-3 mt-sm)\n                    \t\t\tDiv(Class: col-md-8 mt-sm text-left){\n                                    DBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Custom(custom_address){\n                                        Span(Address(#member_id#))\n\t                                }.Custom(custom_member){\n\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n\t\t\t\t\t\t\t\t\t\t\tImage(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                                            Span(Class: h5 text-bold, Body: #member_name#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n                                    Table(src_voting_subject, \"$candidates$=custom_member,$member_id$=custom_address\")\n                                }\n                    \t\t\tDiv(Class: col-md-1 mt-sm)\n                            }\n                        }\n\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: roleID){\n                                        Span(Body: LangRes(role))\n                                    }\n                                }\n                                Div(Class: col-md-9 mb-sm text-left){\n                                    DBFind(Name: roles_list, Source: source_roles).Columns(role_name, id).Where(\"role_type=2 and delete=0\")\n                                    Select(Name: roleID, Source: source_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                                } \n                            }\n\n                            Div(row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: vacancies){\n                                        Span(Body: LangRes(vacancies))\n                                    }\n                                }\n                    \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                    \t\t\t    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\n                                }\n                            }                    \n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_accept){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#)\n                                    P(Class: text-muted, Body: $contract_accept_des$)\n                                }\n                            }                     \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_reject){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#)\n                                    P(Class: m0 text-muted, Body: $contract_reject_des$)\n                                }\n                            }                     \n                        }\n\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_formal",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n\t\tDBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Vars(subject)\n\n\t\tIf(#subject_id#>0){\n\t\t}.Else{\n\t\t\tSetVar(Name: subject_formal_decision_description, Value: \"\")\n\t\t\tSetVar(Name: subject_formal_decision_table, Value: \"\")\n\t\t\tSetVar(Name: subject_formal_decision_tableid, Value: \"\")\n\t\t\tSetVar(Name: subject_formal_decision_column, Value: \"\")\n\t\t\tSetVar(Name: subject_formal_decision_colvalue, Value: \"\")\n\t\t}\n\t\t\n        SetTitle($subject_voting$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-primary){\n                    Form(){  \n\n                        Input(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n                    \n\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-lg text-right){\n\t\t\t\t\t\t\t\t\tLabel(For: description){\n\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(description))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tInput(Name: description, Class: form-control, Type: textarea, Value: #subject_formal_decision_description#)\n                                    P(Class: m0 text-muted, Body: $description_desc$)\n                                }\n\t\t\t\t\t\t\t}                      \n\t\t\t\t\t\t}\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: table_to_written){\n                                        Span(Body: LangRes(table_to_written))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: table_to_written, Class: form-control, Type: text, Value: #subject_formal_decision_table#)\n                                    P(Class: text-muted, Body: $table_to_written_desc$)\n                                }\n                            }                     \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: row_id){\n                                        Span(Body: LangRes(row_id))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: row_id, Class: form-control, Type: text, Value: #subject_formal_decision_tableid#)\n                                    P(Class: text-muted, Body: $row_id_desc$)\n                                }\n                            }  \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: column_name){\n                                        Span(Body: LangRes(column_name))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: column_name, Class: form-control, Type: text, Value: #subject_formal_decision_column#)\n                                    P(Class: m0 text-muted, Body: $column_name_desc$)\n                                }\n                            }                   \n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: written_value){\n                                        Span(Body: LangRes(written_value))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: written_value, Class: form-control, Type: text, Value: #subject_formal_decision_colvalue#)\n                                    P(Class: m0 text-muted, Body: $written_value_desc$)\n                                }\n                            }                                        \n                        }\n\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_accept){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#)\n                                    P(Class: text-muted, Body: $contract_accept_des$)\n                                }\n                            }                     \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_reject){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#)\n                                    P(Class: m0 text-muted, Body: $contract_reject_des$)\n                                }\n                            }                     \n                        }\n\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectFormal)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_invite",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n\t\t\n        SetTitle($participants$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $participants$)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\t\t\t\n                Div(Class: panel panel-primary){\n\t\t\t\t\tDiv(Class: panel-heading, Body: LangRes(participants))\n                    Form(){\n\t\t\t\t\t\n                        Input(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n\n\t\t\t\t\t\tDiv(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-12){\n                                    DBFind(Name: voting_participants, Source: src_voting_participants).Columns(id,member_id,member_name,member_avatar).Where(\"voting_id=#vID#\").Custom(custom_id){\n                                        Span(Body:  #id#)\n                                    }.Custom(custom_member){\n                                        Button(Class: btn btn-link, Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n                                            Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                                            Span(Class: h5 text-bold, Body: #member_name#)\n                                        }\n                                    }\n                                    Table(src_voting_participants, \"$id$=custom_id,$member_name$=custom_member\")\n                                }\n                            }\n\n                            If(#instance_typeparticipants# == 1){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12){\n                                    }\n                                }\n                            }\n\n                            If(#instance_typeparticipants# == 2){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12){\n                                        Span(Class: text-muted, Body: LangRes(select_member))\n                                        DBFind(Name: members, Source: source_members).Columns(member_name, id).Custom(custom_username){\n                                            Span(Body: #member_name# ( Address(#id#) ) ) \n                                        }\n                                        Select(Name: var_id, Source: source_members, NameColumn: custom_username, ValueColumn: id)\n                                    }\n                                }\n                            }\n                        \n                            If(#instance_typeparticipants# == 3){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12){\n                                        Span(Class: text-muted, Body: LangRes(select_role))\n                                        DBFind(Name: roles_list, Source: source_roles).Columns(role_name, id).Where(\"delete=0\")\n                                        Select(Name: var_id, Source: source_roles, NameColumn: role_name, ValueColumn: id)\n                                    }\n                                }\n                            }\n\n                        }\n\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                If(#instance_typeparticipants# == 2){\n                                    Button(Body: LangRes(add_member), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\n                                }\n                                If(#instance_typeparticipants# == 3){\n                                    Button(Body: LangRes(add_role), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\n                                }\n                            }\n                        }\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_list",
            "Value": "Div(Class: content-wrapper){\n    \n    SetTitle($voting$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $voting$)\n    }\n    \n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"name='#v_Search#' and delete = 0\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"delete=0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n    \n    DBFind(Name: voting_instances, Source: src_voting_instances).Custom(custom_id){\n        Span(Class: h5, Body: #id#)\n        SetVar(Name: vDateNow, Value: Now(\"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vStartDate, Value: DateTime(DateTime: #startdate#, Format: \"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vEndDate, Value: DateTime(#enddate#, \"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vCmpStartDate, Value: CmpTime(#vStartDate#,#vDateNow#))\n        SetVar(Name: vCmpEndDate, Value: CmpTime(#vEndDate#,#vDateNow#))\n    }.Custom(custom_name){\n        LinkPage(Page: voting_view, PageParams: \"vID=#id#\"){\n            Span(Class: h5 text-bold, Body: #name#)\n        }\n    }.Custom(custom_subject){\n        If(Or(#vCmpStartDate#<=0,#type_voting#==2)){\n            Span(Class: h6, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n        }.Else{\n            If(#typedecision# == 1){\n                LinkPage(Page: voting_decision_candidates, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n                }\n            }\n            If(#typedecision# == 2){\n                LinkPage(Page: voting_decision_election, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n                }\n            }\n            If(#typedecision# == 3){\n                LinkPage(Page: voting_decision_document, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n                }\n            }\n            If(#typedecision# == 4){\n                LinkPage(Page: voting_decision_formal, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n                }\n            }\n            If(#typedecision# == 5){\n                LinkPage(Page: voting_decision_contract, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n                }\n            }\n        }\n    }.Custom(custom_participants){\n        If(Or(#vCmpStartDate#<=0,#type_voting#==2)){\n            Span(Class: h6, Body: EcosysParam(Name: type_voting_participants, Index: #typeparticipants#))\n        }.Else{\n            LinkPage(Page: voting_invite, PageParams: \"vID=#id#\"){\n                Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_participants, Index: #typeparticipants#))\n            }\n        }\n    }.Custom(custom_notifics){\n        If(#flag_notifics# == 1){\n            Div(Class: text-center text-bold, Body: LangRes(yes))\n        }.Else{\n            If(And(#flag_success#!=1,#vCmpEndDate#>0,#vCmpStartDate#<0,#creator_id#==#key_id#)){\n                Div(Class: text-center, Body: Button(Body: LangRes(send), Class: btn btn-primary, Contract: voting_SendNotifics, Params: \"votingID=#id#\", Page: voting_list))\n            }.Else{\n                Div(Class: text-center text-bold, Body: LangRes(no))\n            }\n        }\n    }.Custom(custom_creator){\n        LinkPage(Page: profile_view, PageParams: \"v_member_id=#creator_id#\"){\n            Image(Src: \"#creator_avatar#\", Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n            Span(Class: h5 text-bold, Body: #creator_name#)\n        }\n    }.Custom(custom_date){\n        If(#vCmpStartDate# < 0){\n            Div(Class: text-muted, Body: DateTime(DateTime: #startdate#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: text-bold, Body: DateTime(DateTime: #startdate#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n        If(#vCmpEndDate# < 0){\n            Div(Class: text-muted, Body: DateTime(DateTime: #enddate#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: text-bold, Body: DateTime(DateTime: #enddate#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n    }.Custom(custom_type){\n        Span(Class: h6, Body: EcosysParam(Name: type_voting, Index: #type_voting#))\n    }.Custom(custom_progress){\n        Div(Class: text-center h5 text-bold, Body: #percent_success# %)\n    }.Custom(custom_decision){\n        If(#flag_decision# == 0){\n            If(And(#vCmpEndDate#<0,#creator_id#==#key_id#)){\n                Div(Class: text-center, Body: Button(Body: LangRes(decision), Class: btn btn-primary, Contract: voting_CheckDecision, Params: \"votingID=#id#\", Page: voting_list))\n            }.Else{\n                Div(Class: text-muted text-center, Body: LangRes(no))\n            }\n        }\n        If(#flag_decision# == -2){\n            Div(Class: text-muted text-center, Body: LangRes(not_enough_votes))\n        }\n        If(#flag_decision# == 1){\n            Div(Class: text-success text-center, Body: LangRes(accepted))\n        }\n        If(#flag_decision# == -1){\n            Div(Class: text-danger text-center, Body: LangRes(rejected))\n        }\n    }.Custom(custom_status){\n        If(#flag_success# == 1){\n            Div(Class: text-success text-center, Body: LangRes(success))\n        }.Else{\n            If(#vCmpEndDate# < 0){\n                Div(Class: text-muted text-center, Body: LangRes(finished))\n            }.Else{\n                If(#vCmpStartDate# < 0){\n                    Div(Class: text-center){\n                        Button(Class: btn btn-link, Page: voting_view, PageParams: \"vID=#id#\"){\n                            Span(Class: h4, Body: Em(Class: fa icon-eye))\n                        }\n                    }\n                }.Else{\n                    Div(Class: text-warning text-center, Body: LangRes(waiting))\n                }\n            }\n        }\n    }.Custom(actions){\n        Div(Class: text-center, Body: Button(Body: Em(Class: fa fa-close), Class: btn btn-danger, Contract: voting_Delete, Params: \"votingID=#id#\", Page: voting_list))\n    }.Where(#v_Where#).Order(id desc)\n    \n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(name))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: voting_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }\n            }\n            \n            Div(Class: list-group-item){\n                Table(src_voting_instances, \"$id$=custom_id,$name$=custom_name,$type$=custom_type,$subject_voting$=custom_subject,$participants$=custom_participants,$date_start$ / $date_end$=custom_date,$creator$=custom_creator,$notifications$=custom_notifics,$progress$=custom_progress,$decision$=custom_decision,$status$=custom_status,$actions$=actions\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: voting_list, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n            \n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_create)\n                }\n            }\n            \n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_template_create",
            "Value": "SetTitle($template_create$)\nIf(#TemplateId#>0){\n    DBFind(Name:voting_templates, Source: templates).Where(id=#TemplateId#).Vars(t)\n}.Else{\n    SetVar(t_id, 0)\n}\nDiv(content-wrapper){\n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Div(panel panel-primary){\n                Div(panel-heading){LangRes(new_template)}\n                Form(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: Title){LangRes(name)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#t_id#>0){\n                                    SetVar(title, #t_title#)\n                                }.Else{\n                                    SetVar(title, New voting)\n                                }\n                                Input(Name: Title, Class: form-control, Type: text, Value: #title#)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: TypeParticipants){LangRes(participants)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#t_id#>0){\n                                    SetVar(typepart, #t_type_participants#)\n                                }.Else{\n                                    SetVar(typepart, 0)\n                                }\n                                EcosysParam(Name: type_voting_participants, Source: type_voting_participants)\n                                Select(Name: TypeParticipants, Source: type_voting_participants, NameColumn: name, ValueColumn: id, Value: #typepart#)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: TypeVoting){LangRes(voting_type)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#t_id#>0){\n                                    SetVar(typevoting, #t_type_voting#)\n                                }.Else{\n                                    SetVar(typevoting, 0)\n                                }\n                                EcosysParam(Name: type_voting, Source: type_voting)\n                                Select(Name: TypeVoting, Source: type_voting, NameColumn: name, ValueColumn: id, Value: #typevoting#)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: TypeDecision){LangRes(decision)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#t_id#>0){\n                                    SetVar(typedec, #t_type_decision#)\n                                }.Else{\n                                    SetVar(typedec, 0)\n                                }\n                                EcosysParam(Name: type_voting_decisions, Source: type_voting_decisions)\n                                Select(Name: TypeDecision, Source: type_voting_decisions, NameColumn: name, ValueColumn: id, Value: typedec)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: Volume){LangRes(voting_volume)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#t_id#>0){\n                                    SetVar(volume, #t_volume#)\n                                }.Else{\n                                    SetVar(volume, 50)\n                                }\n                                Input(Name: Volume, Class: form-control, Type: number, Value: #volume#).Validate(minLength: 1)\n                                InputErr(Name: Volume, minLength: Please enter voting volume)\n                                \n                                P(Class: m0 text-muted, Body: $voting_volume_desc$)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: quorum){LangRes(voting_quorum)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#t_id#>0){\n                                    SetVar(quorum, #t_quorum#)\n                                }.Else{\n                                    SetVar(quorum, 50)\n                                }\n                                Input(Name: Quorum, Class: form-control, Type: number, Value: #quorum#).Validate(minLength: 1)\n                                InputErr(Name: Quorum, minLength: Please enter voting quorum)\n                                P(Class: m0 text-muted, Body: $voting_quorum_desc$)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: Subject){LangRes(voting_subject)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#t_id#>0){\n                                    SetVar(subj, #t_subject#)\n                                }.Else{\n                                    SetVar(subj, \"\")\n                                }\n                                Input(Name: Subject, Class: form-control, Type: text, Value: #subj#)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: Voters){LangRes(voters)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#t_id#>0){\n                                    SetVar(voters, #t_voters#)\n                                }.Else{\n                                    SetVar(voters, \"\")\n                                }\n                                Input(Name: Voters, Class: form-control, Type: text, Value: #voters#)\n                            }\n                        }\n                    }\n                    \n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: Vacancies){LangRes(vacancies)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#t_id#>0){\n                                    SetVar(vacancies, #t_vacancies#)\n                                }.Else{\n                                    SetVar(vacancies, 1)\n                                }\n                                Input(Name: Vacancies, Class: form-control, Type: number, #vacancies#)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: InitCondition){LangRes(voting_init_condition)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#t_id#>0){\n                                    SetVar(initcon, #t_init_condition#)\n                                }.Else{\n                                    SetVar(initcon, \"\")\n                                }\n                                Input(Name: InitCondition, Class: form-control, Type: text, Value: #initcon#)\n                                P(Class: m0 text-muted, Body: $voting_init_condition_desc$)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: ContractAccept){LangRes(voting_contract_accept)}\n                            }\n                            Div(col-md-8){\n                                Div(row){\n                                    If(#t_id#>0){\n                                        SetVar(conacc, #t_contract_accept#)\n                                        SetVar(accpar, #t_contract_accept_params#)\n                                    }.Else{\n                                        SetVar(conacc, \"\")\n                                        SetVar(accpar, \"\")\n                                    }\n                                    Div(col-md-6){\n                                        Input(Name: ContractAccept, Class: form-control, Type: text,Placeholder: contract, Value: #conacc#)\n                                    }\n                                    Div(col-md-6){\n                                        Input(Name: ParamsAccept, Class: form-control, Type: text,Placeholder: arguments, Value: #accpar#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: ContractReject){LangRes(voting_contract_reject)}\n                            }\n                            Div(col-md-8){\n                                Div(row){\n                                    If(#t_id#>0){\n                                        SetVar(conrej, #t_contract_reject#)\n                                        SetVar(rejpar, #t_contract_reject_params#)\n                                    }.Else{\n                                        SetVar(conrej, \"\")\n                                        SetVar(rejpar, \"\")\n                                    }\n                                    Div(col-md-6){\n                                        Input(Name: ContractReject, Class: form-control, Type: text, Placeholder: contract, Value: #conrej#)\n                                    }\n                                    Div(col-md-6){\n                                        Input(Name: ParamsReject, Class: form-control, Type: text, Placeholder: arguments, Value: #rejpar#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    Div(panel-footer clearfix){\n                        Div(pull-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_templates, Contract: voting_TemplateStore)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_template_start",
            "Value": "If(#TemplateId#>0){\n    DBFind(Name:voting_templates, Source: templates).Where(id=#TemplateId#).Vars(t)\n    SetTitle($voting$)\n    Div(content-wrapper){\n        Div(row){\n            Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(voting_start)}\n                    Div(panel-body){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: Title){LangRes(name)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    #t_title#\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: TypeParticipants){LangRes(participants)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    EcosysParam(Name: type_voting_participants, Index: #t_type_participants#)\n                                }\n                            }\n                            \n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: TypeVoting){LangRes(voting_type)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    EcosysParam(Name: type_voting, Index: #t_type_voting#)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: TypeDecision){LangRes(decision)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    EcosysParam(Name: type_voting_decisions, Index: #t_type_decision#)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: Volume){LangRes(voting_volume)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    #t_volume#\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: quorum){LangRes(voting_quorum)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    #t_quorum#\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: Subject){LangRes(voting_subject)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    #t_subject#\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: Voters){LangRes(voters)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    #t_voters#\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: Vacancies){LangRes(vacancies)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    #t_vacancies#\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: InitCondition){LangRes(init_condition)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    #t_init_condition#\n                                }\n                            }\n                            If(#t_contract_accept#!=\"\"){\n                                \n                                Div(row){\n                                    Div(col-md-4 mt-sm text-right){\n                                        Label(For: ContractAccept){LangRes(voting_contract_accept)}\n                                    }\n                                    Div(col-md-8){\n                                        #t_contract_accept#\n                                        If(#t_contract_accept_params#!=\"\"){\n                                            (#t_contract_accept_params#)\n                                        }\n                                    }\n                                }\n                            }\n                            If(#t_contract_reject#!=\"\"){\n                                Div(row){\n                                    Div(col-md-4 mt-sm text-right){\n                                        Label(For: ContractReject){LangRes(voting_contract_reject)}\n                                    }\n                                    Div(col-md-8){\n                                        #t_contract_reject#\n                                        If(#t_contract_reject_params#!=\"\"){\n                                            (#t_contract_reject_params#)\n                                        }\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: Precondition){LangRes(voting_precondition)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    #t_precondition#\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: Start){LangRes(date_start)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    Input(Name:Start, Type: date)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: End){LangRes(date_end)}\n                                }\n                                Div(col-md-8 mt-sm text-left){\n                                    Input(Name:End, Type: date)\n                                }\n                            }\n                        }\n                    }\n                    Input(Name:StartTime, Type: hidden, Value: Now(\"HH:MI\", 15 minutes))\n                    Div(panel-footer clearfix){\n                        Div(pull-left){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\n                            \n                            Button(Body: LangRes(copy), Class: btn btn-info, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\n                            \n                        }\n                        Div(pull-right){\n                            Button(Body: LangRes(voting_start), Class: btn btn-primary, Page: voting_list, Contract: voting_TemplateRun, Params: \"TemplateId=#TemplateId#\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}.Else{\n    Div(col-md-12 alert alert-warning text-center){\n        LangRes(attention)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_templates",
            "Value": "SetTitle($voting_templates$)\nDBFind(Name:voting_templates, Source: templates).Order(id desc).Custom(_participants){\n    EcosysParam(Name:type_voting_participants, #type_participants#)\n}.Custom(_decision){\n    EcosysParam(Name:type_voting_decisions, #type_decision#)\n}.Custom(_type){\n    EcosysParam(Name:type_voting, #type_voting#)\n}.Custom(_buttons){\n    Button(Class: btn btn-primary, Page: voting_template_start, PageParams: \"TemplateId=#id#\", Body: $use$)\n}\nAddToolButton(Title:$create$, Page: voting_template_create)\nDiv(content-wrapper){\n    Div(row df f-valign){\n        Div(col-xs-12){\n            Div(panel panel-primary){\n                Div(panel-body){\n                    Div(table-responsive){\n                        Table(Source: templates, Columns:\"$title$=title,$voting_subject$=subject,$voters$=voters,$volume$=volume,$quorum$=quorum,$voting_type$=_type,$participants$=_participants,$decision$=_decision,$vacancies$=vacancies,$contract_accept$=contract_accept,$contract_reject$=contract_reject,=_buttons\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_view",
            "Value": "Div(Class: content-wrapper){\n\tIf(#notific_type#==1){\n\t\tSetVar(Name: vID, Value: #notific_param#)\n\t}\n\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_one).Where(\"id=#vID#\").Vars(instance)\n        \n        SetTitle(#instance_name#)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #instance_name#)\n        }\n\n\t\tSetVar(Name: vDateNow, Value: Now(\"YYYY-MM-DD HH:MI\")) \n\t\tSetVar(Name: vStartDate, Value: DateTime(DateTime: #instance_startdate#, Format: \"YYYY-MM-DD HH:MI\"))\n\t\tSetVar(Name: vEndDate, Value: DateTime(#instance_enddate#, \"YYYY-MM-DD HH:MI\")) \n\t\tSetVar(Name: vCmpStartDate, Value: CmpTime(#vStartDate#,#vDateNow#)) \n\t\tSetVar(Name: vCmpEndDate, Value: CmpTime(#vEndDate#,#vDateNow#))\n\n\t\tDBFind(Name: voting_participants, Source: src_two).Columns(id).Where(\"voting_id=#vID# and member_id=#key_id# and decision=0\").Vars(participant)\n        If(And(#instance_flag_fulldata#==1,#participant_id#>0,#instance_flag_decision#==0,#vCmpStartDate#<0,#vCmpEndDate#>0)){\n            SetVar(Name: vOpportunityVote, Value: 1)\n        }.Else{\n            SetVar(Name: vOpportunityVote, Value: 0)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-default){\n                    Form(){ \n\n                        Div(Class: list-group-item text-center){\n                            P(Class: h3 text-bold m0, Body: #instance_name#)\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-12 mt-sm){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: EcosysParam(Name: type_voting_decisions, Index: #instance_typedecision#))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-6 mc-sm text-right){\n                                    P(Class: h5 text-muted m0, Body: LangRes(description))\n                                }\n                                Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: #instance_description#)\n                                }\n                            }\n                        }\n\t\t\t\t\t\t\n                        Div(Class: list-group-item text-center){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-6 mt-sm text-right){\n                                    P(Class: h4 text-normal m0, Body: LangRes(type))\n                                }\n                                Div(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: EcosysParam(Name: type_voting, Index: #instance_type_voting#))\n                                }\n                            }\n\t\t\t\t\t\t\tIf(Or(#instance_typedecision#==1,#instance_typedecision#==2,#instance_typedecision#==3,#instance_typedecision#==4)){\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(contract_accept))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_contract_accept# == \"\"){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-muted m0, Body: LangRes(optional))\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: #instance_optional_contract_accept#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(contract_reject))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_contract_reject# == \"\"){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-muted m0, Body: LangRes(optional))\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: #instance_optional_contract_reject#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-6 mc-sm text-right){\n                                    P(Class: h4 text-normal m0, Body: LangRes(filled))\n                                }\n                                Div(Class: col-md-6 mc-sm text-left){\n                                    If(#instance_flag_fulldata# == 1){\n                                        P(Class: h4 text-success m0, Body: LangRes(yes))\n                                    }.Else{\n                                        P(Class: h4 text-danger m0, Body: LangRes(no))\n                                    } \n                                }\n                            }\n                            If(Or(#instance_typedecision#==1,#instance_typedecision#==2)){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mt-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(role))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_role_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tDBFind(Name: roles_list, Source: src_roles_list).Where(\"id=#instance_optional_role_id#\").Vars(roles)\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #roles_role_name# (LangRes(id): #instance_optional_role_id#))\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(vacancies))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_role_vacancies# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_optional_role_vacancies#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: #instance_optional_role_vacancies#)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(candidates))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_number_cands# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_optional_number_cands#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: #instance_optional_number_cands#)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df){\n                                    Div(Class: col-md-2 mt-sm)\n                                    Div(Class: col-md-8 mt-sm text-left){\n                                        DBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Custom(custom_address){\n                                            Span(Class: h6, Body: Address(#member_id#))\n                                        }.Custom(custom_member){\n                                            Button(Class: btn btn-link, Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n                                                Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                                                Span(Class: h5 text-bold, Body: #member_name#)\n                                            }\n                                        }.Custom(custom_voting){\n\t\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\n\t\t\t\t\t\t\t\t\t\t\t\tInput(Class: form-control hidden, Type: text, Name: votingID, Value: #vID#)\n\t\t\t\t\t\t\t\t\t\t\t\tInput(Class: form-control hidden, Type: text, Name: candidateID, Value: #member_id#)\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(vote), Class: btn btn-success, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_AcceptCandidates)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                        Table(src_voting_subject, \"=custom_member,=custom_address,=custom_voting\")\n                                    }\n                                    Div(Class: col-md-2 mt-sm)\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12 mc-sm){\n                                        If(And(#vCmpStartDate#>0,#instance_type_voting#==1)){\n                                            If(#instance_typedecision#==1){\n                                                Button(Class: btn btn-link, Page: voting_decision_candidates, PageParams: \"vID=#vID#\"){\n                                                    Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n                                                }\n                                            }\n                                            If(#instance_typedecision#==2){\n                                                Button(Class: btn btn-link, Page: voting_decision_election, PageParams: \"vID=#vID#\"){\n                                                    Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            } \n\t\t\t\t\t\t\tIf(#instance_typedecision#==3){\n\t\t\t\t\t\t\t\tDBFind(Name: voting_subject, Source: src_voting_subject).Columns(id,text_doc_hash,text_document).Where(\"voting_id=#vID#\").Vars(subject)\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-1 mt-lg)\n                                    Div(Class: col-md-10 mt-lg){\n\t\t\t\t\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_text_document#)\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: Hash: #subject_text_doc_hash#)\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: Hash: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-1 mt-lg)\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12 mc-sm){\n\t\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_type_voting#==1)){\n\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_decision_document, PageParams: \"vID=#vID#\"){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-1 mt-lg)\n                                    Div(Class: col-md-10 mt-lg){\n\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\n\t\t\t\t\t\t\t\t\t\t\tInput(Class: form-control hidden, Type: text, Name: votingID, Value: #vID#)\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-left){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-right){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-1 mt-lg)\n                                }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tIf(#instance_typedecision#==4){\n\t\t\t\t\t\t\t\tDBFind(Name: voting_subject, Source: src_voting_subject).Columns(id,formal_decision_description,formal_decision_table,formal_decision_tableid,formal_decision_column,formal_decision_colvalue).Where(\"voting_id=#vID#\").Vars(subject)\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n                                    Div(Class: col-md-6 mt-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(description))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_formal_decision_description#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(table_to_written))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_formal_decision_table#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n\t\t\t\t\t\t\t\tIf(#instance_type_voting#==1){\n\t\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(row_id))\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_formal_decision_tableid#)\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tIf(#instance_type_voting#==1){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(column_name))\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(parameter_name))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_formal_decision_column#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(written_value))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_formal_decision_colvalue#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12 mc-sm){\n\t\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_type_voting#==1)){\n\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_decision_formal, PageParams: \"vID=#vID#\"){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-1 mt-lg)\n                                    Div(Class: col-md-10 mt-lg){\n\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\n\t\t\t\t\t\t\t\t\t\t\tInput(Class: form-control hidden, Type: text, Name: votingID, Value: #vID#)\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-left){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-right){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-1 mt-lg)\n                                }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tIf(#instance_typedecision#==5){\n\t\t\t\t\t\t\t\tDBFind(Name: voting_subject, Source: src_voting_subject).Columns(id,contract_accept,contract_reject).Where(\"voting_id=#vID#\").Vars(subject)\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(contract_accept))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_contract_accept#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(contract_reject))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_contract_reject#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12 mc-sm){\n\t\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_type_voting#==1)){\n\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_decision_contract, PageParams: \"vID=#vID#\"){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-1 mt-lg)\n                                    Div(Class: col-md-10 mt-lg){\n\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\n\t\t\t\t\t\t\t\t\t\t\tInput(Class: form-control hidden, Type: text, Name: votingID, Value: #vID#)\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-left){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-right){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-1 mt-lg)\n                                }\n\t\t\t\t\t\t\t}\n                        }\n\t\t\t\t\t\t\n                        Div(Class: list-group-item text-center){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-6 mt-sm text-right){\n                                    P(Class: h5 text-normal m0, Body: LangRes(status))\n                                }\n                                Div(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_success#==1){ \n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-success m0, Body: LangRes(success))\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tIf(#vCmpEndDate#<0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: LangRes(finished))\n\t\t\t\t\t\t\t\t\t\t}.Else{\t\n\t\t\t\t\t\t\t\t\t\t\tIf(#vCmpStartDate#<0){ \n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-success m0, Body: LangRes(started))\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\t\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-warning m0, Body: LangRes(waiting))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n                                }\n                            }\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(notifications))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_notifics#==1){\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(yes))\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(no))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-6 mc-sm text-right){\n                                    P(Class: h5 text-normal m0, Body: LangRes(decision))\n                                }\n                                Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_decision#==-2){\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(not_enough_votes))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_decision#==-1){ \n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(rejected))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_decision#==0){\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(no))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_decision#==1){\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-success m0, Body: LangRes(accepted))\n\t\t\t\t\t\t\t\t\t}\n                                }\n                            }\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(date_start))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#vCmpStartDate#<0){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: DateTime(DateTime: #instance_startdate#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: DateTime(DateTime: #instance_startdate#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(date_end))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#vCmpEndDate#<0){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: DateTime(DateTime: #instance_enddate#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: DateTime(DateTime: #instance_enddate#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(voting_volume))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_volume#)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(voting_quorum))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_quorum#)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(participants))\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#instance_number_participants# > 0){\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_number_participants#)\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: #instance_number_participants#)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-2 mt-sm)\n                                Div(Class: col-md-8 mt-sm text-left){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tDBFind(Name: voting_participants, Source: src_voting_participants).Columns(id,decision,member_name,member_id,member_avatar,decision_date).Where(\"voting_id=#vID#\").Custom(custom_address){\n                                            P(Class: h6 m0, Body: Address(#member_id#))\n                                        }.Custom(custom_member){\n                                            Button(Class: btn btn-link, Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n                                                Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                                                Span(Class: h5 text-bold, Body: #member_name#)\n                                            }\n                                        }.Custom(custom_decision){\n\n\t\t\t\t\t\t\t\t\t\t\tIf(Or(#instance_typedecision#==1,#instance_typedecision#==2)){ \n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\n\t\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\t\tDBFind(Name: members, Source: src_member).Where(\"id=#decision#\").Vars(list)\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success text-center h6 m0, Body: $vote_for_candidate$:)\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success text-center h6 m0, Body: #list_member_name# Address(#decision#) )\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success text-center h6 m0, Body: $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tIf(#instance_typedecision#==3){ \n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==1){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success h6 m0, Body: $document_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==-1){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-danger h6 m0, Body: $document_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tIf(#instance_typedecision#==4){\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==1){\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success h6 m0, Body: $decision_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==-1){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-danger h6 m0, Body: $decision_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tIf(#instance_typedecision#==5){ \n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==1){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success h6 m0, Body: $contract_accepted$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==-1){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-danger h6 m0, Body: $contract_rejected$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                        Table(src_voting_participants, \"=custom_member,=custom_decision\")\n\t\t\t\t\t\t\t\t\n                                }\n\t\t\t\t\t\t\t\tDiv(Class: col-md-2 mt-sm)\n                            }\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-12 mc-sm){\n\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_type_voting#==1)){\n\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_invite, PageParams: \"vID=#vID#\"){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(participants_add))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n                        Div(Class: list-group-item text-center){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-1 mt-sm )\n                                Div(Class: col-md-5 mt-sm text-center){\n\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(voted))\n                                }\n                                Div(Class: col-md-5 mt-sm text-center){\n\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(progress))\n                                }\n                                Div(Class: col-md-1 mt-sm)\n                            }\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-1 mt-sm )\n                                Div(Class: col-md-5 mt-sm text-center){\n\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: LangRes(voting_graph_voted))\n                                }\n                                Div(Class: col-md-5 mt-sm text-center){\n\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: LangRes(voting_graph_progress))\n                                }\n                                Div(Class: col-md-1 mt-sm)\n                            }\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-1 mt-sm )\n                                Div(Class: col-md-5 mt-sm text-center){\n                                    P(Class: h3 text-normal m0, Body: #instance_number_voters# / #instance_percent_voters#)\n                                }\n                                Div(Class: col-md-5 mt-sm text-center){\n                                    P(Class: h3 text-normal m0, Body: #instance_percent_success# / 100)\n                                }\n                                Div(Class: col-md-1 mt-sm)\n                            }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n                    }\n                }\n\n            }\n            Div(Class: col-md-2)\n        }   \n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        }
    ],
    "parameters": [
        {
            "Name": "buildings_use_class",
            "Value": "Shops,Financial and professional services,Restaurants and cafes,Business,Hotels,Dwellinghouses,Non-residential institutions,No",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "business_scope",
            "Value": "Agriculture,Financial services,Entertainment and mass media,Industrial manufacturing,Real estate,Retail,Transportation,Utilities,Service businesses",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "company_type",
            "Value": "group_person,company,institution,organization",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_buildings_use_class",
            "Value": "Shops,Financial and professional services,Restaurants and cafes,Business,Hotels,Dwellinghouses,Non-residential institutions,No",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_ec_status",
            "Value": "No Issues,Have Issues",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_local_body",
            "Value": "Minor Gram Panchayat,Major Gram Panchayat,Other Municipality/Notified Area,Municipal Corporation",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_nature",
            "Value": "0101 Sale Deed,0111 AGREEMENT OF SALE CUM GPA,0202 Mortgage without Possession,0206 Mortgage deed by small farmer for Agrl.loans in f/o PAC/Bank,0208 Deposit of Title Deeds,0302 Gift Settlement in f/o family member,0303 Gift Settlement in f/o others,0304 Gift Settlement for Charitable/religious purposes,0401 Partition,0402 Partition among Family Members,0505 RECEIPT(R.T.D.M),0701 Lease Deed,0801 Rectification Deed,0803 Cancellation Deed",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_use",
            "Value": "01 Residential-U,09 URBAN VacantLand(Residential)-U,21 Dry land-R,26 Wet Land double crop-R,27 Wet Land single crop-R,30 Coconut Garden-R",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_yes_no",
            "Value": "no_problem,problem",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "legal_status",
            "Value": "No Issues,Title Not Clear,Multiple Owner Claims,Khata Not Clear",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_closure",
            "Value": "single,multiple",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_icon",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_type",
            "Value": "single,role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "roles_types",
            "Value": "assigned_role,elective_role,system_role,company_role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "stylesheet",
            "Value": "body {\n\t\t  /* You can define your custom styles here or create custom CSS rules */\n\t\t}\n\n.process{\n\tdisplay: flex;\n\t-webkit-box-orient: horizontal;\n\t-webkit-box-direction: normal;\n\tflex-flow: row nowrap;\n\t-webkit-box-pack: start;\n\tjustify-content: flex-start;\n\talign-content: center;\n\t-webkit-box-align: center;\n\talign-items: center;\n\topacity: 0.7;\n\tfont-size: 22px;\n\tmargin-top: 22px;\n}\n.processfs{\n\tdisplay: flex;\n\t-webkit-box-orient: horizontal;\n\t-webkit-box-direction: normal;\n\tflex-flow: row nowrap;\n\t-webkit-box-pack: start;\n\tjustify-content: flex-start;\n\talign-content: center;\n\t-webkit-box-align: center;\n\talign-items: center;\n\topacity: 0.7;\n\tfont-size: 22px;\n}\n.faProcBell{\n\tdisplay: flex;\n\t-webkit-box-orient: horizontal;\n\t-webkit-box-direction: normal;\n\tflex-flow: row nowrap;\n\t-webkit-box-pack: center;\n\tjustify-content: center;\n\t-webkit-box-align: center;\n\talign-items: center;\n\tposition: relative;\n\tmin-width: 30px;\n\tmin-height: 30px;\n\tmax-width: 30px;\n\tmax-height: 30px;\n\tborder-radius: 50%;\n\tbackground-color: #7f7f7f;\n\tfont-size: 16px;\n\tcolor: #ffffff!important;\n\tmargin-right: 15px;\n}\n.faProcBellSuccess{\n\tdisplay: flex;\n\t-webkit-box-orient: horizontal;\n\t-webkit-box-direction: normal;\n\tflex-flow: row nowrap;\n\t-webkit-box-pack: center;\n\tjustify-content: center;\n\t-webkit-box-align: center;\n\talign-items: center;\n\tposition: relative;\n\tmin-width: 30px;\n\tmin-height: 30px;\n\tmax-width: 30px;\n\tmax-height: 30px;\n\tborder-radius: 50%;\n\tbackground-color: limegreen;\n\tfont-size: 16px;\n\tcolor: #ffffff!important;\n\tmargin-right: 15px;\n}\n.faProcBellDenied{\n\tdisplay: flex;\n\t-webkit-box-orient: horizontal;\n\t-webkit-box-direction: normal;\n\tflex-flow: row nowrap;\n\t-webkit-box-pack: center;\n\tjustify-content: center;\n\t-webkit-box-align: center;\n\talign-items: center;\n\tposition: relative;\n\tmin-width: 30px;\n\tmin-height: 30px;\n\tmax-width: 30px;\n\tmax-height: 30px;\n\tborder-radius: 50%;\n\tbackground-color: red;\n\tfont-size: 16px;\n\tcolor: #ffffff!important;\n\tmargin-right: 15px;\n}\n.faProcBellInfo{\n\tdisplay: flex;\n\t-webkit-box-orient: horizontal;\n\t-webkit-box-direction: normal;\n\tflex-flow: row nowrap;\n\t-webkit-box-pack: center;\n\tjustify-content: center;\n\t-webkit-box-align: center;\n\talign-items: center;\n\tposition: relative;\n\tmin-width: 30px;\n\tmin-height: 30px;\n\tmax-width: 30px;\n\tmax-height: 30px;\n\tborder-radius: 50%;\n\tbackground-color: deepskyblue;\n\tfont-size: 16px;\n\tcolor: #ffffff!important;\n\tmargin-right: 15px;\n}\n.faLine {\n\tdisplay:block;\n\topacity: 0.7;\n\tcontent: \"\";\n\tposition: absolute;\n\tbottom: calc(100% +2px);\n\twidth: 2px;\n\theight: 40px;\n\tbackground-color: #7f7f7f;\n\tmargin-left: 14px;\n}\n.faLineSucces {\n\tdisplay: block;\n\topacity: 0.7;\n\tcontent: \"\";\n\tposition: absolute;\n\tbottom: calc(100% +2px);\n\twidth: 2px;\n\theight: 40px;\n\tbackground-color: limegreen;\n\tmargin-left: 14px;\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tax_receipt_and_bills",
            "Value": "No Issues,Have Issues",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "type_voting",
            "Value": "type_voting_custom,type_voting_system",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "type_voting_decisions",
            "Value": "voting_decisions_candidate_requests,voting_decisions_candidate_manual,voting_decisions_document,voting_decisions_db,voting_decisions_contract",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "type_voting_participants",
            "Value": "voting_participants_everybody,voting_participants_manual,voting_participants_role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "tables": [
        {
            "Name": "companies",
            "Columns": "[{\"name\":\"template_account\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"date_end\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"date_start\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"company_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"company_type\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "companies_participants",
            "Columns": "[{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"role_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"company_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"date_start\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"member_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"member_avatar\",\"type\":\"bytea\",\"conditions\":\"true\"},{\"name\":\"date_end\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"role_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"right_sign\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "demo_page_table",
            "Columns": "[{\n    \"name\": \"member_name\",\n    \"type\": \"text\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"member_id\",\n    \"type\": \"number\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"some_text\",\n    \"type\": \"text\",\n    \"conditions\": \"true\"\n}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "land_registry",
            "Columns": "[{\n    \"name\": \"delete\",\n    \"type\": \"number\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"legal_status\",\n    \"type\": \"number\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"area\",\n    \"type\": \"text\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"land_use\",\n    \"type\": \"number\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"owner_id\",\n    \"type\": \"number\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"map_coords\",\n    \"type\": \"text\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"land_nature\",\n    \"type\": \"number\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"land_local_body\",\n    \"type\": \"number\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"modification_date\",\n    \"type\": \"datetime\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"price_market_value\",\n    \"type\": \"money\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"tax_receipt_and_bills\",\n    \"type\": \"number\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"encumbrance_certificate\",\n    \"type\": \"number\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"address\",\n    \"type\": \"text\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"date_create\",\n    \"type\": \"datetime\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"price_gov_value\",\n    \"type\": \"money\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"buildings_use_class\",\n    \"type\": \"number\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"price\",\n    \"type\": \"money\",\n    \"conditions\": \"true\"\n}, {\n    \"name\": \"registration_date\",\n    \"type\": \"datetime\",\n    \"conditions\": \"true\"\n}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "land_registry_editing",
            "Columns": "[{\"name\":\"person_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"lend_object_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"new_attr_value\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"old_attr_value\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"editing_attribute\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"person_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "land_registry_ownership",
            "Columns": "[{\"name\":\"dep3_approved\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"owner_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"date_creat\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"date_signing\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"owner_new_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"dep2_approved\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"step\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"price\",\"type\":\"money\",\"conditions\":\"true\"},{\"name\":\"owner_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"lend_object_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "pc_app_shareholders",
            "Columns": "[{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"person_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"shareholding\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"person_status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"application_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "pc_companies",
            "Columns": "[{\"name\":\"company_founder\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"date_start\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"business_scope\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"company_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"application_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"business_premises\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"memorandum_association\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"company_name\",\"type\":\"varchar\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "pc_license_application",
            "Columns": "[{\"name\":\"sewerage\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"date_start\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"emigration\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"company_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"name_reservation\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"lease_contract_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"date_end\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"lease_ownership\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"ministry_economy\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"business_premises\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"date_initial_approval\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"days_initial_approval\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"memorandum_association\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"company_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"waste_solutions\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"property_suitability\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"company_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"business_scope\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"company_founder\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"police_inspection\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "pc_shareholders",
            "Columns": "[{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"company\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"person_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"person_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"company_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"shareholding\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "pcproperty",
            "Columns": "[{\"name\":\"coords\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"police_inspection\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"business_suitability\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"del\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"name\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"type\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "referendums",
            "Columns": "[{\"name\":\"question\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"votes_total\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"votes_accept\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"votes_reject\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"percent_accept\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"percent_reject\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"name\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "referendums_participants",
            "Columns": "[{\"name\":\"decision\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"referendum_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "sysparams_candidate",
            "Columns": "[{\"name\":\"host_ip\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"description\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"date_created\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"commission_pub\",\"type\":\"bytea\",\"conditions\":\"true\"},{\"name\":\"candidate_key_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"commission_address\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"comment\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "voting_instances",
            "Columns": "[{\"name\":\"startdate\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"creator_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"percent_voters\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_UpdateDataForGraphs\\\")\"},{\"name\":\"typeparticipants\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"contract_accept_params\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\", \\\"voting_SubjectDocument\\\", \\\"voting_SubjectFormal\\\")\"},{\"name\":\"flag_fulldata\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SubjectCheckFulldata\\\")\"},{\"name\":\"percent_success\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_UpdateDataForGraphs\\\")\"},{\"name\":\"optional_role_vacancies\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\")\"},{\"name\":\"optional_contract_reject\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\", \\\"voting_SubjectDocument\\\", \\\"voting_SubjectFormal\\\")\"},{\"name\":\"enddate\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"number_voters\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_UpdateDataForGraphs\\\")\"},{\"name\":\"optional_role_id\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\")\"},{\"name\":\"number_participants\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_Invite\\\")\"},{\"name\":\"optional_contract_accept\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\", \\\"voting_SubjectDocument\\\", \\\"voting_SubjectFormal\\\")\"},{\"name\":\"type_voting\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"volume\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"creator_avatar\",\"type\":\"bytea\",\"conditions\":\"false\"},{\"name\":\"optional_number_cands\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SubjectCandidates\\\")\"},{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"description\",\"type\":\"text\",\"conditions\":\"false\"},{\"name\":\"flag_decision\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_CheckDecision\\\")\"},{\"name\":\"flag_notifics\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SendNotifics\\\")\"},{\"name\":\"contract_reject_params\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\", \\\"voting_SubjectDocument\\\", \\\"voting_SubjectFormal\\\")\"},{\"name\":\"quorum\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"creator_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"flag_success\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_UpdateDataForGraphs\\\")\"},{\"name\":\"typedecision\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_Delete\\\")\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "voting_participants",
            "Columns": "[{\"name\":\"decision_date\",\"type\":\"datetime\",\"conditions\":\"ContractAccess(\\\"voting_AcceptCandidates\\\",\\\"voting_AcceptDecision\\\",\\\"voting_RejectDecision\\\")\"},{\"name\":\"member_avatar\",\"type\":\"bytea\",\"conditions\":\"true\"},{\"name\":\"decision\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"member_name\",\"type\":\"varchar\",\"conditions\":\"false\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "voting_subject",
            "Columns": "[{\"name\":\"contract_accept\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectContract\\\")\"},{\"name\":\"formal_decision_description\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"voting_SubjectFormal\\\")\"},{\"name\":\"number_accept\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_AcceptCandidates\\\",\\\"voting_AcceptDecision\\\")\"},{\"name\":\"text_doc_hash\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"voting_SubjectDocument\\\")\"},{\"name\":\"formal_decision_table\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectFormal\\\")\"},{\"name\":\"member_avatar\",\"type\":\"bytea\",\"conditions\":\"true\"},{\"name\":\"member_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"text_document\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"voting_SubjectDocument\\\")\"},{\"name\":\"formal_decision_column\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectFormal\\\")\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"contract_reject\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectContract\\\")\"},{\"name\":\"formal_decision_tableid\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SubjectFormal\\\")\"},{\"name\":\"formal_decision_colvalue\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectFormal\\\")\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"false\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "voting_templates",
            "Columns": "[{\"name\":\"voters\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"subject\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"type_voting\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"precondition\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"type_decision\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"init_condition\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"contract_accept\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"title\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"type_participants\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"volume\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"vacancies\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"quorum\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"contract_reject\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"contract_reject_params\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"contract_accept_params\",\"type\":\"varchar\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}