contract ajman_UserRegistration {
    data {
        Username string
        FirstNameAr string
        LastNameAr string
        FirstNameEn string
        LastNameEn string
        Nationality string
        EmirateNumber string
        EmirateIdExpieryDate string "date"
        EmirateIdImage bytes "file"
        PassportId string
        PassportExpieryDate string "date"
        PassportIdImage bytes "file"
        DateOfBirth string "date"
        ProfileImage bytes "file"
        Gender string
        Email string
        Mobile string
        Phone string "optional"
        Fax string "optional"
        PostOffice string "optional"
        Address string "optional"
        Communication string
        Language string
    }
    func validateStr(s, type string){
        if !s {
            warning Sprintf("Please specify %v", type)
        }
    }
    func validateEmail(s string){
        if Contains(s, " ") || !Contains(s, "@") {
            warning "Incorrect email"
        }
    }
    func validateInt(s int, type string){
        if s == 0 {
            warning Sprintf("Please specify %v", type)
        }
    }
    func validateUsername(n string){
        var mid map
        mid = DBFind("members").Where("member_name=?", n).One("id")
        if mid{
            if mid != $key_id{
                warning "This user name is already taken. Please specify a different name"
            }
        }
    }

    conditions {
        $ApplicationId = Int(DBFind("applications").Where("name='Ajman property'").One("id"))
        if $ApplicationId == 0 {
            warning "Application ID not found"
        }
        validateUsername($Username)
        validateEmail($Email)
        validateInt(Int($Nationality), "Nationality")
        validateInt(Int($Gender), "Gender")
        validateInt(Int($Communication), "Communication")
        validateInt(Int($Language), "Language")
        validateStr($FirstNameAr, "First Name Arabic")
        validateStr($LastNameAr, "Last Name Arabic")
        validateStr($FirstNameEn, "First Name English")
        validateStr($LastNameEn, "Last Name English")
        validateStr($Nationality, "Nationality")
        validateStr($EmirateNumber, "Emirate Number")
        validateStr($PassportId, "Passport Id")
        validateStr($Mobile, "Mobile")

        $member = DBFind("members").Where("id=?", $key_id).Row()
        $managerRoleId = AppParam($ApplicationId, "manager_role_id")
    }
    action {
        var inform map
        if $member {
            $Username = $member["member_name"]
            if $member["member_info"]{
                inform = JSONDecode($member["member_info"])
            }
        }
        var emirateIdImage passportIdImage profileImage int
        emirateIdImage = UploadBinary("Name,Data,ApplicationId,DataMimeType", "EmirateIdImage", $EmirateIdImage, $ApplicationId, $EmirateIdImageMimeType)
        passportIdImage = UploadBinary("Name,Data,ApplicationId,DataMimeType", "PassportIdImage", $PassportIdImage, $ApplicationId, $PassportIdImageMimeType)
        profileImage = UploadBinary("Name,Data,ApplicationId,DataMimeType", "ProfileImage", $ProfileImage, $ApplicationId, $ProfileImageMimeType)

        inform["username"] = $Username
        inform["first_name_ar"] = $FirstNameAr
        inform["last_name_ar"] = $LastNameAr
        inform["first_name_en"] = $FirstNameEn
        inform["last_name_en"] = $LastNameEn
        inform["nationality"] = $Nationality
        inform["emirate_number"] = $EmirateNumber
        inform["emirate_id_expiery_date"] = $EmirateIdExpieryDate
        inform["emirate_id_image"] = emirateIdImage
        inform["passport_id"] = $PassportId
        inform["passport_expiery_date"] = $PassportExpieryDate
        inform["passport_id_image"] = passportIdImage
        inform["date_of_birth"] = $DateOfBirth
        inform["profile_image"] = profileImage
        inform["gender"] = $Gender
        inform["email"] = $Email
        inform["mobile"] = $Mobile
        inform["phone"] = $Phone
        inform["fax"] = $Fax
        inform["post_office"] = $PostOffice
        inform["address"] = $Address
        inform["communication"] = $Communication
        inform["language"] = $Language
        inform["status"] = 0 // 0:registrated, 1:rejected, 2:approved

        var icon header body page string
        if $member {
            DBUpdate("members", $key_id, "member_info", inform)
            header = "Ajman URP: Update user"
        }else{
            DBInsert("members", "id,member_name,member_info", $key_id, $Username, inform)
            header = "Ajman URP: New user"
        }

        // managers notification
        var roleId closureType sender int
        roleId = $managerRoleId
        closureType = 2 // multiple
        sender = 2 // from admin
        icon = "icon-envelope"
        body = $Username
        page = "ajman_user_registration"
        var params map
        params["member_id"] = $key_id
        Notifications_Roles_Send_map("rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map", roleId, closureType, sender, icon, header, body, page, params)
    }
}