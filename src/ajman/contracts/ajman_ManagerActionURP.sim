contract ajman_ManagerActionURP {
    data {
        Action string
        MemberId int
        NotificId string "optional"

    }
    conditions {
        $ApplicationId = Int(DBFind("applications").Where("name='Ajman property'").One("id"))
        if $ApplicationId == 0 {
            warning "Application ID not found"
        }
        $managerRoleId = Int(AppParam($ApplicationId, "manager_role_id"))
        if $role_id != $managerRoleId{
            // info "You are not manager"
        }
        $member = DBFind("members").Where("id=?", $MemberId).Row()
        if !$member{
            error "Member not found"
        }
        $NotificId = Int($NotificId)
    }

    action {
        var header string
        var inform map
        inform = JSONDecode($member["member_info"])
        if $Action == "approve"{
            // 0:registrated, 1:rejected, 2:approved
            inform["status"] = 2
            header = "approved"
        }
        if $Action == "reject"{
            // 0:registrated, 1:rejected, 2:approved
            inform["status"] = 1
            header = "rejected"
        }
        DBUpdate("members", $MemberId, "member_info", inform)

        if $NotificId > 0{
            Println("Try closing notific id:", $NotificId)
            Notifications_Roles_Processing("notific_id", $NotificId)
            Notifications_Roles_Close("notific_id", $NotificId)
        }
        // user notification
        var sender int
        sender = 2 // 2:from admin
        var icon body page string
        header = Sprintf("Ajman URP: Registration %v", header)
        icon = "icon-envelope"
        body = Sprintf("Manager %v your registration", header)
        page = "ajman_user_registration"
        var params map
        params["member_id"] = $MemberId
        Notifications_Single_Send_map("member_id,sender,icon_name,text_header,text_body,page_name,params_map", $MemberId, sender, icon, header, body, page, params)
    }
}