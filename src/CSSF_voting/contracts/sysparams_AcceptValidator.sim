contract sysparams_AcceptValidator{
    data{
        VotingTemplateId string
        KeyId string
        VotingId string
    }
    func conditions{
        var app_id int
        app_id = Int(DBFind("applications").Columns("name,id").Where("name='Basic application'").One("id"))
        var templateId int
        templateId = Int(AppParam(app_id,"voting_validators_template_id"))
        
        var params map
        params = DBFind("voting_templates").Where("id=?", templateId).Row()
        if params{
            warning "Voting params not found"
        }

        $Id = Int($KeyId)
        var candidateId, oldRoleId, roleId int
        oldRoleId = 2 // Candidate for validators
        roleId = 3 // Validator
        
        candidateId = DBFind("sysparams_candidate").Where("id=?",$Id).One("candidate_key_id")
        if !candidateId {
            warning "Candidate key id not found"
        }
        $rowId = Int(DBFind("roles_participants").Where("deleted=0 and role->id=? and member->member_id=?", oldRoleId, candidateId).One("id"))
        
        $roleId = Int(DBFind("roles").Where("role->id=? and deleted=0", roleId).One("id"))
        if $roleId == 0 {
            warning "Validator role not found"
        }
    }
    
    func action{
        if $rowId > 0 {
            Roles_Unassign("row_id", $rowId)
        }
        Roles_Assign("rid,member_id", $roleId, $Id)
    }
}