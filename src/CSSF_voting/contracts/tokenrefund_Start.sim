contract tokenrefund_Start{
    data{
        VictimAccount string
        SuspectAccount string
        Amount int
        Note string
    }
    func blockAccounts(victimId, attackerId int){
        if victimId==0 {
            error "unblockAccounts. invalid victim key"
        }
        if attackerId==0{
            error "unblockAccounts. invalid attacker key"
        }
        DBUpdate("keys", victimId, "blocked", 1)
        DBUpdate("keys", attackerId, "blocked", 1)
    }
    func getKeyId(test string) int{
        if Len(Split(test, "-")) > 1 {
            // probably it is address
            return AddressToId(test)
        }
        if "invalid" != IdToAddress(Int(test)){
            // probably it is key_id
            return Int(test)
        }
        return 0
    }

    conditions{
        if $Amount <= 0{
            error "Amount not valid"
        }
        if Size($Note) == 0{
            error "Please add description"
        }
        var victim attacker int
        victim = getKeyId($VictimAccount)
        attacker = getKeyId($SuspectAccount)
        if victim == 0{
            error "Victim address not valid"
        }
        if attacker == 0{
            error "Suspect address not valid"
        }
        $victimId = victim
        $attackerId = attacker

        var app_id int
        app_id = Int(DBFind("applications").Columns("name,id").Where("name='Basic application'").One("id"))
        var template_id int
        template_id = Int(AppParam(app_id,"voting_tokenrefund_template_id"))
        if template_id <= 0 {
            warning "Template id not found"
        }

        $template = DBFind("voting_templates").Where("id=?", template_id).Row()
        $votersRoleId = Int($template["voters"])
        $votingName = $template["title"]
        $typeParticipants = 3 // add participants by role
        $typeDecision = 5 // the launch of the contract
        $typeVoting = 2 // the voting system
        $volume = Int($template["volume"])
        $quorum = Int($template["quorum"])
        $contractAccept = $template["contract_accept"]
        $contractReject = $template["contract_reject"]
        var initContract string
        initContract = $template["init_contract"]
        if Size(initContract) > 4 { // greater then "NULL"
            var m map
            CallContract(initContract, m)
        }
        $desc = Sprintf("%v (victim: %v, attacker: %v, amount: %v)", $votingName, $victimId, $attackerId, $Amount)

        if !DBFind("roles_participants").Where("role->id=? and deleted=0", $votersRoleId).One("id") {
            warning Sprintf("Role (id: %v) does not contain members", $votersRoleId)
        }

        if DBFind("votings").Where("voting->name=? and voting->description=? and deleted=0", $votingName, $desc).Row(){
            // info "Voting already created" // debug: uncomment on the prod
        }
    }

    action{
        blockAccounts($victimId,$attackerId)

        var votingId status result tokenrefundId closure sender int
        var icon header body page jsonParams interval_days string
        interval_days = "4"
        votingId = voting_CreateNew("voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, interval_days)

        status = 1 // 0.Accounts blocked 1.Discussion 2.Vote 3.Closed
        result = 0 // 0. discussion and voting 1. cancelled return 2. the tokens returned
        tokenrefundId = DBInsert("tokenrefund", "victim_key_id,attacker_key_id,amount,note,validator_key_id,blocked_at,voting_id,status,result", $victimId, $attackerId, $Amount, $Note, $key_id, "Now()", votingId,status,result)

        jsonParams = Sprintf(`{"Id":"%v"}`, tokenrefundId)

        voting_SubjectContract("votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params", votingId, $contractReject, $contractAccept, jsonParams, jsonParams)

        voting_Invite("votingID,var_id", votingId, $votersRoleId)

        closure = 2
        sender = 1 // from member
        icon = "icon-bubbles"
        header = "Voting for tokens refund"
        body = $desc
        page = "voting_view"
        var params map
        params["voting_id"] = votingId
        notifications_Roles_Send("rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map", $votersRoleId, closure, sender, icon, header, body, page, params)
    }
}