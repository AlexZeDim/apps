contract sysparams_StartNodeAdd{
    data{
        TcpAddress string
        ApiAddress string
        KeyId int
        PubKey string
        TemplateId int
        Duration int
    }
    func warn(name, detail string){
        warning Sprintf("%v invalid (%v)", name, detail)
    }
    func checkApiAddress(addr string){
        var name string
        name = "API Address"
        if Size(addr) == 0 {
            warn(name, "size")
        }
        if !(HasPrefix(addr, "http://") || HasPrefix(addr, "https://")) {
            warn(name, "protocol")
        }
        if Contains(addr, " ") {
            warn(name, "space")
        }
        addr = Replace(addr, "http://", "")
        addr = Replace(addr, "https://", "")
        var parts array
        if Contains(addr, ":") {
            parts = Split(addr, ":")
            if Len(parts) > 2 {
                warn(name, ":")
            }
            var port string
            port = parts[1]
            if port <= 0 {
                warn(name, "port")
            }
            addr = parts[0]
        }
    }
    func checkTcpAddress(addr string){
        var name string
        name = "TCP Address"
        if Size(addr) == 0 {
            warn(name, "size")
        }
        if Contains(addr, " ") {
            warn(name, "space")
        }
        var parts array
        if Contains(addr, ":") {
            parts = Split(addr, ":")
            if Len(parts) > 2 {
                warn(name, ":")
            }
            var port string
            port = parts[1]
            if port <= 0 {
                warn(name, "port")
            }
            addr = parts[0]
        }
        parts = Split(addr, ".")
        if Len(parts) != 4 {
            warn(name, "too many parts")
        }
        var i int
        while i < 4 {
            var n int
            n = Int(parts[i])
            if n < 0 || n > 255 {
                warn(name, "part")
            }
            i=i+1
        }
    }
    func checkPub(pub string){
        if PubToID(pub) == 0 {
            warning "Public key invalid"
        }
    }
    func checkKeyId(keyid int){
        var existed map
        existed = DBFind("keys").Where("id=?", keyid).Row()
        if !existed {
            warning "Key id not found"
        }
    }
    func getNodesJSON() string{
        // kostyl
        // return json-like string from full_nodes trimmed "[" and "]"
        var nodes string
        nodes = SysParamString("full_nodes")
        if Size(nodes) < 80 {
            nodes = "[]"
        }
        return nodes
    }
    conditions{
        var app_id int
        app_id = Int(DBFind("applications").Columns("name,id").Where("name='Basic application'").One("id"))
        var id int
        id = Int(AppParam(app_id,"voting_sysparams_template_id"))
        if $TemplateId != id || $TemplateId <= 0 {
            warning "Template id not found"
        }
        checkKeyId($KeyId)
        checkPub($PubKey)
        checkApiAddress($ApiAddress)
        checkTcpAddress($TcpAddress)
    }

    action{
        var nodes array
        var node map
        nodes = JSONDecode(getNodesJSON())
        node["tcp_address"] = $TcpAddress
        node["api_address"] = $ApiAddress
        node["key_id"] = Str($KeyId)
        node["public_key"] = $PubKey
        nodes[Len(nodes)] = node
        voting_TemplateRun("TemplateId,Duration,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument", $TemplateId, $Duration, 0, "", "", "full_nodes", JSONEncode(nodes), "")
    }
}