contract Roles_Unassign {
    data {
        row_id int
    }
    
    conditions {
        // check record
        var assigned, role map
        assigned = DBFind("roles_participants").Columns("id,role->id").Where("id=$", $row_id).Row()
        if !assigned {
            warning "Participant not found"
        }
        
        role = DBFind("roles").Columns("id,creator->member_id").Where("id=?", assigned["role.id"]).Row()
        if !role {
            warning "Role not found in the roles registry"
        }
        
        var specialRules map
        specialRules["sysparams_AcceptValidator"] = "Validator"
        specialRules["sysparams_DelegateRefresh"] = "Delegate"
        specialRules["sysparams_CandidateValidatorRequest"] = "Candidate for validators"
        specialRules["sysparams_InvestorRefresh"] = "Investor with voting rights"
        specialRules["sysparams_ValidatorResign"] = "Validator"
        
        if !(specialRules[$original_contract] == role["role_name"]) {
            // check creator of the role
            if role["creator.member_id"] != $key_id {
                warning "Sorry, you are not the creator of this role"
            }
        }
    }
    
    action {
        // delete the member
        DBUpdate("roles_participants", $row_id, "deleted,timestamp date_deleted", 1, $block_time)
    }
}