contract voting_SendNotifics {
    data {
        votingID int
    }
    func safeJsonToMap(m string) map {
        var res map
        if Size(m) > 0 { res = JSONToMap(m) }
        return res
    }
    conditions {
        $voting_map = DBFind("votings").Columns("id,date_ended").Where("id=$ and date_ended > now()", $votingID).One("id")
        if !$voting_map {
            warning "Voting has expired. Notifications can not be sent"
        }
        
        $voting_map = DBFind("votings").Columns("voting->name,creator->member_id,flags->notifics,flags,date_started").Where("id=$ and date_started < now()", $votingID).Row()
        if !$voting_map {
            warning "Voting has not yet begun. Try again later, please"
        }
        if $voting_map["creator.member_id"] != $key_id {
            warning "You are not the creator of the voting"
        }
        if $voting_map["flags.notifics"] == 1 {
            warning "Notifications have already been sent"
        }
        
        $voting_name = $voting_map["voting.name"]
    }
    
    action {
        var participants array
        participants = DBFind("votings_participants").Where("voting_id=$ and decision=$", $votingID, 0)
        var i int
        while i < Len(participants) {
            var participant, member, params map
            participant = participants[i]
            member = safeJsonToMap(participant["member"])
            params["voting_id"] = $votingID
            Notifications_Single_Send_map("member_id,sender,icon_name,text_header,text_body,page_name,params_map", Int(member["member_id"]), 1, "fa-check", "Voting", $voting_name, "voting_view", params)
            
            i = i + 1
        }
        
        var flags map
        flags = safeJsonToMap($voting_map["flags"])
        flags["notifics"] = 1
        DBUpdate("votings", $votingID, "flags", flags)
    }
}