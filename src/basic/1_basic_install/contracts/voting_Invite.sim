contract voting_Invite {
    data {
        votingID int
        var_id int //0, member_id, role_id
    }
    func safeJsonToMap(m string) map {
        var res map
        if Size(m) > 0 { res = JSONToMap(m) }
        return res
    }
    func addVotingMember(fullMember map, votingId int) {
        var member map
        member["member_id"] = fullMember["id"]
        member["member_name"] = fullMember["member_name"]
        member["image_id"] = fullMember["image_id"]
        DBInsert("votings_participants", "voting_id,member", votingId, member)
    }
    conditions {
        $voting_map = DBFind("votings").Columns("progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended").Where("id=$ and date_ended > now()", $votingID).Row()
        if !$voting_map {
            warning "Voting has expired. Can not add new participants"
        }
        
        $type_participants = $voting_map["voting.type_participants"]
        $type_voting = $voting_map["voting.type"]
        $number_participants = Int($voting_map["progress.number_participants"])
        
        if $number_participants > 1 && $type_voting == 2 {
            warning "This vote is a system. Add new participants are not possible"
        }
        var isAdded string
        if $type_participants == 2 { 
            isAdded = DBFind("votings_participants").Where("voting_id=$ and member->member_id=$", $votingID, $var_id).One("id")
            if isAdded {
                warning "Member has already been added before"
            }
        }
        
        if $type_participants == 3 { 
            isAdded = DBFind("votings_participants").Where("voting_id=$", $votingID).One("id")
            if isAdded {
                warning "Voting participants have already been added before"
            }
        }
    }
    
    action {
        var i int
        if $type_participants == 1 { // everybody
            var members array
            members = DBFind("members")
            i=0
            while i < Len(members) {
                addVotingMember(members[i], $votingID)
                $number_participants = $number_participants + 1
                i = i + 1
            }
        }
        
        if $type_participants == 2 { // manual
            var member map
            member = DBFind("members").Where("id=?", $var_id).Row()
            if member {
                addVotingMember(member, $votingID)
                $number_participants = $number_participants + 1
            }
        }
        
        if $type_participants == 3 { // role
            var roles array
            roles = DBFind("roles_participants").Where("role->id=$ and deleted=0", $var_id).Order("id")
            i=0
            while i < Len(roles) {
                var role map
                role = roles[i]
                DBInsert("votings_participants", "voting_id,member", $votingID, role["member"])
                $number_participants = $number_participants + 1
                i = i + 1
            }
        }
        
        var progress map
        progress = safeJsonToMap($voting_map["progress"])
        progress["number_participants"] = $number_participants
        DBUpdate("votings", $votingID, "progress", progress)
    }
}