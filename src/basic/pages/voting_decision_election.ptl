If(#vID# > 0){
    If(GetVar(back_page)){}.Else{
        SetVar(back_page,@1voting_view)
    }

    DBFind(@1votings, src_voting).WhereId(#vID#).Columns("id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params").Vars(instance)

    SetVar(candidates,0)
    DBFind(@1votings_subject, src_subject).Where({voting_id:#vID#}).Columns("id,subject->member_id,subject->member_name").Custom(_address){
        SetVar(candidates,"#candidates#,#subject.member_id#")
        Address(#subject.member_id#)
    }.Custom(_member){
        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: "v_member_id=#subject.member_id#"){
            Span(Body: #subject.member_name#)
        }
    }
    DBFind(@1keys,src_keys).Where({ecosystem:#ecosystem_id#, id:{"$nin":[#candidates#]}}).Columns("id").Custom(_name){
        DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns("id,member_name").Vars(m)
        Address(#id#)
        If(Or(#m_id#>0,#m_id#<0)){
            " (#m_member_name#)"
        }
    }

    Form(){
        Div(form-group){
            Div(row){
                Div(col-md-3 mt-sm text-right){
                    Label(){
                        Span(Body: LangRes(@1candidates)).(Class: text-danger, Body:*)
                    }
                }
                Div(col-md-9 mc-sm text-left){
                    Div(input-group){
                        Select(Name: memberID, Source: src_keys, NameColumn: _name, ValueColumn: id)
                        Div(input-group-btn){
                            Button(Body: LangRes(@1add), Class: btn btn-primary, Page: @1voting_decision_election, PageParams: "vID=#vID#,back_page=#back_page#", Contract: @1VotingSubjectCandidates).Popup(50, $@1subject_voting$)
                        }
                    }
                }
            }
            Div(row){
                Div(col-sm-9 col-sm-offset-3){
                    Table(src_subject, "$@1candidates$=_member,=_address")
                }
            }
        }
        Div(form-group){
            Div(row){
                Div(col-md-3 mt-sm text-right){
                    Label(){
                        Span(Body: LangRes(@1role)).(Class: text-danger, Body:*)
                    }
                }
                Div(col-md-9 mb-sm text-left){
                    DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, role_type:2, deleted:0}).Columns("id,role_name").Count(count_roles)
                    If(#count_roles#>0){
                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)
                    }.Else{
                        elected role is not found
                    }
                }
            }

            Div(row){
                Div(col-md-3 mt-sm text-right){
                    Label(){
                        Span(Body: LangRes(@1vacancies)).(Class: text-danger, Body:*)
                    }
                }
                Div(col-md-9 mc-sm text-left){
                    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)
                }
            }
        }
        Div(form-group){
            Div(row){
                Div(col-md-3 mt-sm text-right){
                    Label(){
                        Span(Body: LangRes(@1contract_accept))
                    }
                }
                Div(col-md-9 mb-sm text-left){
                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: "$@1contract_accept_des$").Validate(minLength:3, maxLength:255)
                    InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)
                }
            }
            Div(row){
                Div(col-md-3 mt-sm text-right){
                    Label(){
                        Span(Body: LangRes(@1params))
                    }
                }
                Div(col-md-9 mb-sm text-left){
                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: "$@1contract_params_des$")
                }
            }
            Div(row){
                Div(col-md-3 mt-sm text-right){
                    Label(){
                        Span(Body: LangRes(@1contract_reject))
                    }
                }
                Div(col-md-9 mb-sm text-left){
                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: "$@1contract_reject_des$").Validate(minLength:3, maxLength:255)
                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)
                }
            }
            Div(row){
                Div(col-md-3 mt-sm text-right){
                    Label(){
                        Span(Body: LangRes(@1params))
                    }
                }
                Div(col-md-9 mc-sm text-left){
                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: "$@1contract_params_des$")
                }
            }
        }
        Div(row mt){
            Div(col-md-12){
                Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: "vID=#vID#")
                Input(Name: votingID, Type: hidden, Value: #vID#)
                Div(pull-right){
                    Button(Body: LangRes(@1save), Class: btn btn-primary, Page: #back_page#, PageParams: "vID=#vID#", Contract: @1VotingSubjectSettings)
                }
            }
        }
    }
}.Else{
    Div(md-12 alert alert-danger text-center){
        Span(Body: LangRes(@1attention))
    }
}