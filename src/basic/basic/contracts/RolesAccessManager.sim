contract RolesAccessManager {
    data {
        Action string
        Rid int
        ManagerRid string "optional"
    }
    func updateAccess(ra string){
        var model map
        model["roles_access"] = {rids:ra}
        DBUpdate("roles", $Rid, model)
    }
    conditions {
        RolesAccessCheck("rid", $Rid)

        $ManagerRid = Int($ManagerRid)
        $role = DBFind("roles").WhereId($Rid).Columns("id,roles_access->rids").Row()
        if !$role {
            warning "Role not found"
        }
        if $ManagerRid > 0{
            if !DBFind("roles").WhereId($ManagerRid).One("id") {
                warning "Role not found"
            }
        }
        var ids array, i int
        $ids = ids
        ids = Split($role["roles_access.rids"],",")
        while i < Len(ids){
            if ids[i] > 0 {
                $ids = Append($ids, ids[i])
            }
            i=i+1
        }
    }

    action {
        if $Action == "clean"{
            updateAccess("")
        }
        if $ManagerRid > 0{
            var i int, idsNew array
            if $Action == "remove"{
                while i<Len($ids){
                    if $ids[i] != $ManagerRid{
                        idsNew = Append(idsNew, $ids[i])
                    }
                    i=i+1
                }
                updateAccess(Join(idsNew, ","))
            }
            if $Action == "add"{
                var double bool
                while i<Len($ids){
                    if $ids[i] == $ManagerRid{
                        double = true
                    }
                    i=i+1
                }
                if !double {
                    $ids = Append($ids, $ManagerRid)
                }
                updateAccess(Join($ids, ","))
            }
        }
    }
}