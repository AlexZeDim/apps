contract InvestorRefresh {
    func NotInArray(val string, arr array) bool{
        var i int
        while i< Len(arr){
            if val == Str(arr[i]){
                return false
            }
            i=i+1
        }
        return true
    }
    conditions{
        if $role_id != 3 {
            // warning "You not Validator. You can not to run this"
        }

        // roles:id == 4 Investor with voting rights
        $roleId = Int(DBFind("roles").Where({id:4, deleted:0}).One("id"))
        if !$roleId{
            warning "Investor role not found or deleted"
        }
        var appId int
        appId = Int(DBFind("applications").Where({name:"Basic application"}).Columns("name,id").One("id"))
        $limitInvestors = Int(AppParam(appId,"investors_number"))
        if $limitInvestors == 0 {
            warning "Investors number not set in application params"
        }
    }

    action{
        // get investors ids
        var keysInvestors assignedInvestors investorsIds assignedIds array
        keysInvestors = DBFind("keys").Columns("id").Order([{amount:"1"},{id:"-1"}]).Limit($limitInvestors)
        assignedInvestors = DBFind("roles_participants").Where({"role->id":$roleId, deleted:0}).Columns("member->member_id")

        // get ids
        var i int
        while i < Len(keysInvestors) {
            var inv map
            inv = keysInvestors[i]
            investorsIds[i] = inv["id"]
            i = i + 1
        }
        i=0
        while i < Len(assignedInvestors) {
            var inv map
            inv = assignedInvestors[i]
            assignedIds[i] = inv["member.member_id"]
            i = i + 1
        }

        // remove old investors
        var assigned map mid string
        i=0
        while i < Len(assignedIds) {
            if NotInArray(assignedIds[i], investorsIds){
                mid = assignedIds[i]
                assigned = DBFind("roles_participants").Where({"member->member_id":mid, "role->id":$roleId}).Row()
                if assigned {
                    RolesUnassign("row_id", Int(assigned["id"]))
                }
            }
            i = i+1
        }
        // add new investors
        i=0
        while i < Len(investorsIds) {
            if NotInArray(investorsIds[i], assignedIds){
                if DBFind("keys").WhereId(investorsIds[i]).Row(){
                    RolesAssign("rid,member_id", $roleId, Int(investorsIds[i]))
                }
            }
            i = i+1
        }
    }
}