contract RootVote {
    data {
        VotingId int
        Id int
        Type string
        Params string
    }

    conditions {
        var prev string
        prev = $stack[0]
        if Len($stack) > 2{
            prev = $stack[Len($stack) - 2]
        }
        if prev != "@1VotingDecisionCheck" {
            error LangRes("@1contract_start_votingdecisioncheck_only", "en")
        }
        $voting = DBFind("@1votings").Where({ecosystem:$ecosystem_id, id: $VotingId }).Columns("voting->type_decision,flags->success,voting->type").Row()
        if Int($voting["voting.type"]) != 2 {
            error LangRes("@1voting_type_invalid", "en")
        }
        if Int($voting["voting.type_decision"]) != 4 {
            error LangRes("@1voting_error_decision", "en")
        }
        if Int($voting["flags.success"]) != 1 {
            error LangRes("@1voting_error_success", "en")
        }
        var types map
        types = {"@1app_params":1, "@1blocks":1, "@1contracts":1, "@1pages":1, "@1menu":1, "@1tables":1}
        if types[$Type] != 1{
            error "Error type"
        }
    }

    action {
        if $Type == "@1app_params"{
            CallContract("@1EditAppParam", $Params)
        }elif $Type == "@1blocks"{
            CallContract("@1EditBlock", $Params)
        }elif $Type == "@1contracts"{
            CallContract("@1EditContract", $Params)
        }elif $Type == "@1pages"{
            CallContract("@1EditPage", $Params)
        }elif $Type == "@1menu"{
            CallContract("@1EditMenu", $Params)
        }elif $Type == "@1tables"{
            CallContract("@1EditTable", $Params)
        }
    }
}