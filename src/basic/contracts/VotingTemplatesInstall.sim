contract VotingTemplatesInstall {
    data {
        fill_ids string "optional"
    }

    func applyTemplate(m map, param string) {
        var templateId paramId int
        templateId = DBInsert("@1voting_templates", m)
        if $fill_ids == "yes" {
            paramId = Int(DBFind("@1app_params").Where({name:param, ecosystem: $ecosystem_id}).One("id"))
            @1EditAppParam("Id,Value", paramId, templateId)
        }
    }

    func getRoleId(name string) int {
        var rid int
        rid = Int(EcosysParam(name))
        if rid == 0{
            warning Sprintf(LangRes("@1role_not_set_eco_parameter", "en"), name)
        }
        return rid
    }

    conditions {
        $consensusRoleId = getRoleId("role_apla_consensus_asbl")
        $validatorRoleId = getRoleId("role_validator")
    }

    action {
        var template map
        // common
        template["quorum"] = 51
        template["volume"] = 70
        template["accept_params"] = ""
        template["reject_params"] = ""
        template["type"] = "law"
        template["voters"] = $consensusRoleId
        template["type_participants"] = 3 // by Role
        template["type_voting"] = 2 // system
        template["ecosystem"] = $ecosystem_id

        template["title"] = "Voting for Validator"
        template["init_contract"] = "@1VotingValidatorInit"
        template["contract_accept"] = "@1VotingValidatorAccept"
        template["contract_reject"] = ""
        template["vacancies"] = 1
        template["candidates"] = $validatorRoleId
        template["type_decision"] = 2
        template["subject"] = "Validator"
        applyTemplate(template, "voting_validators_template_id")

        template["title"] = "Voting for System param value"
        template["init_contract"] = ""
        template["contract_accept"] = ""
        template["contract_reject"] = ""
        template["vacancies"] = 0
        template["candidates"] = 0
        template["type_decision"] = 4
        template["subject"] = "System param"
        applyTemplate(template, "voting_sysparams_template_id")

        template["title"] = "Voting for Valued Ecosystem"
        template["init_contract"] = ""
        template["contract_accept"] = ""
        template["contract_reject"] = ""
        template["vacancies"] = 0
        template["candidates"] = 0
        template["type_decision"] = 4
        template["subject"] = "Valued ecosystem"
        applyTemplate(template, "voting_ves_template_id")

        template["title"] = "Token Refund"
        template["init_contract"] = ""
        template["contract_accept"] = "@1TokensRefundAccept"
        template["contract_reject"] = "@1TokensRefundReject"
        template["vacancies"] = 0
        template["candidates"] = 0
        template["type_decision"] = 5
        template["subject"] = "Token refund"
        applyTemplate(template, "voting_tokenrefund_template_id")
        
        template["title"] = "Edit Page"
        template["init_contract"] = ""
        template["contract_accept"] = ""
        template["contract_reject"] = ""
        template["vacancies"] = 0
        template["candidates"] = 0
        template["type_decision"] = 4
        template["subject"] = "Edit Page"
        applyTemplate(template, "voting_edit_page_template_id")
        
        template["title"] = "Edit Contract"
        template["init_contract"] = ""
        template["contract_accept"] = ""
        template["contract_reject"] = ""
        template["vacancies"] = 0
        template["candidates"] = 0
        template["type_decision"] = 4
        template["subject"] = "Edit Contract"
        applyTemplate(template, "voting_edit_contract_template_id")
    }
}