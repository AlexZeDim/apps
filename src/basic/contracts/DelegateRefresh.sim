contract DelegateRefresh {
    data {}
    
    func notInArray(val string, arr array) bool {
        var i int
        // info arr
        while i < Len(arr){
            if val == arr[i]{
                return false
            }
            i = i + 1
        }
        return true
    }
    
    func getAppRoleId(id int, name string) int {
        var rid int
        rid = Int(AppParam(id, name, 1))
        if rid == 0{
            warning Sprintf(LangRes("@1role_not_set_application_parameter", "en"), name)
        }
        return rid
    }
    
    conditions {
        MainCondition()
        var appId roleId int
        appId = Int(DBFind("@1applications").Where({ecosystem:1, name:"Basic", deleted:0}).One("id"))
        if appId == 0{
            warning LangRes("@1app_not_found", "en")
        }
        roleId = getAppRoleId(appId, "role_delegate")

        $role = DBFind("@1roles").Where({id:roleId, deleted:0}).Row()
        if !$role{
            warning LangRes("@1role_not_found", "en")
        }
    }

    action {
        // get delegates ids
        var delegateIds currentDelegates ecosystems array i ecoId int rid string
        ecosystems = DBFind("@1ecosystems").Columns("id")
        while i < Len(ecosystems) {
            var eco delegateParam map
            eco = ecosystems[i]
            ecoId = Int(eco["id"])
            delegateParam = DBFind("@1parameters").Where({name:"delegate_account", ecosystem:ecoId}).Row()
            if !delegateParam{
                delegateParam = DBFind("@1parameters").Where({name:"founder_account", ecosystem:ecoId}).Row()
            }

            if notInArray(delegateParam["value"], delegateIds){
                delegateIds = Append(delegateIds, delegateParam["value"])
            }
            i = i + 1
        }

        // remove old role assigns
        rid = Int($role["id"])
        currentDelegates = DBFind("@1roles_participants").Where({"role->id":rid, deleted:0}).Columns("id,member->member_id")
        var delegate map id int
        i = 0
        while i < Len(currentDelegates){
            delegate = currentDelegates[i]
            if notInArray(delegate["member.member_id"], delegateIds){
                id = Int(delegate["id"])
                @1RolesUnassign("row_id", id)
            }
            i = i + 1
        }

        // assign new roles
        var key map delegateId int
        i = 0
        while i < Len(delegateIds) {
            delegateId = Int(delegateIds[i])
            key = DBFind("@1keys").WhereId(delegateId).Row()
            if key {
                // check role dup
                if !DBFind("@1roles_participants").Where({"member->member_id":delegateId, "role->id":rid, deleted:0}).Row(){
                    @1RolesAssign("rid,member_id", rid, Int(key["id"]))
                }
            }
            i = i + 1
        }
    }
}