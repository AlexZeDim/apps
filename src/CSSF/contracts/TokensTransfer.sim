contract TokensTransfer {
	data {
		Recipient string
		Amount money
        Status int "optional"
	}

    func GetDailyLimit(member_id int) money {
		var s money

		var validated_transactions array
		validated_transactions = DBFind("validated_transactions").Columns("amount").Where("current_date = date(tr_date) and sender=?", member_id)
		var i int
		while i < Len(validated_transactions) {
			var p map
			p = validated_transactions[i]
			s = s + Money(p["amount"])
			i = i + 1
		}

        return s
    }


	conditions {
		$recipient = AddressToId($Recipient)
		if $recipient == 0 {
			error Sprintf("Recipient %s is invalid", $Recipient)
		}

		if $Amount <= 0 {
			error "Amount must be greater then zero"
		}
		var row map
		row = DBFind("keys").Columns("amount").WhereId($key_id).Row()

        var total money
		total = Money(row["amount"])

		if $Amount  >= total {
			error Sprintf("Money is not enough %v < %v",total, $Amount )
		}
	}
	action {
		var row map
		row = DBFind("keys").Columns("fin_inst").WhereId($key_id).Row()
        var fin_inst_id int
        fin_inst_id = Int(row["fin_inst"])

		if (fin_inst_id > 0){
			var role map
			role = DBFind("roles").Columns("financial_institutions->max_amount,financial_institutions->daily_limit").WhereId(fin_inst_id).Row()

			var max_amount,daily_limit money
			max_amount = Money(role["financial_institutions.max_amount"])
			daily_limit = Money(role["financial_institutions.daily_limit"])

			var myDailyLimit money
			myDailyLimit = GetDailyLimit($key_id)

			if ( ($Amount > max_amount) || (myDailyLimit > daily_limit) ) {
				// get delegate for financial institution
				var delegate_map map 
				delegate_map = DBFind("roles_participants").Columns("member->member_id").Where("role->id=$ and deleted=0", fin_inst_id).Row()

				var delegate int
				delegate = Int(delegate_map["member.member_id"])
				//warning delegate 

				DBUpdate("keys", $key_id,"-amount", $Amount )
				DBUpdate("keys", delegate,"+amount", $Amount )

				var transaction_id int
				transaction_id = DBInsert("validated_transactions", "sender,recipient,delegate,amount,comment,document_id,financial_institution_id,status,timestamp tr_date",
					$key_id, $Recipient, delegate, $Amount, "Checking the financial institution", 0, fin_inst_id, 1, $block_time)

				var params_map map
				params_map["transaction_id"] = transaction_id

				Notifications_Single_Send("member_id,sender,icon_name,text_header,text_body,page_name,params_map",
					$key_id, 1, "fa-check", "Sending tokens", "Checking the financial institution", "page_upload_doc", params_map)   		
			} else {
                DBUpdate("keys", $key_id,"-amount", $Amount )
                DBUpdate("keys", $recipient,"+amount", $Amount )

                DBInsert("validated_transactions", "sender,recipient,amount,comment,document_id,financial_institution_id,status,timestamp tr_date",
                    $key_id, $recipient, $Amount, "", 0, fin_inst_id, 2, $block_time)
            }
		} else {
			DBUpdate("keys", $key_id,"-amount", $Amount )
			DBUpdate("keys", $recipient,"+amount", $Amount )

            if $Status == 0 {
                $Status = 2
            }
			DBInsert("validated_transactions", "sender,recipient,amount,comment,document_id,financial_institution_id,status,timestamp tr_date",
				$key_id, $recipient, $Amount, "", 0, 0, $Status, $block_time)
		}
	}
}