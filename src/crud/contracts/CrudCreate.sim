contract CrudCreate {
    data {
        tableName string
    }
    func appendAll(a array, b ...)array{
        var i lenb int
        lenb = Len(b)
        while i<lenb{
            a = Append(a, b[i])
            i=i+1
        }
        return a
    }
    func toCap(s string) string{
        return ToUpper(Substr(s, 0, 1)) + ToLower(Substr(s, 1, Size(s)))
    }
    func toCamel(t string, lowerFirstLetter bool) string{
        // Println("toCamel")
        var parts array i int
        parts = Split(t, "_")
        while i < Len(parts){
            if i == 0 && lowerFirstLetter {
                parts[i] = ToLower(parts[i])
            }else{
                parts[i] = toCap(parts[i])
            }
            i=i+1
        }
        return Join(parts, "")
    }
    func pageInputTypes()map{
        var m map
        m["text"] = "text"
        m["number"] = "number"
        m["money"] = "number"
        m["varchar"] = "text"
        m["datetime"] = "date"
        m["double"] = "number"
        m["character"] = "text"
        m["json"] = "textarea"
        m["bytea"] = "file"
        m["uuid"] = "text"
        return m
    }
    func contractInputTypes()map{
        var m map
        m["text"] = "string"
        m["number"] = "int"
        m["money"] = "money"
        m["varchar"] = "string"
        m["datetime"] = "string"
        m["double"] = "float"
        m["character"] = "string"
        m["json"] = "string"
        m["bytea"] = "bytes"
        m["uuid"] = "string"
        return m
    }
    func getColsTypes()array{
        var a array i int
        while i<$lenCols{
            a[i] = GetColumnType($tableName, $cols[i])
            i=i+1
        }
        return a
    }
    func getCamelCols()array{
        var a array i int
        while i<$lenCols{
            a[i] = toCamel($cols[i], $lowerFirst)
            i=i+1
        }
        return a
    }
    func globJoin(cols array)string{
        // Println("globJoin")
        var body array i lenCols int
        lenCols = Len(cols)
        while i<lenCols{
            body = Append(body, "$"+toCamel(cols[i], $lowerFirst))
            i=i+1
        }
        return Join(body, ",")
    }
    func trim_s(s string)string{
        // Println("trim_s")
        if Substr(s, Size(s)-1, 1) == "s"{
            return Substr(s, 0, Size(s)-1)
        }
        return s
    }
    func getPrefix(appName string)string{
        // Println("getPrefix")
        var temp array
        temp = Split(appName, " ")
        return ToLower(temp[0]+"_")
    }
    func getMapValues(m map, keys array) array {
        // Println("getMapValues")
        var values array i keysLen int key string
        keysLen = Len(keys)
        while i < keysLen {
            key = keys[i]
            values = Append(values, m[key])
            i=i+1
        }
        return values
    }
    func getPaginator() string{
        // Println("getPaginator")
        var body string
        body = `
        DBFind(`+$tableName+`).Count(count)
        If(#page#>0){
            SetVar(prev_page,Calculate(#page#-1)
        }.Else{
            SetVar(page,0).(prev_page,0)
        }
        SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)
        If(#count#>Calculate(#off#+#per_page#)){
            SetVar(next_page,Calculate(#page#+1)
        }
        Div(button-group){
            If(#page#>0){
                Button(Body:"1", Class:btn btn-default, Page:#page_name#, PageParams: "page=0")
            }.Else{
                Button(Body:"1", Class:btn btn-default disabled)
            }
            If(#page#>1){
                Button(Body:Calculate(#prev_page#+1),Class:btn btn-default, Page:#page_name#, PageParams:"page=#prev_page#")
            }
            If(And(#page#>0,#page#<#last_page#)){
                Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)
            }
            If(#next_page#<#last_page#){
                Button(Body:Calculate(#next_page#+1),Class:btn btn-default,Page:#page_name#, PageParams:"page=#next_page#")
            }
            If(#page#<#last_page#){
                Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:#page_name#, PageParams:"page=#last_page#")
            }.ElseIf(#last_page#>0){
                Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)
            }
        }`

        return body
    }
    func getPageRecords(names map) string{
        // Println("getPageRecords")
        var pageEdit pageView this contractDelete string
        pageEdit = names["pageEdit"]
        pageView = names["pageView"]
        this =  names["pageRecords"]
        contractDelete =  names["contractDelete"]
        var body string
        body = `DBFind(applications).Columns("id").Where("name='`+$appName+`' AND deleted=0").Vars(application)
        SetTitle($`+this+`$)
        SetVar(page_name,`+this+`)
        Div(content-wrapper){
            AddToolButton(Title: Create, Page: `+pageEdit+`, Icon: icon-plus)
            `+getPaginator()+`
            Div(panel panel-primary){
                Div(panel-body){
                    Div(table-responsive){
                        DBFind(`+$tableName+`,src_`+$tableName+`).Offset(#off#).Order(id).Custom(_actions){
                            Div(text-right text-nowrap){
                                Button(Class: btn btn-info fa fa-eye mr-sm, Page: `+pageView+`, PageParams: "`+$ID+`=#id#")
                                Button(Class: btn btn-default fa fa-edit mr-sm, Page: `+pageEdit+`, PageParams: "`+$ID+`=#id#")
                                Button(Class: btn btn-danger fa fa-trash, Page: `+this+`, Contract: `+contractDelete+`, Params: "`+$ID+`=#id#").Alert($delete_alert$, $yes$, $no$)
                            }
                        }
                        Table(src_`+$tableName+`,"`+$csvCols+`,=_actions")
                    }
                }
            }
        }`
        return body
    }

    func getPageEdit(names map)string{
        // Println("getPageEdit")
        var body pageRecords contractEdit string i int
        pageRecords =  names["pageRecords"]
        contractEdit =  names["contractEdit"]
        body = `DBFind(applications).Columns("id").Where("name='`+$appName+`' AND deleted=0").Vars(application)
        SetVar(title,$create$).(btn_title,$create$)`
        while i < $lenCols{
            body = body + `.(item_`+$cols[i]+`,)`
            i=i+1
        }
        body = body+`
        If(GetVar(`+$ID+`)){
            DBFind(`+$tableName+`).Where("id=#`+$ID+`#").Vars(item)
            SetVar(title,$edit$).(btn_title,$edit$)
        }
        SetTitle(#title#)
        Div(content-wrapper){
            Div(breadcrumb){
                LinkPage(Body: $`+pageRecords+`$, Page: `+pageRecords+`)
                Span(/, mh)
                Span(#title#, text-muted)
            }
            Div(row){
                Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){
                    Form(panel panel-primary){
                        Div(panel-heading){
                            LangRes(`+$prefix+`data_input)
                        }
                        Div(panel-body){
                            If(GetVar(`+$ID+`)){
                                Input(Name: `+$ID+`, Type:hidden, Value: #`+$ID+`#)
                            }`
                            i=0
                            while i<$lenCols{
                                body = body+`
                                Div(row mt-sm){
                                    Div(col-sm-4 mt-sm text-right){
                                        LangRes(`+$prefix+$cols[i]+`)
                                    }
                                    Div(col-sm-8 text-left){
                                        Input(Name: `+$camelCols[i]+`, Type:`+$pTypes[$types[i]]+`, Value: #item_`+$cols[i]+`#)
                                    }
                                }`
                                i=i+1
                            }
                            body = body+`
                        }
                        Div(panel-footer text-right){
                            Button(Body: Back, Page: `+pageRecords+`, Class: btn btn-default pull-left)
                            Button(Body: #btn_title#, Page: `+pageRecords+`, Class: btn btn-primary, Contract: `+contractEdit+`)
                        }
                    }
                }
            }
        }`
        return body
    }
    func getPageView(names map)string{
        // Println("getPageView")
        var body pageRecords string i int
        pageRecords = names["pageRecords"]
        body = body+`
        DBFind(applications).Columns("id").Where("name='`+$appName+`' AND deleted=0").Vars(application)
        If(GetVar(`+$ID+`)){
            DBFind(`+$tableName+`).Where("id=#`+$ID+`#").Vars(item)
        }
        SetVar(title,$`+$prefix+`view$ ##`+$ID+`#)
        SetTitle(#title#,$view$ ##`+$ID+`#)
        Div(content-wrapper){
            Div(breadcrumb){
                LinkPage(Body: $`+pageRecords+`$, Page: `+pageRecords+`)
                Span(/, mh)
                Span(#title#, text-muted)
            }
            If(GetVar(`+$ID+`)){
                Div(row){
                    Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){
                        Div(panel panel-primary){
                            Div(panel-heading){
                                LangRes(`+$prefix+`data_view)
                            }
                            Div(panel-body){`
                            i=0
                            while i<$lenCols{
                                body = body+`
                                Div(row mt-sm){
                                    Div(col-sm-4 mt-sm text-right text-bold){
                                        LangRes(`+$prefix+$cols[i]+`)
                                    }
                                    Div(col-sm-8 text-left){
                                        #item_`+$cols[i]+`#
                                    }
                                }
                                `
                                i=i+1
                            }
                            body = body+`}
                            Div(panel-footer text-left){
                                Button(Body: LangRes(`+$prefix+`back), Page: `+pageRecords+`, Class: btn btn-default)
                            }
                        }
                    }
                }
            }.Else{
                Div(h3 text-center){
                    LangRes(`+$prefix+`item_not_found)
                }
            }
        }`
        return body
    }

    func getContractDelete(name string)string{
        // Println("getContractDelete")
        var body dColName string i int
        while i<$lenCols{
            if "delete" == $cols[i] || "deleted" == $cols[i]{
                dColName = $cols[i]
            }
            i=i+1
        }
        if !dColName{
            return ""
        }
        body = `contract `+name+` {
            data {
                `+ $ID +` int
            }
            conditions {
                if !DBFind("`+$tableName+`").Where("id=? and `+dColName+`=0", $`+$ID+`).One("id") {
                    warning "Record not found"
                }
            }
            action {
                DBUpdate("`+$tableName+`", $`+ $ID +`, "`+dColName+`", 1)
            }
        }`
        return body
    }

    func getContractEdit(name string)string{
        // Println("getContractEdit")
        var body dColName string i int
        body = `contract `+name+` {
            data {
                `+$ID+` string "optional"`
                while i<$lenCols{
                    body = body+`
                    `+$camelCols[i]+` ` +$cTypes[$types[i]]
                    i=i+1
                }
                body = body + `
            }
            conditions {
                $`+$ID+` = Int($`+$ID+`)
                if $`+$ID+` > 0{
                    if !DBFind("`+$tableName+`").Where("id=?", $`+$ID+`).One("id") {
                        warning "Record not found"
                    }
                }
            }
            action {
                if $`+$ID+` > 0{
                    DBUpdate("`+$tableName+`", $`+$ID+`, "`+$csvCols+`",`+globJoin($cols)+`)
                }else{
                    DBInsert("`+$tableName+`", "`+$csvCols+`",`+globJoin($cols)+`)
                }
            }
        }`
        return body
    }
    func makeLang(s string) map{
        var item trans map
        item["name"] = $prefix + Replace(s, " ", "_")
        trans["en"] = toCap(Replace(s, "_", " "))
        item["Trans"] = trans
        item["Type"] = "languages"
        return item
    }
    func createLangs() array{
        var res array m map
        res = appendAll(res, makeLang("item_not_found"),makeLang("back"),makeLang("data_view"),makeLang("data_input"))
        while i<$lenCols{
            res = Append(res, makeLang($cols[i]))
            i=i+1
        }
        return res
    }
    func createExportItem(type, name, content string)map{
        // Println("createExportItem")
        var item map
        if !(content && name && type){
            return item
        }
        if type == "pages"{
            item["Menu"] = "default_menu"
        }
        if type == "languages"{
            item["Trans"] = content
        }else{
            item["Value"] = content
            item["Conditions"] = "true"
        }

        item["Name"] = name
        item["Type"] = type
        return item
    }
    func export(items ...){
        // Println("export")
        var app item map i lenItems int ar array fileName string
        fileName = Sprintf("%v.json", Replace(ToLower($appName), " ", "_"))
        lenItems = Len(items)
        app["name"] = $appName
        while i<lenItems{
            item = items[i]
            if item["Name"] {
                ar = Append(ar, item)
            }
            i=i+1
        }
        app["data"] = ar
        @1UploadBinary("Name,Data,ApplicationId,DataMimeType", fileName, JSONEncode(app), $appId, "application/json")
    }

    conditions {
        $table = DBFind("tables").Columns("columns").Where("name=?", $tableName).Row()
        if !$table{
            warning "Table not found"
        }
        $lowerFirst = false // first letter for input global variables
        $ID = toCamel("id", $lowerFirst)

        $appId = Int(DBFind("tables").Where("name=?", $tableName).Columns("app_id").One("app_id"))
        $appName = DBFind("applications").Where("id=?", $appId).Columns("name").One("name")
        if !$appName {
            warning "Application not found"
        }

        $tableName = ToLower($tableName)
        $prefix = getPrefix($appName)

        if HasPrefix($tableName, $prefix){
            $pagePrefix = trim_s($tableName) + "_"
            $contractPrefix = toCamel($prefix, false)
        }else{
            $pagePrefix = $prefix + trim_s($tableName) + "_"
            $contractPrefix = toCamel($prefix, false) + toCamel(trim_s($tableName), false)
        }

        $pTypes = pageInputTypes()
        $cTypes = contractInputTypes()
        var columns array
        columns = JSONDecode($table["columns"])
        $cols = GetMapKeys(columns)
        $lenCols = Len($cols)
        $camelCols = getCamelCols()
        $types = getColsTypes()
        $csvCols = Join($cols,",")
    }
    action {
        var names map pageRecords pageEdit pageView contractDelete contractEdit string langs array
        names["pageRecords"] = $prefix + $tableName
        names["pageEdit"] = $pagePrefix + "edit"
        names["pageView"] = $pagePrefix + "view"
        names["contractEdit"] = $contractPrefix + "Edit"
        names["contractDelete"] = $contractPrefix + "Delete"

        pageRecords = getPageRecords(names)
        pageEdit = getPageEdit(names)
        pageView = getPageView(names)

        contractDelete = getContractDelete(names["contractDelete"])
        contractEdit = getContractEdit(names["contractEdit"])

        langs = createLangs()
        export(
            createExportItem("pages", names["pageRecords"], pageRecords),
            createExportItem("pages", names["pageEdit"], pageEdit),
            createExportItem("pages", names["pageView"], pageView),
            createExportItem("contracts", names["contractEdit"], contractEdit),
            createExportItem("contracts", names["contractDelete"], contractDelete)
        )
    }
}