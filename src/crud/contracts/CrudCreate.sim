contract CrudCreate {
    data {
        tableName string
    }
    func appendAll(a array, b ...)array{
        var i lenb int
        lenb = Len(b)
        while i < lenb{
            if GetType(b[i]) == "[]interface {}"{
                a = appendAll(a, b[i]...)
            }else{
                a = Append(a, b[i])
            }
            i = i + 1
        }
        return a
    }
    func toCap(s string) string{
        return ToUpper(Substr(s, 0, 1)) + ToLower(Substr(s, 1, Size(s)))
    }
    func toCamel(t string, lowerFirstLetter bool) string{
        // Println("toCamel")
        var parts array i int
        parts = Split(t, "_")
        while i < Len(parts){
            if i == 0 && lowerFirstLetter {
                parts[i] = ToLower(parts[i])
            }else{
                parts[i] = toCap(parts[i])
            }
            i = i + 1
        }
        return Join(parts, "")
    }
    func pageInputTypes()map{
        var m map
        m["text"] = "text"
        m["number"] = "number"
        m["money"] = "number"
        m["varchar"] = "text"
        m["datetime"] = "date"
        m["double"] = "number"
        m["character"] = "text"
        m["json"] = "textarea"
        m["bytea"] = "file"
        m["uuid"] = "text"
        return m
    }
    func contractInputTypes()map{
        var m map
        m["text"] = "string"
        m["number"] = "int"
        m["money"] = "money"
        m["varchar"] = "string"
        m["datetime"] = "string"
        m["double"] = "float"
        m["character"] = "string"
        m["json"] = "string"
        m["bytea"] = "bytes"
        m["uuid"] = "string"
        return m
    }
    func transRu()map{
        var m map
        m["item_not_found"] = "Объект не найден"
        m["back"] = "Назад"
        m["data_view"] = "Просмотр данных"
        m["data_input"] = "Ввод данных"
        m["edit"] = "Редактировать"
        m["save"] = "Сохранить"
        m["view"] = "Просмотр"
        return m
    }
    func getColsTypes()array{
        var a array i int
        while i < $lenCols{
            a[i] = GetColumnType($tableName, $cols[i])
            i = i + 1
        }
        return a
    }
    func getCamelCols()array{
        var a array i int
        while i < $lenCols{
            a[i] = toCamel($cols[i], $lowerFirst)
            i = i + 1
        }
        return a
    }
    func globJoin(cols array)string{
        // Println("globJoin")
        var body array i lenCols int
        lenCols = Len(cols)
        while i < lenCols{
            body = Append(body, "$" + toCamel(cols[i], $lowerFirst))
            i = i + 1
        }
        return Join(body, ",")
    }
    func trim_s(s string)string{
        // Println("trim_s")
        if Substr(s, Size(s) - 1, 1) == "s"{
            return Substr(s, 0, Size(s) - 1)
        }
        return s
    }
    func getPrefix(appName string)string{
        // Println("getPrefix")
        var temp array i lenTemp int
        temp = Split(appName, " ")
        lenTemp = Len(temp)
        while i < lenTemp{
            temp[i] = Substr(temp[i], 0, 1)
            i = i + 1
        }
        return ToLower(Join(temp, "")) + "_"
    }
    func getMapValues(m map, keys array) array {
        // Println("getMapValues")
        var values array i keysLen int key string
        keysLen = Len(keys)
        while i < keysLen {
            key = keys[i]
            values = Append(values, m[key])
            i = i + 1
        }
        return values
    }
    func getPaginator() string{
        // Println("getPaginator")
        var body string
        body = `
        DBFind(` + $tableName + `).Count(count)
        If(#page#>0){
            SetVar(prev_page,Calculate(#page#-1)
        }.Else{
            SetVar(page,0).(prev_page,0)
        }
        SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)
        If(#count#>Calculate(#off#+#per_page#)){
            SetVar(next_page,Calculate(#page#+1)
        }
        Div(button-group){
            If(#page#>0){
                Button(Body:"1", Class:btn btn-default, Page:#page_name#, PageParams: "page=0")
            }.Else{
                Button(Body:"1", Class:btn btn-default disabled)
            }
            If(#page#>1){
                Button(Body:Calculate(#prev_page#+1),Class:btn btn-default, Page:#page_name#, PageParams:"page=#prev_page#")
            }
            If(And(#page#>0,#page#<#last_page#)){
                Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)
            }
            If(#next_page#<#last_page#){
                Button(Body:Calculate(#next_page#+1),Class:btn btn-default,Page:#page_name#, PageParams:"page=#next_page#")
            }
            If(#page#<#last_page#){
                Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:#page_name#, PageParams:"page=#last_page#")
            }.ElseIf(#last_page#>0){
                Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)
            }
        }`

        return body
    }
    func langsCols()string{
        var res array i int
        while i < $lenCols{
            res = Append(res, Sprintf("$%v%v$=%v", $prefix, $cols[i], $cols[i]))
            i = i + 1
        }
        return Join(res, ",")
    }
    func getPageRecords(names map) string{
        // Println("getPageRecords")
        var pageEdit pageView this contractDelete string
        pageEdit = names["pageEdit"]
        pageView = names["pageView"]
        this = names["pageRecords"]
        contractDelete = names["contractDelete"]
        var body string
        body = `DBFind("@1applications").Columns("id").Where({name:"` + $appName + `", deleted:0}).Vars(application)
        SetTitle($` + this + `$)
        SetVar(page_name,` + this + `)
        Div(content-wrapper){
            AddToolButton(Title: Create, Page: ` + pageEdit + `, Icon: icon-plus)
            ` + getPaginator() + `
            Div(panel panel-primary){
                Div(panel-body){
                    Div(table-responsive){
                        DBFind(` + $tableName + `,src_` + $tableName + `).Offset(#off#).Order(id).Custom(_actions){
                            Div(text-right text-nowrap){
                                Button(Class: btn btn-info fa fa-eye mr-sm, Page: ` + pageView + `, PageParams: "` + $ID + `=#id#")
                                Button(Class: btn btn-default fa fa-edit mr-sm, Page: ` + pageEdit + `, PageParams: "` + $ID + `=#id#")
                                Button(Class: btn btn-danger fa fa-trash, Page: ` + this + `, Contract: ` + contractDelete + `, Params: "` + $ID + `=#id#").Alert($delete_alert$, $yes$, $no$)
                            }
                        }
                        Table(src_` + $tableName + `,"` + langsCols() + `,=_actions")
                    }
                }
            }
        }`
        return body
    }

    func getPageEdit(names map)string{
        // Println("getPageEdit")
        var body pageRecords contractEdit string i int
        pageRecords = names["pageRecords"]
        contractEdit = names["contractEdit"]
        body = `DBFind("@1applications").Columns("id").Where({name:"` + $appName + `", deleted:0}).Vars(application)
        SetVar(title,$` + $prefix + `create$).(btn_title,$` + $prefix + `create$)`
        while i < $lenCols{
            body = body + `.(item_` + $cols[i] + `,)`
            i = i + 1
        }
        body = body + `
        If(GetVar(` + $ID + `)){
            DBFind(` + $tableName + `).Where({id:#` + $ID + `#}).Vars(item)
            SetVar(title,$` + $prefix + `edit$ ##` + $ID + `#).(btn_title,$` + $prefix + `save$)
        }
        SetTitle(#title#)
        Div(content-wrapper){
            Div(breadcrumb){
                LinkPage(Body: $` + pageRecords + `$, Page: ` + pageRecords + `)
                Span(/, mh)
                Span(#title#, text-muted)
            }
            Div(row){
                Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){
                    Form(panel panel-primary){
                        Div(panel-heading){
                            LangRes(` + $prefix + `data_input)
                        }
                        Div(panel-body){
                            If(GetVar(` + $ID + `)){
                                Input(Name: ` + $ID + `, Type:hidden, Value: #` + $ID + `#)
                            }`
                            i = 0
                            while i < $lenCols{
                                body = body + `
                                Div(row mt-sm){
                                    Div(col-sm-4 mt-sm text-right){
                                        LangRes(` + $prefix + $cols[i] + `)
                                    }
                                    Div(col-sm-8 text-left){
                                        Input(Name: ` + $camelCols[i] + `, Type:` + $pTypes[$types[i]] + `, Value: #item_` + $cols[i] + `#)
                                    }
                                }`
                                i = i + 1
                            }
                            body = body + `
                        }
                        Div(panel-footer text-right){
                            Button(Body: LangRes(` + $prefix + `back), Page: ` + pageRecords + `, Class: btn btn-default pull-left)
                            Button(Body: #btn_title#, Page: ` + pageRecords + `, Class: btn btn-primary, Contract: ` + contractEdit + `)
                        }
                    }
                }
            }
        }`
        return body
    }
    func getPageView(names map)string{
        // Println("getPageView")
        var body pageRecords string i int
        pageRecords = names["pageRecords"]
        body = body + `
        DBFind("@1applications").Columns("id").Where({name:"` + $appName + `", deleted:0}).Vars(application)
        If(GetVar(` + $ID + `)){
            DBFind(` + $tableName + `).Where({id:#` + $ID + `#}).Vars(item)
        }
        SetVar(title,$` + $prefix + `view$ ##` + $ID + `#)
        SetTitle(#title#)
        Div(content-wrapper){
            Div(breadcrumb){
                LinkPage(Body: $` + pageRecords + `$, Page: ` + pageRecords + `)
                Span(/, mh)
                Span(#title#, text-muted)
            }
            If(GetVar(` + $ID + `)){
                Div(row){
                    Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){
                        Div(panel panel-primary){
                            Div(panel-heading){
                                LangRes(` + $prefix + `data_view)
                            }
                            Div(panel-body){`
                            i = 0
                            while i < $lenCols{
                                body = body + `
                                Div(row mt-sm){
                                    Div(col-sm-4 text-right text-bold){
                                        LangRes(` + $prefix + $cols[i] + `)
                                    }
                                    Div(col-sm-8 text-left){
                                        #item_` + $cols[i] + `#
                                    }
                                }
                                `
                                i = i + 1
                            }
                            body = body + `}
                            Div(panel-footer text-left){
                                Button(Body: LangRes(` + $prefix + `back), Page: ` + pageRecords + `, Class: btn btn-default)
                            }
                        }
                    }
                }
            }.Else{
                Div(h3 text-center){
                    LangRes(` + $prefix + `item_not_found)
                }
            }
        }`
        return body
    }

    func getContractDelete(name string)string{
        // Println("getContractDelete")
        var body dColName string i int
        while i < $lenCols{
            if "delete" == $cols[i] || "deleted" == $cols[i]{
                dColName = $cols[i]
            }
            i = i + 1
        }
        if !dColName{
            return ""
        }
        body = `contract ` + name + ` {
            data {
                ` + $ID +` int
            }
            conditions {
                if !DBFind("` + $tableName + `").Where({id:$` + $ID + `, ` + dColName + `:0"}).One("id") {
                    warning "Record not found"
                }
            }
            action {
                DBUpdate("` + $tableName + `", $` + $ID +`, {` + dColName + `:1})
            }
        }`
        return body
    }

    func getContractEdit(name string)string{
        // Println("getContractEdit")
        var body dColName string i int
        body = `contract ` + name + ` {
            data {
                ` + $ID + ` string "optional"`
                while i < $lenCols{
                    body = body + `
                    ` + $camelCols[i] + ` ` +$cTypes[$types[i]]
                    i = i + 1
                }
                body = body + `
            }
            conditions {
                $` + $ID + ` = Int($` + $ID + `)
                if $` + $ID + ` > 0{
                    if !DBFind("` + $tableName + `").Where({id:$` + $ID + `}).One("id") {
                        warning "Record not found"
                    }
                }
            }
            action {
                var m map`
                i = 0
                while i < $lenCols{
                    body = body + `m[` + $cols[i] + `] = $` + $camelCols[i]
                    i = i + 1
                }
                body = body +`if $` + $ID + ` > 0{
                    DBUpdate("` + $tableName + `", $` + $ID + `, m)
                }else{
                    DBInsert("` + $tableName + `", m{` + $csvCols + `:` + globJoin($cols) + `})
                }
            }
        }`
        return body
    }
    func makeLang(s string) map{
        var item trans map
        if HasPrefix(s, $prefix){
            item["Name"] = Replace(s, " ", "_")
        }else{
            item["Name"] = $prefix + Replace(s, " ", "_")
        }
        trans["en"] = toCap(Replace(s, "_", " "))
        if $transRu[s]{
            trans["ru"] = $transRu[s]
        }
        item["Trans"] = JSONEncode(trans)
        item["Type"] = "languages"
        return item
    }
    func makeMenu(name string) map{
        var menu map
        menu["Name"] = "default_menu"
        menu["Value"] = Sprintf("MenuItem(Title: %v, Page: %v, Icon:fa fa-list-ul)", toCap(Replace(name, "_", " ")), name)
        menu["Conditions"] = `ContractAccess("@1EditMenu")`
        menu["Type"] = "menu"
        return menu
    }
    func createLangs(names array) array{
        var res array m map i int
        res = appendAll(
            res,
            makeLang("item_not_found"),
            makeLang("back"),
            makeLang("data_view"),
            makeLang("data_input"),
            makeLang("edit"),
            makeLang("save"),
            makeLang("view"),
            makeLang(names["pageRecords"]),
            makeLang(names["pageEdit"]),
            makeLang(names["pageView"])
        )
        while i < $lenCols{
            res = Append(res, makeLang($cols[i]))
            i = i + 1
        }
        return res
    }
    func makeItem(type, name, content string)map{
        // Println("makeItem")
        var item map
        if !(content && name && type){
            return item
        }
        if type == "pages"{
            item["Menu"] = "default_menu"
        }

        item["Value"] = content
        item["Conditions"] = "true"
        item["Name"] = name
        item["Type"] = type
        return item
    }
    func export(items ...){
        // Println("export")
        var app item menu map i lenItems int res array fileName string
        fileName = Sprintf("%v.json", Replace(ToLower($appName), " ", "_"))
        lenItems = Len(items)
        app["name"] = $appName
        while i < lenItems{
            item = items[i]
            if item["Type"] {
                res = Append(res, item)
            }
            i = i + 1
        }

        app["data"] = res
        @1UploadBinary("Name,Data,ApplicationId,DataMimeType", fileName, JSONEncode(app), $appId, "application/json")
    }

    conditions {
        $table = DBFind("@1tables").Columns("columns").Where({name:$tableName}).Row()
        if !$table{
            warning "Table not found"
        }
        $lowerFirst = false // first letter for input global variables
        $ID = toCamel("id", $lowerFirst)

        $appId = Int(DBFind("@1tables").Where({name:$tableName}).Columns("app_id").One("app_id"))
        $appName = DBFind("@1applications").Where({id:$appId}).Columns("name").One("name")
        if !$appName {
            warning "Application not found"
        }

        $tableName = ToLower($tableName)
        $prefix = getPrefix($appName)

        if HasPrefix($tableName, $prefix){
            $pagePrefix = trim_s($tableName) + "_"
            $contractPrefix = toCamel($prefix, false)
        }else{
            $pagePrefix = $prefix + trim_s($tableName) + "_"
            $contractPrefix = toCamel($prefix, false) + toCamel(trim_s($tableName), false)
        }

        $pTypes = pageInputTypes()
        $cTypes = contractInputTypes()
        var columns array
        columns = JSONDecode($table["columns"])
        $cols = GetMapKeys(columns)
        $lenCols = Len($cols)
        $camelCols = getCamelCols()
        $types = getColsTypes()
        $csvCols = Join($cols,",")
        $transRu = transRu()
    }
    action {
        var names map pageRecords pageEdit pageView contractDelete contractEdit string langs array
        names["pageRecords"] = $prefix + $tableName
        if HasPrefix($tableName, $prefix){
            names["pageRecords"] = $tableName
        }
        names["pageEdit"] = $pagePrefix + "edit"
        names["pageView"] = $pagePrefix + "view"
        names["contractEdit"] = $contractPrefix + "Edit"
        names["contractDelete"] = $contractPrefix + "Delete"

        pageRecords = getPageRecords(names)
        pageEdit = getPageEdit(names)
        pageView = getPageView(names)

        contractDelete = getContractDelete(names["contractDelete"])
        contractEdit = getContractEdit(names["contractEdit"])
        langs = createLangs(names)
        export(
            makeItem("pages", names["pageRecords"], pageRecords),
            makeItem("pages", names["pageEdit"], pageEdit),
            makeItem("pages", names["pageView"], pageView),
            makeItem("contracts", names["contractEdit"], contractEdit),
            makeItem("contracts", names["contractDelete"], contractDelete),
            makeMenu(names["pageRecords"]),
            langs...
        )
    }
}