{
    "name": "Basic application",
    "data": [
        {
            "Type": "contracts",
            "Name": "Notifications_Roles_Close",
            "Value": "contract Notifications_Roles_Close {\n    data {\n        notific_id int\n    }\n\n    conditions {\n        $notifications_map = DBFind(\"notifications\").Columns(\"id,date_start_processing,processing_info->member_id,closed\").Where(\"id=$\", $notific_id).Row()\n        if !$notifications_map {\n            warning \"Notification not found\"\n        }\n\n        if $notifications_map[\"date_start_processing\"] == \"\" {\n            warning \"Sorry, processing of this notification has not yet begun\"\n        }\n\n        if $notifications_map[\"processing_info.member_id\"] != $key_id {\n            warning \"Sorry, processing of this notice began another member\"\n        }\n\n        if $notifications_map[\"closed\"] > 0 {\n            warning \"Sorry, this notification has already been closed before\"\n        }\n    }\n\n    action {\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_closed,closed\", $block_time, 1)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "Notifications_Roles_Processing",
            "Value": "contract Notifications_Roles_Processing {\n    data {\n        notific_id int\n    }\n\n    conditions {\n        $notifications_map = DBFind(\"notifications\").Where(\"id=$\", $notific_id).Row()\n        if !$notifications_map {\n            warning \"Notification not found\"\n        }\n\n        if $notifications_map[\"date_start_processing\"] != \"\" {\n            warning \"Sorry, processing of this notification has already begun\"\n        }\n\n        $participant_id = DBFind(\"roles_participants\").Where(\"role->id=$ and member->member_id=$ and deleted=0\", Int($notifications_map[\"role_id\"]), $key_id).One(\"id\")\n        if $participant_id == 0 {\n            warning \"Sorry, you are not part of the role for which this notification is intended\"\n        }\n\n        $processing_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        if !$processing_map {\n            warning \"Member not found\"\n        }\n    }\n\n    action {\n        var processing_info map\n        processing_info[\"member_id\"] = $processing_map[\"id\"]\n        processing_info[\"member_name\"] = $processing_map[\"member_name\"]\n        processing_info[\"image_id\"] = $processing_map[\"image_id\"]\n\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_start_processing,processing_info\", $block_time, processing_info)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "Notifications_Single_Send_map",
            "Value": "contract Notifications_Single_Send_map {\r\n    data {\r\n        member_id int\r\n        sender int\r\n        icon_name string\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n        params_map map\r\n    }\r\n\r\n    conditions {\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\r\n        if !$member_map {\r\n            warning \"Member not found\"\r\n        }\r\n\r\n        if $sender == 1 {\r\n            $sender_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n            if !$sender_map {\r\n                warning \"Member not found\"\r\n            }\r\n        }\r\n        if $sender == 2 {\r\n            // !!! need to fix role_id to the global variable !!!!\r\n            $sender_map = DBFind(\"roles\").Where(\"id = $\", 1).Row()\r\n            if !$sender_map {\r\n                warning \"Member not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var recipient map\r\n        recipient[\"member_id\"] = $member_map[\"id\"]\r\n        recipient[\"member_name\"] = $member_map[\"member_name\"]\r\n        recipient[\"image_id\"] = $member_map[\"image_id\"]\r\n\r\n        var sender map\r\n        if $sender == 1 {\r\n            sender[\"type\"] = 1\r\n            sender[\"member_id\"] = $sender_map[\"id\"]\r\n            sender[\"member_name\"] = $sender_map[\"member_name\"]\r\n            sender[\"image_id\"] = $sender_map[\"image_id\"]\r\n        }\r\n        if $sender == 2 {\r\n            sender[\"type\"] = 2\r\n            sender[\"role_id\"] = $sender_map[\"id\"]\r\n            sender[\"role_name\"] = $sender_map[\"role_name\"]\r\n            sender[\"image_id\"] = $sender_map[\"image_id\"]\r\n        }\r\n\r\n        var notification map\r\n        notification[\"header\"] = $text_header\r\n        notification[\"type\"] = 1\r\n        notification[\"icon\"] = $icon_name\r\n        notification[\"body\"] = $text_body\r\n\r\n        DBInsert(\"notifications\", \"recipient,sender,notification,page_name,page_params,timestamp date_created\",\r\n            recipient, sender, notification, $page_name, $params_map, $block_time)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "Notifications_Single_Send_str",
            "Value": "contract Notifications_Single_Send_str {\n    data {\n        member_id int\n        sender int\n        icon_name string\n        text_header string\n        text_body string \"optional\"\n        page_name string\n        params_val string \"optional\"\n    }\n\n    conditions {}\n\n    action {\n        var params_map map\n        if Size($params_val) > 0 {\n            params_map = JSONToMap($params_val)\n        }\n        Notifications_Single_Send_map(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\",\n            $member_id, $sender, $icon_name, $text_header, $text_body, $page_name, params_map)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "Notifications_Roles_Send_map",
            "Value": "contract Notifications_Roles_Send_map {\r\n    data {\r\n        rid int\r\n        closure_type int\r\n        sender int\r\n        icon_name string\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n        params_map map\r\n    }\r\n    \r\n    conditions {\r\n        $roles_map = DBFind(\"roles\").Where(\"id = $\", $rid).Row()\r\n        if !$roles_map {\r\n            warning \"Role not found\"\r\n        }\r\n        \r\n        $participant_id = DBFind(\"roles_participants\").Where(\"role->id=$ and deleted=0\", $rid).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"Role does not contain members\"\r\n        }\r\n        \r\n        if $sender == 1 {\r\n            $sender_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n            if !$sender_map {\r\n                warning \"Member not found\"\r\n            }\r\n        }\r\n        if $sender == 2 {\r\n            // !!! need to fix role_id to the global variable !!!!\r\n            $sender_map = DBFind(\"roles\").Where(\"id = $\", 1).Row()\r\n            if !$sender_map {\r\n                warning \"Member not found\"\r\n            }\r\n        }\r\n    }\r\n    \r\n    action {\r\n        //closure_type - Single\r\n        if $closure_type == 1 {\r\n            var recipient map\r\n            recipient[\"role_id\"] = $roles_map[\"id\"]\r\n            recipient[\"role_name\"] = $roles_map[\"role_name\"]\r\n            recipient[\"image_id\"] = $roles_map[\"image_id\"]\r\n            \r\n            var sender map\r\n            if $sender == 1 {\r\n                sender[\"type\"] = 1\r\n                sender[\"member_id\"] = $sender_map[\"id\"]\r\n                sender[\"member_name\"] = $sender_map[\"member_name\"]\r\n                sender[\"image_id\"] = $sender_map[\"image_id\"]\r\n            }\r\n            if $sender == 2 {\r\n                sender[\"type\"] = 2\r\n                sender[\"role_id\"] = $sender_map[\"id\"]\r\n                sender[\"role_name\"] = $sender_map[\"role_name\"]\r\n                sender[\"image_id\"] = $sender_map[\"image_id\"]\r\n            }\r\n            \r\n            var notification map\r\n            notification[\"header\"] = $text_header\r\n            notification[\"type\"] = 2\r\n            notification[\"icon\"] = $icon_name\r\n            notification[\"body\"] = $text_body\r\n            \r\n            DBInsert(\"notifications\", \"recipient,sender,notification,page_name,page_params,timestamp date_created\",\r\n            recipient, sender, notification, $page_name, $params_map, $block_time)\r\n        }\r\n        //closure_type - Multiple\r\n        else {\r\n            var participants array\r\n            participants = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id = $ and deleted=0\", $rid)\r\n            \r\n            var i int\r\n            while i < Len(participants) {\r\n                var p map\r\n                p = participants[i]\r\n                Notifications_Single_Send_map(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\",\r\n                Int(p[\"member.member_id\"]), $sender, $icon_name, $text_header, $text_body, $page_name, $params_map)\r\n                \r\n                i = i + 1\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "Notifications_Roles_Send_str",
            "Value": "contract Notifications_Roles_Send_str {\n    data {\n        rid int\n        closure_type int\n        sender int\n        icon_name string\n        text_header string\n        text_body string \"optional\"\n        page_name string\n        params_val string \"optional\"\n    }\n\n    conditions {}\n\n    action {\n        var params_map map\n        if Size($params_val) > 0 {\n            params_map = JSONToMap($params_val)\n        }\n        Notifications_Roles_Send_map(\"rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map\",\n            $rid, $closure_type, $sender, $icon_name, $text_header, $text_body, $page_name, params_map)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "RoleConditions",
            "Value": "contract RoleConditions {\n    data{\n        role string\n    }\n    conditions {\n        var assigned string\n        assigned = DBFind(\"roles_assign\").Where(\"role_name=? and member_id=? and delete=0\", $role, $key_id).One(\"id\")\n\t\tif !assigned {\n            warning Sprintf(\"This action allowed only for role: %v\", $role)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "Roles_Unassign",
            "Value": "contract Roles_Unassign {\r\n    data {\r\n        row_id int\r\n    }\r\n    \r\n    conditions {\r\n        // check record\r\n        var assigned, role map\r\n        assigned = DBFind(\"roles_participants\").Columns(\"id,role->id\").Where(\"id=$\", $row_id).Row()\r\n        if !assigned {\r\n            warning \"Participant not found\"\r\n        }\r\n        \r\n        role = DBFind(\"roles\").Columns(\"id,creator->member_id,role_name\").Where(\"id=?\", assigned[\"role.id\"]).Row()\r\n        if !role {\r\n            warning \"Role not found in the roles registry\"\r\n        }\r\n        \r\n        var specialRules map\r\n        specialRules[\"sysparams_AcceptValidator\"] = \"Validator\"\r\n        specialRules[\"sysparams_DelegateRefresh\"] = \"Delegate\"\r\n        specialRules[\"sysparams_CandidateValidatorRequest\"] = \"Candidate for validators\"\r\n        specialRules[\"sysparams_InvestorRefresh\"] = \"Investor with voting rights\"\r\n        specialRules[\"tokenrefund_Start\"] = \"Investor with voting rights\"\r\n        specialRules[\"sysparams_ValidatorResign\"] = \"Validator\"\r\n        \r\n        if !(specialRules[$original_contract] == role[\"role_name\"]) {\r\n            // check creator of the role\r\n            if role[\"creator.member_id\"] != $key_id {\r\n                warning \"Sorry, you are not the creator of this role\"\r\n            }\r\n        }\r\n    }\r\n    \r\n    action {\r\n        // delete the member\r\n        DBUpdate(\"roles_participants\", $row_id, \"deleted,timestamp date_deleted\", 1, $block_time)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "Roles_Del",
            "Value": "contract Roles_Del {\n    data {\n        rid int\n    }\n    \n    conditions {        \n        var role map\n        role = DBFind(\"roles\").Columns(\"id,role_type,creator->member_id\").Where(\"id=?\", $rid).Row()\n        if !role {\n            warning \"Role not found\"\n        }\n        \n        if role[\"role_type\"] == 3 {\n            warning \"System role can not be removed\"\n        }\n        \n        if role[\"creator.member_id\"] != $key_id {\n            warning \"Sorry, you are not the creator of this role\"\n        }\n    }\n    \n    action {\n        var participants array\n        participants = DBFind(\"roles_participants\").Columns(\"id\").Where(\"role->id=? and deleted=0\", $rid)\n        \n        // delete all participants\n        var i int\n        while i < Len(participants) {\n            var p map\n            p = participants[i]\n            Roles_Unassign(\"row_id\", Int(p[\"id\"]))\n            i = i + 1\n        }\n        \n        DBUpdate(\"roles\", $rid, \"deleted,timestamp date_deleted\", 1, $block_time)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "TokenTransfer",
            "Value": "contract TokenTransfer {\r\n    data {\r\n        Amount money\r\n        Sender_AccountId int\r\n        Recipient_AccountId int\r\n        Comment string \"optional\"\r\n        Signature string \"optional hidden\"\r\n    }\r\n    \r\n    conditions {\r\n        //check amount\r\n        if $Amount == 0 {\r\n            error \"Amount is zero\"\r\n        }\r\n        if $Amount < 0 {\r\n            error \"Amount is negative\"\r\n        }\r\n        \r\n        //check the sender\r\n        var sender string\r\n        sender = DBFind(\"keys\").Where(\"id=$\", $Sender_AccountId).One(\"id\")\r\n        if !sender {\r\n            error Sprintf(\"Sender %v is invalid\", $Sender_AccountId)\r\n        }\r\n        \r\n        //check balance\r\n        $sender_balance = Money(DBFind(\"keys\").Where(\"id=$\", $Sender_AccountId).One(\"amount\"))\r\n        if $Amount > $sender_balance {\r\n            error Sprintf(\"Money is not enough %v < %v\", $sender_balance, $Amount)\r\n        }\r\n        \r\n        //check the recipient\r\n        var recipient string\r\n        recipient = DBFind(\"keys\").Where(\"id=$\", $Recipient_AccountId).One(\"id\")\r\n        if !recipient {\r\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_AccountId)\r\n        }\r\n    }\r\n    \r\n    action {\r\n        DBUpdate(\"keys\", $Sender_AccountId, \"-amount\", $Amount)\r\n        DBUpdate(\"keys\", $Recipient_AccountId, \"+amount\", $Amount)\r\n        //DBInsert(\"history\", \"sender_id,recipient_id,amount,comment,block_id,txhash\", $Sender_AccountId, $Recipient_AccountId, $Amount, $Comment, $block, $txhash)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "SendTokens",
            "Value": "contract SendTokens {\n    data {\n        Amount money\n        Recipient_Account string\n        Signature string \"signature:TokenTransfer\"\n    }\n\n    conditions {\n        $recipient = AddressToId($Recipient_Account)\n        if $recipient == 0 {\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_Account)\n        }\n    }\n\n    action {\n        TokenTransfer(\"Amount,Sender_AccountId,Recipient_AccountId,Signature\", $Amount, $key_id, $recipient, $Signature)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "catalog_ecosystems_Add",
            "Value": "contract catalog_ecosystems_Add {\n    data {\n        Ecosystem_name string\n        Ecosystem_number int\n        Logo string \"image\"\n        Ecosystem_type int\n        Description string\n        Conditions string\n        Flag_free int\n        Vde_form_address string \"optional\"\n        Vde_page string \"optional\"\n        Web_form_address string \"optional\"\n        Web_page string \"optional\"\n        Email string \"optional\"\n        Phone string \"optional\"\n    }\n    conditions {\n        var FOUNDER_ACCOUNT, DELEGATE_ACCOUNT string\n        FOUNDER_ACCOUNT = \"founder_account\"\n        DELEGATE_ACCOUNT = \"delegate_account\"\n        \n        if Size($Email) > 0 {\n            var emailParts int\n            emailParts = Split($Email, \"@\")\n            if Len(emailParts) != 2 {\n                warning \"Invalid email\"\n            }\n        }\n        \n        if Size($Logo) == 0 {\n            warning \"Required logo\"\n        }\n        var ecoExists map\n        ecoExists = DBFind(\"catalog_ecosystems\").Where(\"ecosystem_number=? and deleted=0\", $Ecosystem_number).Row()\n        if ecoExists {\n            info \"The ecosystem with same number already added\"\n        }\n\n        var isFounder, isDelegate bool\n        var founder, delegate map\n        founder = DBFind(\"parameters\").Where(\"name=?\", FOUNDER_ACCOUNT).Ecosystem($Ecosystem_number).Row()\n        isFounder = founder[\"value\"] == $key_id\n        \n        delegate = DBFind(\"parameters\").Where(\"name=?\", DELEGATE_ACCOUNT).Ecosystem($Ecosystem_number).Row()\n        if delegate {\n            isDelegate = delegate[\"value\"] == $key_id\n        }\n        if !(isFounder || isDelegate) {\n            warning \"Sorry, you can not add this ecosystem\"\n        }\n    }\n    \n    action {\n        var ecosystem_info map\n        ecosystem_info[\"description\"] = $Description\n        ecosystem_info[\"conditions\"] = $Conditions\n        ecosystem_info[\"email\"] = $Email\n        ecosystem_info[\"phone\"] = $Phone\n        \n        var url_address map\n        url_address[\"web_page\"] = $Web_page\n        url_address[\"web_form_address\"] = $Web_form_address\n        url_address[\"vde_page\"] = $Vde_page\n        url_address[\"vde_form_address\"] = $Vde_form_address\n        \n        var image_id int\n        image_id = DBInsert(\"binaries\", \"data\", $Logo)\n        \n        DBInsert(\"catalog_ecosystems\", \"ecosystem_name,ecosystem_number,ecosystem_type,image_id,ecosystem_info,url_address,flag_free\",\n        $Ecosystem_name, $Ecosystem_number, $Ecosystem_type, image_id, ecosystem_info, url_address, $Flag_free)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "catalog_ecosystems_Request",
            "Value": "contract catalog_ecosystems_Request {\n    data {\n        ecosystem_num int\n        pub_key string\n        comment string \"optional\"\n    }\n    \n    conditions {\n        if $ecosystem_num <= 1 {\n            warning \"Invalid number of Ecosystem\"\n        }\n        var requested string\n        requested = DBFind(\"membership_requests\").Where(\"member_id=?\", $key_id).Ecosystem($ecosystem_num).One(\"id\")\n        if requested {\n            warning \"Request was sent earlier\"\n        }\n        var id int\n        id = PubToID($pub_key)\n        if id != $key_id {\n            warning \"Invalid Public key\"\n        }\n    }\n    \n    action {\n        DBInsert($table_name, \"member_id,pub_key,comment\", $key_id, $pub_key, $comment)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_CheckDecision",
            "Value": "contract voting_CheckDecision {\n    data {\n        votingID int\n    }\n    func runContract(cont, p string){\n        if Size(cont) > 0 {\n            var params map\n            if Size(p) > 0 {\n                params = JSONToMap(p)\n            }\n            CallContract(cont, params)\n        }\n    }\n    func percentPartOfTotal(part, total int) int {\n        if total == 0{ total = 1 }\n        var percent int\n        percent = Int((part * 100)/total)\n        if percent > 100 { percent = 100 }\n        return percent\n    }\n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"voting->name,voting->type,voting->quorum,voting->type_decision,flags->success,progress->number_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=? and (CAST(progress->percent_voters as INTEGER)>=CAST(voting->quorum as INTEGER) or date_ended<now())\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting has not expired. Try again later, please\"\n        }\n\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id=$\", $votingID).One(\"id\")\n        if !$subject_id {\n            warning \"Subject of voting is not found\"\n        }\n\n        $voting_name = $voting_map[\"voting.name\"]\n        $voting_type = Int($voting_map[\"voting.type\"]) //system or custom\n        $quorum = Int($voting_map[\"voting.quorum\"])\n        $type_decision = Int($voting_map[\"voting.type_decision\"])\n        $optional_role_id = Int($voting_map[\"optional.role_id\"])\n        $number_role_vacancies = Int($voting_map[\"optional.role_vacancies\"])\n        $number_voters = Int($voting_map[\"progress.number_voters\"]) // already voted\n        $contract_accept = $voting_map[\"optional.contract_accept\"]\n        $contract_reject = $voting_map[\"optional.contract_reject\"]\n        $param_accept = $voting_map[\"optional.contract_accept_params\"]\n        $param_reject = $voting_map[\"optional.contract_reject_params\"]\n        $flag_success = $voting_map[\"flags.success\"]\n    }\n\n    action {\n        // if notifications have been sent, then close it\n        var notes array\n        notes = DBFind(\"notifications\").Where(\"page_name='voting_view' and page_params::jsonb->voting_id=? and closed=0\", $votingID)\n        var i int\n        while i < Len(notes) {\n            var note map\n            note = notes[i]\n            Notifications_Single_Close(\"notific_id\", Int(note[\"id\"]))\n            i = i + 1\n        }\n\n        var percent_voters, flag_decision int\n        flag_decision = -2 // decision can not be made (not enough participants to make a decision)\n        if $flag_success == 1 { //now enough participants to make a decision\n\n            if $type_decision == 1 || $type_decision == 2 {\n                var candidates_added_count int\n                candidates_added_count = 0 // candidates who have already been added\n                flag_decision = -1 // none of the candidates has been added yet\n\n                var subjects array\n                subjects = DBFind(\"votings_subject\").Columns(\"voting_id,number_accept,subject->member_id,subject->member_name,subject->image_id\").Where(\"voting_id=$\", $votingID).Order(\"number_accept DESC\")\n                i = 0\n                while i < Len(subjects) {\n                    var subject map\n                    subject = subjects[i]\n\n                    // if there are still vacancies\n                    if candidates_added_count < $number_role_vacancies {\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n\n                        if percent_voters >= $quorum {\n                            // added candidate to the role\n                            var role map\n                            role = DBFind(\"roles\").Columns(\"id,role_type,role_name,image_id\").Where(\"id=$\", $optional_role_id).Row()\n                            if role {\n                                var member, assignedMember map\n                                member[\"member_id\"] = subject[\"subject.member_id\"]\n                                assignedMember = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=? and deleted=0\", member[\"member_id\"], role[\"id\"]).Row()\n\n                                if !assignedMember {\n                                    member[\"member_name\"] = subject[\"subject.member_name\"]\n                                    member[\"image_id\"] = subject[\"subject.image_id\"]\n\n                                    var rolePart map\n                                    rolePart[\"id\"] = role[\"id\"]\n                                    rolePart[\"type\"] = role[\"role_type\"]\n                                    rolePart[\"name\"] = role[\"role_name\"]\n                                    rolePart[\"image_id\"] = role[\"image_id\"]\n\n                                    var appointed map\n                                    appointed[\"voting_id\"] = $votingID\n                                    appointed[\"voting_name\"] = $voting_name\n\n                                    // add a candidate to the role\n                                    DBInsert(\"roles_participants\", \"role,member,appointed,timestamp date_created\", rolePart, member, appointed, $block_time)\n\n                                    candidates_added_count = candidates_added_count + 1\n                                    // if at least one of the candidates was added to the role, then the voting decision is considered successful\n                                    flag_decision = 1\n                                }\n                            }\n                        }\n                    }\n                    i = i + 1\n                }\n            }\n\n            if $type_decision == 3 {\n                var subject map\n                subject = DBFind(\"votings_subject\").Columns(\"id,number_accept\").Where(\"voting_id=$\", $votingID).Row()\n                if subject {\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n                    if percent_voters >= $quorum {\n                        flag_decision = 1 // accepted\n                    } else {\n                        flag_decision = -1 // rejected\n                    }\n                }\n            }\n\n            if $type_decision == 4 {\n                var subject map\n                subject = DBFind(\"votings_subject\").Columns(\"id,number_accept,subject->table,subject->table_id,subject->column,subject->column_value\").Where(\"voting_id=$\", $votingID).Row()\n                if subject {\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n                    if percent_voters >= $quorum {\n                        flag_decision = 1 // accepted\n\n                        var column string\n                        column = Str(subject[\"subject.column\"])\n                        $colValue = Str(subject[\"subject.column_value\"])\n                        // type of voting - custom\n                        if $voting_type == 1 {\n                            // ALWAYS CHECK THE PERMISSION\n                            var colType string\n                            colType = GetColumnType(subject[\"subject.table\"], column)\n                            if colType == \"number\"{\n                                $colValue = Int($colValue)\n                            }\n                            if colType == \"money\"{\n                                $colValue = Money($colValue)\n                            }\n                            if colType == \"double\" {\n                                $colValue = Float($colValue)\n                            }\n                            DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), column, $colValue)\n                        }\n\n                        // type of voting - system\n                        if $voting_type == 2 {\n                            DBUpdateSysParam(column, $colValue, \"\")\n                        }\n                    } else {\n                        flag_decision = -1 // rejected\n                    }\n                }\n            }\n\n            if $type_decision == 5 {\n                var subject map\n                subject = DBFind(\"votings_subject\").Columns(\"id,number_accept,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Where(\"voting_id=$\", $votingID).Row()\n                if subject {\n                    $contract_accept = subject[\"subject.contract_accept\"]\n                    $contract_reject = subject[\"subject.contract_reject\"]\n                    $param_accept = subject[\"subject.contract_accept_params\"]\n                    $param_reject = subject[\"subject.contract_reject_params\"]\n\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n                    if percent_voters >= $quorum {\n                        flag_decision = 1 // accepted\n                    } else {\n                        flag_decision = -1 // rejected\n                    }\n                }\n            }\n\n            if flag_decision == 1 {\n                runContract($contract_accept, $param_accept)\n            } else {\n                runContract($contract_reject, $param_reject)\n            }\n        }\n\n        var voting, flags map\n        voting = DBFind(\"votings\").Columns(\"flags\").Where(\"id=?\", $votingID).Row()\n        flags = JSONToMap(voting[\"flags\"])\n        flags[\"decision\"] = flag_decision\n        DBUpdate(\"votings\", $votingID, \"flags\", flags)\n        // DBUpdate(\"votings\", $votingID, \"flags->decision\", flag_decision)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_UpdateDataForGraphs",
            "Value": "contract voting_UpdateDataForGraphs {\n    data {\n        votingID int\n    }\n    \n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n  \n    func percentPartOfTotal(part, total int) int {\n        if total == 0{ total = 1 }\n        var percent int\n        percent = Int((part * 100)/total)\n        if percent > 100 { percent = 100 }\n        return percent\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"flags,voting,progress\").Where(\"id=?\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting is not found\"\n        }\n    }\n    \n    action {\n        var progress, voting, flags map\n        progress = safeJsonToMap($voting_map[\"progress\"])\n        voting = safeJsonToMap($voting_map[\"voting\"])\n        flags = safeJsonToMap($voting_map[\"flags\"])\n        \n        var flag_success, percent_success, percent_voters, number_voters, quorum int\n        // increment count of voters\n        quorum = Int(voting[\"quorum\"])\n        number_voters = Int(progress[\"number_voters\"]) + 1\n        percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\n        percent_success = percentPartOfTotal(percent_voters, Int(voting[\"volume\"]))\n        \n        // update the flag of success\n        if percent_success == 100 {\n            flag_success = 1\n        }\n        progress[\"percent_voters\"] = percent_voters\n        progress[\"percent_success\"] = percent_success\n        progress[\"number_voters\"] = number_voters\n        flags[\"success\"] = flag_success\n        \n        DBUpdate(\"votings\", $votingID, \"progress,flags\", progress, flags)\n        \n        if (percent_voters >= quorum && quorum > 50) || percent_voters == 100 {\n            // if a quorum is more than 50% we can immediately make the decision\n            // OR\n            // if all participants have voted we can not wait until the end of the voting period\n            \n            voting_CheckDecision(\"votingID\", $votingID)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_AcceptCandidates",
            "Value": "contract voting_AcceptCandidates {\n    data {\n        votingID int\n        candidateID int\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,flags\").Where(\"id=?\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting is not found\"\n        }\n        \n        $subject_map = DBFind(\"votings_subject\").Where(\"voting_id=$ and subject->member_id=$\", $votingID, $candidateID).Row()\n        if !$subject_map {\n            warning \"Subject of voting is not found\"\n        }\n        \n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\n        if !$participant_id {\n            warning \"You are not a participant in this voting\"\n        }\n    }\n    \n    action {\n        var flags map\n        flags = JSONToMap($voting_map[\"flags\"])\n        // if notifications have been sent, then close it\n        if flags[\"notifics\"] == 1 {\n            \n            $notific_id = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name=$ and page_params->voting_id=$ and closed=$\", $key_id, \"voting_view\", $votingID, 0).One(\"id\")\n            \n            if $notific_id {\n                Notifications_Single_Close(\"notific_id\", Int($notific_id))\n            }\n        }\n        \n        // check the decision\n        if flags[\"decision\"] == 1 {\n            warning \"Decision was taken. Voting is now not possible\"\n        }\n        \n        // check start-end of voting time\n        var voting_start, voting_end string\n        voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\n        voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\n        if !voting_start {\n            warning \"Voting has not yet begun. Try again later, please\"\n        }\n        if !voting_end {\n            warning \"Voting has expired. Voting is now not possible\"\n        }\n        \n        //-----------------------------------------------------------------------------------------------\n        \n        // write the result of the voting\n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, $candidateID)\n        \n        // increment count of accept\n        DBUpdate(\"votings_subject\", Int($subject_map[\"id\"]), \"+number_accept\", 1)\n        \n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_Invite",
            "Value": "contract voting_Invite {\n    data {\n        votingID int\n        var_id int //0, member_id, role_id\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    func addVotingMember(fullMember map, votingId int) {\n        var member map\n        member[\"member_id\"] = fullMember[\"id\"]\n        member[\"member_name\"] = fullMember[\"member_name\"]\n        member[\"image_id\"] = fullMember[\"image_id\"]\n        DBInsert(\"votings_participants\", \"voting_id,member\", votingId, member)\n    }\n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended\").Where(\"id=$ and date_ended > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting has expired. Can not add new participants\"\n        }\n        \n        $type_participants = $voting_map[\"voting.type_participants\"]\n        $type_voting = $voting_map[\"voting.type\"]\n        $number_participants = Int($voting_map[\"progress.number_participants\"])\n        \n        if $number_participants > 1 && $type_voting == 2 {\n            warning \"This vote is a system. Add new participants are not possible\"\n        }\n        var isAdded string\n        if $type_participants == 2 { \n            isAdded = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $var_id).One(\"id\")\n            if isAdded {\n                warning \"Member has already been added before\"\n            }\n        }\n        \n        if $type_participants == 3 { \n            isAdded = DBFind(\"votings_participants\").Where(\"voting_id=$\", $votingID).One(\"id\")\n            if isAdded {\n                warning \"Voting participants have already been added before\"\n            }\n        }\n    }\n    \n    action {\n        var i int\n        if $type_participants == 1 { // everybody\n            var members array\n            members = DBFind(\"members\")\n            i=0\n            while i < Len(members) {\n                addVotingMember(members[i], $votingID)\n                $number_participants = $number_participants + 1\n                i = i + 1\n            }\n        }\n        \n        if $type_participants == 2 { // manual\n            var member map\n            member = DBFind(\"members\").Where(\"id=?\", $var_id).Row()\n            if member {\n                addVotingMember(member, $votingID)\n                $number_participants = $number_participants + 1\n            }\n        }\n        \n        if $type_participants == 3 { // role\n            var roles array\n            roles = DBFind(\"roles_participants\").Where(\"role->id=$ and deleted=0\", $var_id).Order(\"id\")\n            i=0\n            while i < Len(roles) {\n                var role map\n                role = roles[i]\n                DBInsert(\"votings_participants\", \"voting_id,member\", $votingID, role[\"member\"])\n                $number_participants = $number_participants + 1\n                i = i + 1\n            }\n        }\n        \n        var progress map\n        progress = safeJsonToMap($voting_map[\"progress\"])\n        progress[\"number_participants\"] = $number_participants\n        DBUpdate(\"votings\", $votingID, \"progress\", progress)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_Delete",
            "Value": "contract voting_Delete {\n    data {\n        votingID int\n    }\n\n    conditions {\n        var voting map\n        $voting_map = DBFind(\"votings\").Columns(\"creator->member_id,date_started,id\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting already started. Delete voting impossible\"\n        }\n\n        if $voting_map[\"creator.member_id\"] != $key_id {\n            warning \"You are not the creator of the voting\"\n        }\n    }\n\n    action {\n        DBUpdate(\"votings\", $votingID, \"deleted\", 1)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_CreateNew",
            "Value": "contract voting_CreateNew {\n    data {\n        voting_name string\n        voting_type int\n        type_participants int\n        type_decision int\n        \n        volume int\n        quorum int\n        \n        now_date string \"date\"\n        start_time string \"date\"\n        start_date string \"date\"\n        end_date string \"date\"\n        end_time string \"date\"\n        \n        description string \"optional\"\n    }\n    \n    func conditions {\n        $date_started = $start_date + \" \" + $start_time\n        $date_ended = $end_date + \" \" + $end_time\n        var m string\n        \n        if $now_date >= $date_started {\n            m = Sprintf(\"Voting start date [%v] is less than the current date [%v]\", $date_started, $now_date)\n            warning m\n        }\n        \n        if $date_started >= $date_ended {\n            m = Sprintf(\"Voting end date [%v] is less than the start date [%v]\", $date_ended, $date_started)\n            warning m\n        }\n        \n        if ($volume < 50) || ($volume > 100) {\n            m = Sprintf(\"Volume [%v] should be in the range from 50 to 100\", $volume)\n            warning m\n        }\n        \n        if ($quorum < 5) || ($quorum > 100) {\n            m = Sprintf(\"Quorum [%v] should be in the range from 5 to 100\", $quorum)\n            warning m\n        }\n        \n        $member_map = DBFind(\"members\").Where(\"id=$\", $key_id).Row()\n        if !$member_map {\n            warning \"You are not a member of the ecosystem\"\n        }\n    }\n    \n    func action {\n        var voting map\n        voting[\"name\"] = $voting_name\n        voting[\"type\"] = $voting_type\n        voting[\"description\"] = $description\n        voting[\"type_participants\"] = $type_participants\n        voting[\"type_decision\"] = $type_decision\n        voting[\"volume\"] = $volume\n        voting[\"quorum\"] = $quorum\n        \n        var progress map\n        progress[\"number_participants\"] = \"0\"\n        progress[\"number_voters\"] = \"0\"\n        progress[\"percent_success\"] = \"0\"\n        progress[\"percent_voters\"] = \"0\"\n        \n        var flags map\n        flags[\"success\"] = \"0\"\n        flags[\"decision\"] = \"0\"\n        flags[\"full_data\"] = \"0\"\n        flags[\"notifics\"] = \"0\"\n        \n        var creator map\n        creator[\"member_id\"] = $member_map[\"id\"]\n        creator[\"member_name\"] = $member_map[\"member_name\"]\n        creator[\"image_id\"] = $member_map[\"image_id\"]\n        \n        var votingId int\n        votingId = DBInsert(\"votings\", \"voting,progress,flags,creator,date_started,date_ended\", voting, progress, flags, creator, $date_started, $date_ended)\n        \n        // if all members are voting participants\n        if $type_participants == 1 {\n            voting_Invite(\"votingID,var_id\", votingId, 0)\n        }\n        $result = votingId\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_AcceptDecision",
            "Value": "contract voting_AcceptDecision {\r\n    data {\r\n        votingID int\r\n    }\r\n    \r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Columns(\"id,flags->decision,flags->notifics\").Where(\"id=?\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting is not found\"\r\n        }\r\n        \r\n        $subject_map = DBFind(\"votings_subject\").Where(\"voting_id=$\", $votingID).Row()\r\n        if !$subject_map {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n        \r\n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"You are not a participant in this voting\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        // if notifications have been sent, then close it\r\n        if $voting_map[\"flags.notifics\"] == 1 {\r\n            var noteId string\r\n            noteId = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name=$ and page_params->voting_id=$ and closed=$\", $key_id, \"voting_view\", $votingID, 0).One(\"id\")\r\n            if noteId {\r\n                Notifications_Single_Close(\"notific_id\", Int(noteId))\r\n            }\r\n        }\r\n        \r\n        // check the decision\r\n        if $voting_map[\"flags.decision\"] == 1 {\r\n            warning \"Decision was taken. Voting is now not possible\"\r\n        }\r\n        \r\n        // check start-end of voting time\r\n        var voting_start, voting_end string\r\n        voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\r\n        voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\r\n        if !voting_start {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        if !voting_end {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n                \r\n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, 1)\r\n        \r\n        // increment count of accept\r\n        DBUpdate(\"votings_subject\", Int($subject_map[\"id\"]), \"+number_accept\", 1)\r\n        //info \"here\"\r\n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_SendNotifics",
            "Value": "contract voting_SendNotifics {\n    data {\n        votingID int\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,date_ended\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\n        if !$voting_map {\n            warning \"Voting has expired. Notifications can not be sent\"\n        }\n        \n        $voting_map = DBFind(\"votings\").Columns(\"voting->name,creator->member_id,flags->notifics,flags,date_started\").Where(\"id=$ and date_started < now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting has not yet begun. Try again later, please\"\n        }\n        if $voting_map[\"creator.member_id\"] != $key_id {\n            warning \"You are not the creator of the voting\"\n        }\n        if $voting_map[\"flags.notifics\"] == 1 {\n            warning \"Notifications have already been sent\"\n        }\n        \n        $voting_name = $voting_map[\"voting.name\"]\n    }\n    \n    action {\n        var participants array\n        participants = DBFind(\"votings_participants\").Where(\"voting_id=$ and decision=$\", $votingID, 0)\n        var i int\n        while i < Len(participants) {\n            var participant, member, params map\n            participant = participants[i]\n            member = safeJsonToMap(participant[\"member\"])\n            params[\"voting_id\"] = $votingID\n            Notifications_Single_Send_map(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", Int(member[\"member_id\"]), 1, \"fa-check\", \"Voting\", $voting_name, \"voting_view\", params)\n            \n            i = i + 1\n        }\n        \n        var flags map\n        flags = safeJsonToMap($voting_map[\"flags\"])\n        flags[\"notifics\"] = 1\n        DBUpdate(\"votings\", $votingID, \"flags\", flags)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_SubjectCandidates",
            "Value": "contract voting_SubjectCandidates {\n    data {\n        votingID int\n        memberID int\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,date_started,optional,voting->type,flags->full_data\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting already started. Can not edit document\"\n        }\n        \n        if $voting_map[\"flags.full_data\"] == 1 && $voting_map[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n        \n        if $memberID == 0 {\n            $memberID = $key_id\n        }\n        \n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id=$ and subject->member_id=$\", $votingID, $memberID).One(\"id\")\n        if $subject_id {\n            warning \"This candidature for this role has already been added before\"\n        }\n        \n        $member_map = DBFind(\"members\").Where(\"id = $\", $memberID).Row()\n        if !$member_map {\n            warning \"Member not found\"\n        }\n    }\n    \n    action {\n        \n        var subject map\n        subject[\"member_id\"] = $member_map[\"id\"]\n        subject[\"member_name\"] = $member_map[\"member_name\"]\n        subject[\"image_id\"] = $member_map[\"image_id\"]\n        \n        DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\n        \n        var optional map\n        optional = safeJsonToMap($voting_map[\"optional\"])\n        \n        var number_candidates int\n        if optional[\"number_candidates\"]{\n            number_candidates = Int(optional[\"number_candidates\"])\n            number_candidates = number_candidates + 1\n        } else {\n            number_candidates = 1\n        }\n        \n        optional[\"number_candidates\"] = number_candidates\n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\n        \n        //voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_SubjectCheckFulldata",
            "Value": "contract voting_SubjectCheckFulldata {\n    data {\n        votingID int\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,optional,voting->type,voting->type_decision,flags\").Where(\"id=?\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting is not found\"\n        }\n        \n        $type_decision = $voting_map[\"voting.type_decision\"]\n        if $type_decision < 1 || $type_decision > 5 {\n            warning \"invalid type of decision\"\n        }\n        \n        $subject_map = DBFind(\"votings_subject\").Where(\"voting_id=?\", $votingID).Row()\n        if !$subject_map {\n            warning \"Subject of voting is not found\"\n        }\n    }\n    \n    action {\n        var flags, subject map\n        flags = safeJsonToMap($voting_map[\"flags\"])\n        if $type_decision > 2 && $type_decision <= 5 {\n            subject = safeJsonToMap($subject_map[\"subject\"])\n        }\n        \n        var fullData string\n        \n        if $type_decision == 1 || $type_decision == 2 {\n            var optional map\n            optional = safeJsonToMap($voting_map[\"optional\"])\n            \n            if optional[\"number_candidates\"] > 0 && optional[\"role_vacancies\"] > 0 && optional[\"role_id\"] > 0 {\n                fullData = 1\n            }\n        }\n        \n        if $type_decision == 3 {\n            if subject[\"text\"] != \"\" && subject[\"hash\"] != \"\" {\n                fullData = 1\n            }\n        }\n        \n        if $type_decision == 4 {\n            if $voting_map[\"voting.type\"] == 1{ // personal\n                if subject[\"table\"] != \"\" && subject[\"table_id\"] != \"\" && subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\n                    fullData = 1\n                }\n            }\n            if $voting_map[\"voting.type\"] == 2 { // system\n                if subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\n                    fullData = 1\n                }\n            }\n        }\n        \n        if $type_decision == 5 {\n            if subject[\"contract_accept\"] != \"\" && subject[\"contract_reject\"] != \"\" {\n                fullData = 1\n            }\n        }\n        \n        if fullData == 1 {\n            flags[\"full_data\"] = 1\n            DBUpdate(\"votings\", $votingID, \"flags\", flags)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_SubjectContract",
            "Value": "contract voting_SubjectContract {\n    data {\n        votingID int\n        \n        contract_accept string\n        contract_accept_params string \"optional\"\n        \n        contract_reject string\n        contract_reject_params string \"optional\"\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,date_started,voting->type,flags->full_data\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting already started. Can not edit document\"\n        }\n        \n        if $voting_map[\"flags.full_data\"] == 1 && $voting_map[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n    }\n    \n    action {\n        var accept_params, reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n\n        var subject map\n        subject[\"contract_accept\"] = $contract_accept\n        subject[\"contract_accept_params\"] = accept_params\n        subject[\"contract_reject\"] = $contract_reject\n        subject[\"contract_reject_params\"] = reject_params\n        \n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n        if !$subject_id {\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\n        } else {\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\n        }\n        \n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_SubjectDocument",
            "Value": "contract voting_SubjectDocument {\n    data {\n        votingID int\n        text_document string\n        \n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n    }\n    \n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,date_started,flags->full_data,voting->type,optional\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting already started. Can not edit document\"\n        }\n        \n        if $voting_map[\"flags.full_data\"] == 1 && $voting_map[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n    }\n    \n    action {\n        var subject map\n        subject[\"text\"] = $text_document\n        subject[\"hash\"] = Sha256($text_document)\n        \n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n        if !$subject_id {\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\n        } else {\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\n        }\n        var accept_params, reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n\n        var optional map\n        optional = safeJsonToMap($voting_map[\"optional\"])\n        \n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = accept_params\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = reject_params\n        \n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\n        \n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_SubjectFormal",
            "Value": "contract voting_SubjectFormal {\n    data {\n        votingID int\n        \n        description string \"optional\"\n        table_to_written string\n        row_id string\n        column_name string\n        written_value string\n        \n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n    }\n    \n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"id,date_started,flags->full_data,voting->type,optional\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting already started. Can not edit document\"\n        }\n        \n        if $voting_map[\"flags.full_data\"] == 1 && $voting_map[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n    }\n    \n    action {\n        var subject map\n        subject[\"description\"] = $description\n        subject[\"table\"] = $table_to_written\n        subject[\"table_id\"] = $row_id\n        subject[\"column\"] = $column_name\n        subject[\"column_value\"] = $written_value\n        \n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n        if !$subject_id {\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\n        } else {\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\n        }\n        \n        var accept_params, reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n        \n        var optional map\n        optional = safeJsonToMap($voting_map[\"optional\"])\n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = accept_params\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = reject_params\n        \n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\n        \n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_SubjectSettings",
            "Value": "contract voting_SubjectSettings {\n    data {\n        votingID int\n        \n        roleID int\n        vacancies int\n        \n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n    \n    conditions {\n        if $vacancies < 1 {\n            warning \"Number of vacancies can not be less than 1\"\n        }\n        \n        $voting_map = DBFind(\"votings\").Columns(\"optional,voting->type,flags->full_data\").Where(\"id=? and date_started > now()\", $votingID).Row()\n        \n        if !$voting_map {\n            warning \"Voting already started. Can not edit document\"\n        }\n        \n        if $voting_map[\"flags.full_data\"] == 1 && $voting_map[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n        var role map\n        role = DBFind(\"roles\").Where(\"id=? and deleted=0\", $roleID).Row()\n        if !role {\n            warning \"Specified role not found\"\n        }\n        \n        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role\n        if !(role[\"role_type\"] == 2 || role[\"role_type\"] == 3) {\n            warning \"The chosen role is not elective or has been removed\"\n        }\n    }\n    \n    action {\n        var optional map\n        optional = safeJsonToMap($voting_map[\"optional\"])\n        \n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = safeJsonToMap($contract_accept_params)\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = safeJsonToMap($contract_reject_params)\n        optional[\"role_id\"] = $roleID\n        optional[\"role_vacancies\"] = $vacancies\n        \n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\n        \n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_RejectDecision",
            "Value": "contract voting_RejectDecision {\n    data {\n        votingID int\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"votings\").Columns(\"flags->decision,flags->notifics\").Where(\"id=$\", $votingID).Row()\n        if !$voting_map {\n            warning \"Voting is not found\"\n        }\n        \n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\n        if !$participant_id {\n            warning \"You are not a participant in this voting\"\n        }\n    }\n    \n    action {\n        if $voting_map[\"flags.notifics\"] == 1 {\n            // close sent notifications\n            var notific_id string\n            notific_id = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name='voting_view' and page_params->voting_id=$ and closed=0\", $key_id, $votingID).One(\"id\")\n            if notific_id {\n                Notifications_Single_Close(\"notific_id\", Int(notific_id))\n            }\n        }\n        \n        if $voting_map[\"flags.decision\"] == 1 {\n            warning \"Decision was taken. Voting is now not possible\"\n        }\n        var voting_start, voting_end string\n        voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\n        voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\n        if !voting_start {\n            warning \"Voting has not yet begun. Try again later, please\"\n        }\n        if !voting_end {\n            warning \"Voting has expired. Voting is now not possible\"\n        }\n        \n        \n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, -1)\n        \n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "Roles_Restore",
            "Value": "contract Roles_Restore {\r\n    data {\r\n        rid int\r\n    }\r\n    \r\n    conditions {        \r\n        var role map\r\n        role = DBFind(\"roles\").Where(\"deleted=1 and id=?\", $rid).Row()\r\n        if !role {\r\n            warning \"Role not found\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        DBUpdate(\"roles\", $rid, \"deleted\", 0)\r\n    }\r\n}",
            "Conditions": "true"
        },
        {
            "Type": "contracts",
            "Name": "sysparams_AcceptValidator",
            "Value": "contract sysparams_AcceptValidator{\n    data{\n        VotingTemplateId string\n        KeyId string\n        VotingId string\n    }\n    func conditions{\n        var app_id int\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\n        var templateId int\n        templateId = Int(AppParam(app_id,\"voting_validators_template_id\"))\n        \n        var params map\n        params = DBFind(\"voting_templates\").Where(\"id=?\", templateId).Row()\n        if params{\n            warning \"Voting params not found\"\n        }\n\n        $Id = Int($KeyId)\n        var candidateId, oldRoleId, roleId int\n        oldRoleId = 2 // Candidate for validators\n        roleId = 3 // Validator\n        \n        candidateId = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).One(\"candidate_key_id\")\n        if !candidateId {\n            warning \"Candidate key id not found\"\n        }\n        $rowId = Int(DBFind(\"roles_participants\").Where(\"deleted=0 and role->id=? and member->member_id=?\", oldRoleId, candidateId).One(\"id\"))\n        \n        $roleId = Int(DBFind(\"roles\").Where(\"role->id=? and deleted=0\", roleId).One(\"id\"))\n        if $roleId == 0 {\n            warning \"Validator role not found\"\n        }\n    }\n    \n    func action{\n        if $rowId > 0 {\n            Roles_Unassign(\"row_id\", $rowId)\n        }\n        Roles_Assign(\"rid,member_id\", $roleId, $Id)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "sysparams_CandidateValidatorRequest",
            "Value": "contract sysparams_CandidateValidatorRequest{\n    data{\n        HostIp string\n        // CommissionPub string\n        CommissionAddress string\n        Description string \"optional\"\n        Comment string \"optional\"\n    }\n    \n    func IsNotValidIp(ip string)bool{\n        var parts array\n        var i, lenParts, part int\n        parts = Split(ip, \".\")\n        \n        lenParts = Len(parts)\n        if lenParts != 4{\n            return true\n        }\n        while i< lenParts {\n            part = Int(parts[i])\n            if part < 0{\n                return true\n            }\n            if part > 255{\n                return true\n            }\n            i = i+1\n        }\n        \n        return false\n    }\n    \n    conditions{\n        // $CommissionPub = Replace($CommissionPub, \" \", \"\")\n        // info Sprintf(\"%v %v\", $CommissionAddress, PubToID($CommissionPub))\n        // if $CommissionAddress != PubToID($CommissionPub) {\n        // info \"Address or Public key are invalid\"\n        // }\n        \n        $CommissionAddress = AddressToId($CommissionAddress)\n        if !DBFind(\"keys\").Where(\"id=?\", $CommissionAddress).Row(){\n            warning \"Address not valid\"\n        }\n        \n        if IsNotValidIp($HostIp){\n            warning \"Please enter a valid ip address\"\n        }\n        var roleName string\n        var roleId int\n        var role map\n        roleName = \"Candidate for validators\"\n        roleId = 2\n        role = DBFind(\"roles\").Where(\"role_name=? and id=? and deleted=0\", roleName, roleId).Row()\n        if !role{\n            warning Sprintf(\"Role %q not found\", roleName)\n        }\n        Roles_Assign(\"rid,member_id\", roleId, $key_id)\n    }\n    \n    action{\n        \n        DBInsert(\"sysparams_candidate\", \"host_ip,commission_pub,commission_address,description,comment,candidate_key_id,timestamp date_created,deleted\", $HostIp, \"\", $CommissionAddress, $Description, $Comment, $key_id, $block_time, 0)\n        \n    }\n    \n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "sysparams_CandidateValidator_Delete",
            "Value": "contract sysparams_CandidateValidator_Delete{\n    data{\n        Id int\n    }\n    conditions{\n        var candidateId, roleId int\n        roleId = 2 // Candidate for validators\n        candidateId = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).One(\"candidate_key_id\")\n        \n        $role = DBFind(\"roles_participants\").Where(\"deleted=0 and role->id=? and member->member_id=?\", roleId, candidateId).Row()\n        if !$role {\n            warning \"Candidate role not found\"\n        }\n    }\n    action{\n        DBUpdate(\"sysparams_candidate\", $Id, \"deleted\", 1)\n        Roles_Unassign(\"row_id\", Int($role[\"id\"]))\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "sysparams_DelegateRefresh",
            "Value": "contract sysparams_DelegateRefresh{\r\n    func NotInArray(val string, arr array) bool{\r\n        var i int\r\n        // info arr\r\n        while i< Len(arr){\r\n            if val == arr[i]{\r\n                return false\r\n            }\r\n            i=i+1\r\n        }\r\n        return true\r\n    }\r\n\r\n    conditions{\r\n        MainCondition()\r\n\r\n        var ROLE_NAME string\r\n        var ROLE_ID int\r\n        ROLE_NAME = \"Delegate\"\r\n        ROLE_ID = 5\r\n\r\n        // get role Id and Type\r\n        $role = DBFind(\"roles\").Where(\"role_name=? and id=? and delete=0\", ROLE_NAME, ROLE_ID).Row()\r\n        if !$role{\r\n            warning Sprintf(\"Role %q not found\", ROLE_NAME)\r\n        }\r\n    }\r\n\r\n    action{\r\n        var DELEGATE_ACCOUNT string\r\n        DELEGATE_ACCOUNT = \"delegate_account\"\r\n        // get delegates ids\r\n        var delegateIds currentDelegates ecosystems array\r\n        ecosystems = DBFind(\"ecosystems\").Columns(\"id\").Ecosystem(1)\r\n        var i ecoId int\r\n        while i < Len(ecosystems) {\r\n            var eco delegateParam map\r\n            eco = ecosystems[i]\r\n            ecoId = Int(eco[\"id\"])\r\n            delegateParam = DBFind(\"parameters\").Where(\"name=?\", DELEGATE_ACCOUNT).Ecosystem(ecoId).Row()\r\n            if !delegateParam{\r\n                delegateParam = DBFind(\"parameters\").Where(\"name='founder_account'\").Ecosystem(ecoId).Row()\r\n            }\r\n\r\n            if NotInArray(delegateParam[\"value\"], delegateIds){\r\n                delegateIds[Len(delegateIds)] = delegateParam[\"value\"]\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old role assigns\r\n        currentDelegates = DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $role[\"id\"])\r\n        i = 0\r\n        while i < Len(currentDelegates){\r\n            var delegate map\r\n            delegate = currentDelegates[i]\r\n            if NotInArray(delegate[\"member_id\"], delegateIds){\r\n                var id int\r\n                id = Int(delegate[\"id\"])\r\n                Roles_Unassign(\"row_id\", id)\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // assign new roles\r\n        i = 0\r\n        while i < Len(delegateIds) {\r\n            var delegateId int\r\n            delegateId = Int(delegateIds[i])\r\n            var member map\r\n            member = DBFind(\"members\").Where(\"id=?\",delegateId).Row()\r\n            if member{\r\n                // check role dup\r\n                var assigned map\r\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=? and deleted=0\", delegateId, $role[\"id\"]).Row()\r\n                if !assigned{\r\n                    Roles_Assign(\"rid,member_id\", Int($role[\"id\"]), Int(member[\"id\"]))\r\n                }\r\n            }\r\n            i=i+1\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "sysparams_InvestorRefresh",
            "Value": "contract sysparams_InvestorRefresh {\r\n    func NotInArray(val string, arr array) bool{\r\n        var i int\r\n        while i< Len(arr){\r\n            if val == Str(arr[i]){\r\n                return false\r\n            }\r\n            i=i+1\r\n        }\r\n        return true\r\n    }\r\n    conditions{\r\n         if $role_id != 3 {\r\n            warning \"You not Validator. You can not to run this\"\r\n        }\r\n\r\n        // roles:id == 4 Investor with voting rights\r\n        $roleId = Int(DBFind(\"roles\").Where(\"id=4 and deleted=0\").One(\"id\"))\r\n        if !$roleId{\r\n            warning \"Investor role not found or deleted\"\r\n        }\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\r\n        $limitInvestors = Int(AppParam(appId,\"investors_number\"))\r\n        if $limitInvestors == 0 {\r\n            warning \"Investors number not set in application params\"\r\n        }\r\n    }\r\n\r\n    action{\r\n        // get investors ids\r\n        var keysInvestors assignedInvestors investorsIds assignedIds array\r\n        keysInvestors = DBFind(\"keys\").Order(\"amount desc, id\").Limit($limitInvestors)\r\n        assignedInvestors = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id=? and deleted=0\", $roleId)\r\n\r\n        // get ids\r\n        var i int\r\n        while i < Len(keysInvestors) {\r\n            var inv map\r\n            inv = keysInvestors[i]\r\n            investorsIds[i] = inv[\"id\"]\r\n            i = i + 1\r\n        }\r\n        i=0\r\n        while i < Len(assignedInvestors) {\r\n            var inv map\r\n            inv = assignedInvestors[i]\r\n            assignedIds[i] = inv[\"member.member_id\"]\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old investors\r\n        i=0\r\n        while i < Len(assignedIds) {\r\n            if NotInArray(assignedIds[i], investorsIds){\r\n                var assigned map\r\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=?\", assignedIds[i], $roleId).Row()\r\n                if assigned {\r\n                    Roles_Unassign(\"row_id\", Int(assigned[\"id\"]))\r\n                }\r\n            }\r\n            i = i+1\r\n        }\r\n        // add new investors\r\n        i=0\r\n        while i < Len(investorsIds) {\r\n            if NotInArray(investorsIds[i], assignedIds){\r\n                Roles_Assign(\"rid,member_id\", $roleId, Int(investorsIds[i]))\r\n            }\r\n            i = i+1\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "sysparams_RemoveNode",
            "Value": "contract sysparams_RemoveNode{\n    data{}\n    func jsonToArray(json string) array {\n        // KOSTYL\n        var res, parts array\n        if Size(json) < 60 {\n            // fastway empty|incorrect detect\n            return res\n        }\n        if HasPrefix(json, \"[\") {\n            json = Substr(json, 1, Size(json)-2)\n            if Contains(json, \"},\"){\n                // json have many objects\n                parts = Split(json, \"},\")\n                var i int\n                while i < Len(parts){\n                    var p, lastSym string\n                    p = parts[i]\n                    lastSym = Substr(p, Size(p)-1, 1)\n                    if lastSym != \"}\"{\n                        p = Sprintf(\"%v}\", p)\n                    }\n                    res[i] = JSONToMap(p)\n                    i=i+1\n                }\n            }else{\n                if HasPrefix(json, \"{\"){\n                    res[0] = JSONToMap(json)\n                }\n            }\n        }\n        return res\n    }\n    func nodesRemove(keyId int) array{\n        var json string\n        var nodes, res array\n        json = SysParamString(\"full_nodes\")\n        if !HasPrefix(json, \"[\") {\n            // empty string nodes\n            return res\n        }\n        nodes = jsonToArray(json)\n        var i, i_res int\n        while i < Len(nodes){\n            var node map\n            node = nodes[i]\n            if node[\"key_id\"] != keyId {\n                res[i_res] = node\n                i_res = i_res+1\n            }\n            i=i+1\n        }\n        return res\n    }\n    func nodesArrayToJson(nodes array) string{\n        var res string\n        var json array\n        if Len(nodes) == 0 {\n            res = \"[]\"\n            return res\n        }\n        var i int\n        while i < Len(nodes){\n            var node map\n            node = nodes[i]\n            json[i] = Sprintf(`{\"tcp_address\":\"%v\", \"api_address\":\"%v\", \"key_id\":\"%v\", \"public_key\":\"%v\"}`, node[\"tcp_address\"], node[\"api_address\"], node[\"key_id\"], node[\"public_key\"])\n            i=i+1\n        }\n        res = Join(json, \",\")\n        res = Sprintf(\"[%v]\", res)\n        return res\n    }\n    conditions{\n        if $original_contract != \"sysparams_ValidatorResign\"{\n            warning \"Unknown contract\"\n        }\n    }\n    \n    action{\n        var nodes array\n        nodes = nodesRemove($key_id)\n        var fullNodes string\n        fullNodes = nodesArrayToJson(nodes)\n        DBUpdateSysParam(\"full_nodes\", fullNodes, \"\")\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_TemplateRun",
            "Value": "contract voting_TemplateRun{\n    data{\n        TemplateId int\n        Start string \"date\"\n        End string \"date\"\n\n        EndTime string \"date,optional\"\n        StartTime string \"date,optional\"\n        KeyId int \"optional\"\n        TableWritten string \"optional\"\n        RowId string \"optional\"\n        ColumnName string \"optional\"\n        NewValue string \"optional\"\n        TextDocument string \"optional\"\n    }\n    func checkInput(value, name string){\n        if Size(value) == 0 || value == \"NULL\" {\n            warning Sprintf(\"%q not found\", name)\n        }\n    }\n    func emptyOrValue(value string) string{\n        if value == \"NULL\" {\n            value = \"\"\n        }\n        return value\n    }\n\n    conditions{\n        var template map\n        template = DBFind(\"voting_templates\").Where(\"id=?\",$TemplateId).Row()\n        if !template{\n            warning \"Voting template not found\"\n        }\n        if $KeyId != 0{\n            $keyFind = DBFind(\"keys\").Where(\"id=?\", $KeyId).Row()\n            if !$keyFind{\n                warning \"Key id not found\"\n            }\n        }\n        if $StartTime == \"\"{\n            $StartTime = \"00:00\"\n        }\n        if $EndTime == \"\"{\n            $EndTime = \"23:59\"\n        }\n\n        var initContract string\n        initContract = template[\"init_contract\"]\n        if initContract != \"\" && initContract != \"NULL\"{\n            var initParam map\n            initParam[\"KeyId\"] = $KeyId\n            CallContract(initContract, initParam)\n        }\n        $voters = template[\"voters\"]\n        $candidates = template[\"candidates\"]\n        $votingName = template[\"title\"]\n        $volume = Int(template[\"volume\"])\n        $quorum = Int(template[\"quorum\"])\n        $type_voting = Int(template[\"type_voting\"])\n        $participants = Int(template[\"type_participants\"])\n        $decision = Int(template[\"type_decision\"])\n        $vacancies = Int(template[\"vacancies\"])\n\n        $desc = Sprintf(\"%v template #%v\", $votingName, $TemplateId)\n        if $type_voting < 1 || $type_voting > 2 {\n            warning \"Invalid type of voting\"\n        }\n        $contractAccept = emptyOrValue(template[\"contract_accept\"])\n        $acceptParams = emptyOrValue(template[\"accept_params\"])\n        $contractReject = emptyOrValue(template[\"contract_reject\"])\n        $rejectParams = emptyOrValue(template[\"reject_params\"])\n\n        if $decision == 1 || $decision == 2 {\n            // role-candidates\n            checkInput($candidates, \"Candidate role\")\n            var candidate map\n            candidate = DBFind(\"roles\").Where(\"id=? and deleted=0\", $candidates).Row()\n            if !candidate {\n                warning Sprintf(\"Candidates role (id: %v) not found\", $candidates)\n            }\n            $candidateId = Int(candidate[\"id\"])\n        }\n\n        if $decision == 3 {\n            // document approval\n            checkInput($TextDocument, \"TextDocument\")\n        }\n\n        if $decision == 4 {\n            // formal decision\n            // in the system vote need only a field and a value\n            checkInput($ColumnName, \"ColumnName\")\n            checkInput($NewValue, \"NewValue\")\n            if $type_voting == 2{\n                $desc = Sprintf(\"%v [template #%v] %v\", $votingName, $TemplateId, $ColumnName)\n            }\n\n            if $type_voting == 1{\n                checkInput($TableWritten, \"TableWritten\")\n                checkInput($RowId, \"RowId\")\n                $desc = Sprintf(\"%v [template #%v] %v.%v.%v\", $votingName, $TemplateId, $TableWritten, $ColumnName, $RowId)\n            }\n            if $RowId == \"\" || $RowId == \"NULL\"{\n                $RowId = 0\n            }\n\n        }\n        // check duplicated\n        // var isCreated map\n        // isCreated = DBFind(\"votings\").Where(\"voting->name=? and voting->description=? and deleted=0\", $votingName, $desc).Row()\n        // if isCreated{\n        // info \"Voting already created\"\n        // }\n\n\n        if $participants == 3 {\n            // if the type of the participants \"in role\" - check the role\n            var role map\n            role = DBFind(\"roles\").Where(\"id=? and deleted=0\", $voters).Row()\n            if !role {\n                warning Sprintf(\"Voters role (id: %v) not found\", $voters)\n            }\n            $roleId = Int(role[\"id\"])\n        }\n    }\n\n    action{\n        var votingId int\n        // must be installed in voting_CreateNew\n        votingId = voting_CreateNew(\"voting_name,voting_type,description,type_participants,type_decision,now_date,start_time,start_date,end_date,end_time,volume,quorum\", $votingName, $type_voting, $desc, $participants, $decision, $Start, $StartTime, $Start, $End, $EndTime, $volume, $quorum)\n        if votingId == 0 {\n            warning \"votingId is zero\"\n        }\n        // the default argument for Contract\n        var defaultParams string\n        defaultParams = Sprintf(`{\"VotingTemplateId\":\"%v\",\"KeyId\":\"%v\",\"VotingId\":\"%v\"}`, $TemplateId, $KeyId, votingId)\n\n        if Size($acceptParams) == 0{\n            $acceptParams = defaultParams\n        }\n        if Size($rejectParams) == 0{\n            $rejectParams = defaultParams\n        }\n\n        if $decision == 1 || $decision == 2{\n            // 1. Role candidates with the registration of participants on request\n            // 2. Role candidates with manual registration of the participants\n            voting_SubjectCandidates(\"votingID,memberID\", votingId, $KeyId)\n            voting_SubjectSettings(\"votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId, $candidateId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)\n        }\n        if $decision == 3 {\n            // Document approval\n            voting_SubjectDocument(\"votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId,$TextDocument, $contractAccept, $acceptParams, $contractReject, $rejectParams)\n        }\n\n        if $decision == 4 {\n            // Formal decision\n            voting_SubjectFormal(\"votingID,description,table_to_written,row_id,column_name,written_value,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId, $desc, $TableWritten, $RowId, $ColumnName, $NewValue, $contractAccept, $acceptParams, $contractReject, $rejectParams)\n\n        }\n\n        if $decision == 5 {\n            // Execution of the contract\n            voting_SubjectContract(\"votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId,$contractAccept, $acceptParams, $contractReject, $rejectParams)\n        }\n        if $participants == 3 {\n            // participants: \"by role\"\n            voting_Invite(\"votingID,var_id\", votingId, $roleId)\n        }\n        if $participants == 1 {\n            // if the participants are \"all\", the invite has already occurred in \"voting_CreateNew\"\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "sysparams_StartVotingValidator",
            "Value": "contract sysparams_StartVotingValidator{\n    data{\n        KeyId int\n    }\n    \n    conditions{\n        ContractConditions(\"MainCondition\")\n        $candidate = DBFind(\"sysparams_candidate\").Where(\"candidate_key_id=? and deleted=0\", $KeyId).Row()\n        if !$candidate{\n            warning \"Candidate not found\"\n        }\n    }\n    action{\n        sysparams_DelegateRefresh()\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "sysparams_UpdateFullNodesKeysList",
            "Value": "contract sysparams_UpdateFullNodesKeysList{\n    data{\n        Param string\n    }\n    func jsonToArray(json string) array {\n        // kostyl\n        var res, parts array\n        if HasPrefix(json, \"[\") {\n            json = Substr(json, 1, Size(json)-2)\n            if Contains(json, \"},\"){\n                // json have many objects\n                parts = Split(json, \"},\")\n                var i int\n                while i < Len(parts){\n                    var p, lastSym string\n                    p = parts[i]\n                    lastSym = Substr(p, Size(p)-1, 1)\n                    if lastSym != \"}\"{\n                        p = Sprintf(\"%v}\", p)\n                    }\n                    res[i] = JSONToMap(p)\n                    i=i+1\n                }\n            }else{\n                res[0] = JSONToMap(json)\n            }\n        }\n        return res\n    }\n    conditions{\n        $FULL_NODES_KEYS = \"full_nodes_keys\"\n        $FULL_NODES = \"full_nodes\"\n        $paramId = DBFind(\"parameters\").Where(\"name=?\", $FULL_NODES_KEYS).One(\"id\")\n    }\n    \n    action{\n        if $Param != $FULL_NODES {\n            return\n        }\n        var nodesJson string\n        nodesJson = SysParamString($FULL_NODES)\n        var nodes, keys array\n        nodes = jsonToArray(nodesJson)\n        \n        var i int\n        while i<Len(nodes){\n            var node map\n            node = nodes[i]\n            keys[i] = node[\"key_id\"]\n            i=i+1\n        }\n        var keysList, cond string\n        keysList = Join(keys, \",\")\n        cond = `ContractConditions(\"MainCondition\")`\n        if $paramId {\n            DBUpdate(\"parameters\", Int($paramId), \"value,conditions\", keysList, cond)\n        }else{\n            DBInsert(\"parameters\", \"name,value,conditions\", $FULL_NODES_KEYS, keysList, cond)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "sysparams_ValidatorResign",
            "Value": "contract sysparams_ValidatorResign{\n    data{}\n\n    conditions{\n        $assigned = DBFind(\"roles_participants\").Columns(\"id,member->member_id,role->id,role->name,deleted\").Where(\"member->member_id=? and role->id='3' and role->name='Validator' and deleted=0\", $key_id).One(\"id\")\n        if !$assigned {\n            warning \"You are not a validator\"\n        }\n    }\n\n    action{\n        Roles_Unassign(\"row_id\", Int($assigned))\n        sysparams_RemoveNode()\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "tokenrefund_Accept",
            "Value": "contract tokenrefund_Accept{\r\n    data{\r\n        Id string\r\n    }\r\n    \r\n    func refundAmount(victimId, attackerId, amount string){\r\n        TokensTransfer(\"SenderId,RecipientId,Amount\", attackerId, victimId, amount)\r\n    }\r\n    func unblockAccounts(victimId, attackerId string){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", Int(victimId), \"blocked\", 0)\r\n        DBUpdate(\"keys\", Int(attackerId), \"blocked\", 0)\r\n    }\r\n    \r\n    conditions{\r\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n        if $tokenrefund[\"result\"] == 2{\r\n            error \"tokens already returned\"\r\n        }\r\n        if $tokenrefund[\"status\"] == 3{\r\n            error \"tokens refund request already closed\"\r\n        }\r\n\r\n    }\r\n    \r\n    action{\r\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\r\n        refundAmount($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"],$tokenrefund[\"amount\"])\r\n        // status 3: closed; result 2: the tokens returned\r\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,2)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "tokenrefund_Reject",
            "Value": "contract tokenrefund_Reject{\r\n    data{\r\n        Id string\r\n    }\r\n    \r\n    func unblockAccounts(victimId, attackerId string){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", Int(victimId), \"blocked\", 0)\r\n        DBUpdate(\"keys\", Int(attackerId), \"blocked\", 0)\r\n    }\r\n    \r\n    conditions{\r\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n    }\r\n    \r\n    action{\r\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\r\n        // status 3: closed; 1: return cancelled\r\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,1)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "tokenrefund_Start",
            "Value": "contract tokenrefund_Start{\r\n    data{\r\n        VictimAccount string\r\n        SuspectAccount string\r\n        Amount int\r\n        Note string\r\n        DateStart string \"date\"\r\n        DateEnd string \"date\"\r\n        DateNow string \"date\"\r\n        TimeNow string \"date\"\r\n    }\r\n    func blockAccounts(victimId, attackerId int){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", victimId, \"blocked\", 1)\r\n        DBUpdate(\"keys\", attackerId, \"blocked\", 1)\r\n    }\r\n    func getKeyId(test string) int{\r\n        if Len(Split(test, \"-\")) > 1 {\r\n            // probably it is address\r\n            return AddressToId(test)\r\n        }\r\n        if \"invalid\" != IdToAddress(Int(test)){\r\n            // probably it is key_id\r\n            return Int(test)\r\n        }\r\n        return 0\r\n    }\r\n\r\n    conditions{\r\n        if $Amount <= 0{\r\n            error \"Amount not valid\"\r\n        }\r\n        if Size($Note) == 0{\r\n            error \"Please add description\"\r\n        }\r\n        var victim attacker int\r\n        victim = getKeyId($VictimAccount)\r\n        attacker = getKeyId($SuspectAccount)\r\n        if victim == 0{\r\n            error \"Victim address not valid\"\r\n        }\r\n        if attacker == 0{\r\n            error \"Suspect address not valid\"\r\n        }\r\n        $victimId = victim\r\n        $attackerId = attacker\r\n\r\n        var app_id int\r\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\r\n        var template_id int\r\n        template_id = Int(AppParam(app_id,\"voting_tokenrefund_template_id\"))\r\n        if template_id <= 0 {\r\n            warning \"Template id not found\"\r\n        }\r\n\r\n        $template = DBFind(\"voting_templates\").Where(\"id=?\", template_id).Row()\r\n        $votersRoleId = Int($template[\"voters\"])\r\n        $votingName = $template[\"title\"]\r\n        $typeParticipants = 3 // add participants by role\r\n        $typeDecision = 5 // the launch of the contract\r\n        $typeVoting = 2 // the voting system\r\n        $volume = Int($template[\"volume\"])\r\n        $quorum = Int($template[\"quorum\"])\r\n        $contractAccept = $template[\"contract_accept\"]\r\n        $contractReject = $template[\"contract_reject\"]\r\n        var initContract string\r\n        initContract = $template[\"init_contract\"]\r\n        if Size(initContract) > 4 { // greater then \"NULL\"\r\n            var m map\r\n            CallContract(initContract, m)\r\n        }\r\n        $desc = Sprintf(\"%v (victim: %v, attacker: %v, amount: %v)\", $votingName, $victimId, $attackerId, $Amount)\r\n\r\n        if !DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $votersRoleId).One(\"id\") {\r\n            warning Sprintf(\"Role (id: %v) does not contain members\", $votersRoleId)\r\n        }\r\n\r\n        if DBFind(\"votings\").Where(\"voting->name=? and voting->description=? and deleted=0\", $votingName, $desc).Row(){\r\n            // info \"Voting already created\" // debug: uncomment on the prod\r\n        }\r\n    }\r\n\r\n    action{\r\n        blockAccounts($victimId,$attackerId)\r\n\r\n        var votingId status result tokenrefundId closure sender int\r\n        var icon header body page params jsonParams string\r\n\r\n        votingId = voting_CreateNew(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,now_date,start_time,end_time,start_date,end_date\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, $DateNow, $TimeNow, $TimeNow, $DateStart, $DateEnd)\r\n\r\n        status = 1 // 0.Accounts blocked 1.Discussion 2.Vote 3.Closed\r\n        result = 0 // 0. discussion and voting 1. cancelled return 2. the tokens returned\r\n        tokenrefundId = DBInsert(\"tokenrefund\", \"victim_key_id,attacker_key_id,amount,note,validator_key_id,blocked_at,voting_id,status,result\", $victimId, $attackerId, $Amount, $Note, $key_id, $DateNow, votingId,status,result)\r\n\r\n        jsonParams = Sprintf(`{\"Id\":\"%v\"}`, tokenrefundId)\r\n\r\n        voting_SubjectContract(\"votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params\", votingId, $contractReject, $contractAccept, jsonParams, jsonParams)\r\n\r\n        voting_Invite(\"votingID,var_id\", votingId, $votersRoleId)\r\n\r\n        closure = 2\r\n        sender = 1 // from member\r\n        icon = \"icon-bubbles\"\r\n        header = \"$tokenrefund_note_header$\"\r\n        body = $desc\r\n        page = \"voting_view\"\r\n        params = Sprintf(`{\"vID\":\"%v\"}`, votingId)\r\n        Notifications_Roles_Send_str(\"rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_val\", $votersRoleId, closure, sender, icon, header, body, page, params)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_InstallTemplates",
            "Value": "contract voting_InstallTemplates{\r\n    data{}\r\n    conditions{}\r\n\r\n    action{\r\n        var columns string\r\n        columns = \"volume,init_contract,contract_reject,contract_accept,title,vacancies,candidates,reject_params,type_decision,type_voting,type_participants,quorum,voters,subject,accept_params,type\"\r\n\r\n        // voting for validator\r\n        DBInsert(\"voting_templates\", columns, 50, \"sysparams_StartVotingValidator\", \"\", \"sysparams_AcceptValidator\", \"Voting for Validator\", 1, 2, \"\", 2, 2, 3, 50, 5, \"Validator\", \"\",\"law\")\r\n\r\n        // voting for system param\r\n        DBInsert(\"voting_templates\", columns, 75, \"sysparams_InvestorRefresh\", \"\", \"\", \"Voting for System param\", 0, 4, \"\", 4, 2, 3, 50, 4, \"System param\", \"\",\"law\")\r\n\r\n        // voting for valued ecosystem\r\n        DBInsert(\"voting_templates\", columns, 75, \"sysparams_InvestorRefresh\", \"\", \"\", \"Voting for Valued Ecosystem\", 0, 0, \"\", 4, 1, 3, 50, 4, \"Valued ecosystem\", \"\",\"law\")\r\n\r\n        // voting for tokenrefund\r\n        DBInsert(\"voting_templates\", columns, 70, \"sysparams_InvestorRefresh\", \"tokenrefund_Reject\", \"tokenrefund_Accept\", \"Token Refund\", 0, 0, \"\", 0, 0, 3, 51, 4, \"Token refund\", \"\",\"law\")\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "sysparams_StartNodeAdd",
            "Value": "contract sysparams_StartNodeAdd{\n    data{\n        TcpAddress string\n        ApiAddress string\n        KeyId int\n        PubKey string\n        TemplateId int\n        Start string \"date\"\n        End string \"date\"\n        EndTime string \"date\"\n        StartTime string \"date\"\n    }\n    func warn(name, detail string){\n        warning Sprintf(\"%v invalid (%v)\", name, detail)\n    }\n    func checkApiAddress(addr string){\n        var name string\n        name = \"API Address\"\n        if Size(addr) == 0 {\n            warn(name, \"size\")\n        }\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\n            warn(name, \"protocol\")\n        }\n        if Contains(addr, \" \") {\n            warn(name, \"space\")\n        }\n        addr = Replace(addr, \"http://\", \"\")\n        addr = Replace(addr, \"https://\", \"\")\n        var parts array\n        if Contains(addr, \":\") {\n            parts = Split(addr, \":\")\n            if Len(parts) > 2 {\n                warn(name, \":\")\n            }\n            var port string\n            port = parts[1]\n            if port <= 0 {\n                warn(name, \"port\")\n            }\n            addr = parts[0]\n        }\n    }\n    func checkTcpAddress(addr string){\n        var name string\n        name = \"TCP Address\"\n        if Size(addr) == 0 {\n            warn(name, \"size\")\n        }\n        if Contains(addr, \" \") {\n            warn(name, \"space\")\n        }\n        var parts array\n        if Contains(addr, \":\") {\n            parts = Split(addr, \":\")\n            if Len(parts) > 2 {\n                warn(name, \":\")\n            }\n            var port string\n            port = parts[1]\n            if port <= 0 {\n                warn(name, \"port\")\n            }\n            addr = parts[0]\n        }\n        parts = Split(addr, \".\")\n        if Len(parts) != 4 {\n            warn(name, \"too many parts\")\n        }\n        var i int\n        while i < 4 {\n            var n int\n            n = Int(parts[i])\n            if n < 0 || n > 255 {\n                warn(name, \"part\")\n            }\n            i=i+1\n        }\n    }\n    func checkPub(pub string){\n        if PubToID(pub) == 0 {\n            warning \"Public key invalid\"\n        }\n    }\n    func checkKeyId(keyid int){\n        var existed map\n        existed = DBFind(\"keys\").Where(\"id=?\", keyid).Row()\n        if !existed {\n            warning \"Key id not found\"\n        }\n    }\n    func getNodesString() string{\n        // kostyl\n        // return json-like string from full_nodes trimmed \"[\" and \"]\"\n        var nodes string\n        nodes = SysParamString(\"full_nodes\")\n        if HasPrefix(nodes, \"[\") {\n            nodes = Substr(nodes, 1, Size(nodes)-2)\n        }\n        return nodes\n    }\n    conditions{\n        var app_id int\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\n        var id int\n        id = Int(AppParam(app_id,\"voting_sysparams_template_id\"))\n        if $TemplateId != id || $TemplateId <= 0 {\n            warning \"Template id not found\"\n        }\n        checkKeyId($KeyId)\n        checkPub($PubKey)\n        checkApiAddress($ApiAddress)\n        checkTcpAddress($TcpAddress)\n    }\n    \n    action{\n        var sep, nodes, value int\n        sep = \",\"\n        nodes = getNodesString()\n        if Size(nodes) == 0{\n            sep = \"\"\n        }\n        value = Sprintf(`{\"tcp_address\":\"%v\", \"api_address\":\"%v\", \"key_id\":\"%v\", \"public_key\":\"%v\"}`, $TcpAddress, $ApiAddress, $KeyId, $PubKey)\n        nodes = Sprintf(\"[%v%v%v]\", nodes, sep, value)\n        voting_TemplateRun(\"TemplateId,Start,End,EndTime,StartTime,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", $TemplateId, $Start, $End, $EndTime, $StartTime, 0, \"\", \"\", \"full_nodes\", nodes, \"\")\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "voting_TemplateStore",
            "Value": "contract voting_TemplateStore{\n    data{\n        Title string\n        TypeParticipants int\n        TypeVoting int\n        TypeDecision int\n        Volume int\n        Quorum int\n        Subject string\n        Voters string \"optional\" // role of participant\n        Candidates string \"optional\" // role of candidate\n        InitContract string \"optional\" // Execute before the vote\n        Vacancies int \"optional\"\n        ContractAccept string \"optional\"\n        ParamsAccept string \"optional\"\n        ContractReject string \"optional\"\n        ParamsReject string \"optional\"\n    }\n    \n    func conditions{\n        if $TypeParticipants == 3 {\n            if Size($Voters) == 0 || $Voters == \"NULL\" || $Voters == 0 {\n                warning \"Voters role not found\"\n            }\n        }\n        if Size($Title) <3 {\n            warning \"Please enter title\"\n        }\n        if $Volume <0 || $Volume > 100 {\n            warning \"Wrong volume range\"\n        }\n        if $Quorum <0 || $Quorum > 100 {\n            warning \"Wrong quorum range\"\n        }\n        \n        if $TypeDecision == 1 || $TypeDecision == 2 {\n            if $Vacancies < 1 {\n                warning \"Wrong number vacancies\"\n            }\n            if $Candidates == \"NULL\" || $Candidates == 0 || Size($Candidates) == 0 {\n                warning \"Wrong candidate role\"\n            }\n        }\n        \n        if Size($InitContract) > 0{\n            if GetContractByName($InitContract) == 0 {\n                warning \"Init Contract not found\"\n            }\n        }\n        if Size($ContractAccept) > 0{\n            if GetContractByName($ContractAccept) == 0 {\n                warning \"Contract for accepted decision not found\"\n            }\n        }\n        if Size($ContractReject) > 0{\n            if GetContractByName($ContractReject) == 0{\n                warning \"Contract for rejected decision not found\"\n            }\n        }\n    }\n    \n    func action{\n        $result = DBInsert(\"voting_templates\", \"title,subject,voters,candidates,init_contract,volume,quorum,type_voting,type_participants,type_decision,vacancies,contract_accept,accept_params,contract_reject,reject_params\", $Title, $Subject, $Voters, $Candidates, $InitContract, $Volume, $Quorum, $TypeVoting, $TypeParticipants, $TypeDecision, $Vacancies, $ContractAccept, $ParamsAccept, $ContractReject, $ParamsReject)\n        \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "tokenrefund_CheckCSSF",
            "Value": "contract tokenrefund_CheckCSSF{\r\n    conditions{\r\n        var isValid bool\r\n        if $role_id == 12 {\r\n            // Financial institution\r\n            isValid = true\r\n        }\r\n        if $role_id == 1 {\r\n            // Apla Consensus asbl\r\n            isValid = true\r\n        }\r\n        if !isValid {\r\n            error \"Condition is not valid\"\r\n        }\r\n    }\r\n    action{}\r\n}",
            "Conditions": "true"
        },
        {
            "Type": "contracts",
            "Name": "tokenrefund_AcceptCSSF",
            "Value": "contract tokenrefund_AcceptCSSF{\r\n    data{\r\n        Id string\r\n    }\r\n\r\n    conditions{\r\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n    }\r\n    action{\r\n        // admin Notification for transfering tokens\r\n        // Notification role id 1 == admin\r\n        var roleId closureType sender int\r\n        roleId = 1 // admin\r\n        closureType = 2 // multiple\r\n        sender = 1\r\n        var icon header body page string\r\n        icon = \"icon-envelope\"\r\n        header = \"tokenrefund: Accept decision\"\r\n        body = \"A vote for a return token is successfully completed\"\r\n        page = \"tokenrefund_accept\"\r\n        var params map\r\n        params[\"tokenrefund_id\"] = $Id\r\n\r\n        Notifications_Roles_Send_map(\"rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map\", roleId, closureType, sender, icon, header, body, page, params)\r\n    }\r\n}",
            "Conditions": "true"
        },
        {
            "Type": "contracts",
            "Name": "tokenrefund_AcceptAdminNotification",
            "Value": "contract tokenrefund_AcceptAdminNotification{\r\n    data{\r\n        Id string\r\n    }\r\n\r\n    conditions{\r\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n    }\r\n    action{\r\n        // admin Notification for transfering tokens\r\n        // Notification role id 1 == admin\r\n        var roleId closureType sender int\r\n        roleId = 1 // admin\r\n        closureType = 2 // multiple\r\n        sender = 1\r\n        var icon header body page string\r\n        icon = \"icon-envelope\"\r\n        header = \"tokenrefund: Accept decision\"\r\n        body = \"A vote for a return token is successfully completed\"\r\n        page = \"tokenrefund_accept\"\r\n        var params map\r\n        params[\"tokenrefund_id\"] = $Id\r\n\r\n        Notifications_Roles_Send_map(\"rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map\", roleId, closureType, sender, icon, header, body, page, params)\r\n    }\r\n}",
            "Conditions": "true"
        },
        {
            "Type": "languages",
            "Name": "APL_not_required",
            "Conditions": "",
            "Trans": "{\"en\":\"APL not required\",\"ru\":\"Не требуется наличие APL\"}"
        },
        {
            "Type": "languages",
            "Name": "APL_required",
            "Conditions": "",
            "Trans": "{\"en\":\"APL required\",\"ru\":\"Требуется наличие APL\"}"
        },
        {
            "Type": "languages",
            "Name": "accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Accept\", \"ru\": \"Принять\"}"
        },
        {
            "Type": "languages",
            "Name": "accept_request_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Accept the request of this member?\", \"ru\": \"Принять запрос этого члена?\"}"
        },
        {
            "Type": "languages",
            "Name": "accepted",
            "Conditions": "",
            "Trans": "{\"en\": \"Accepted\", \"ru\": \"Принят\"}"
        },
        {
            "Type": "languages",
            "Name": "account",
            "Conditions": "",
            "Trans": "{\"en\": \"Account\", \"ru\": \"Счет\"}"
        },
        {
            "Type": "languages",
            "Name": "accounts",
            "Conditions": "",
            "Trans": "{\"en\": \"Accounts\", \"ru\": \"Счета\"}"
        },
        {
            "Type": "languages",
            "Name": "actions",
            "Conditions": "",
            "Trans": "{\"en\": \"Actions\", \"ru\": \"Действия\"}"
        },
        {
            "Type": "languages",
            "Name": "active",
            "Conditions": "",
            "Trans": "{\"en\": \"Active\", \"ru\": \"Активно\"}"
        },
        {
            "Type": "languages",
            "Name": "add",
            "Conditions": "",
            "Trans": "{\"en\": \"Add\", \"ru\": \"Добавить\"}"
        },
        {
            "Type": "languages",
            "Name": "add_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Add member\", \"ru\": \"Добавить члена\"}"
        },
        {
            "Type": "languages",
            "Name": "add_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Add role\", \"ru\": \"Добавить роль\"}"
        },
        {
            "Type": "languages",
            "Name": "address",
            "Conditions": "",
            "Trans": "{\"en\": \"Address\"}"
        },
        {
            "Type": "languages",
            "Name": "admin",
            "Conditions": "",
            "Trans": "{\"en\":\"Administrator\",\"ru\":\"Администратор\"}"
        },
        {
            "Type": "languages",
            "Name": "admin_tools",
            "Conditions": "",
            "Trans": "{\"en\": \"Admin tools\", \"ru\": \"Инструменты администратора\"}"
        },
        {
            "Type": "languages",
            "Name": "agency",
            "Conditions": "",
            "Trans": "{\"en\": \"Agency\", \"ru\": \"Агенский\"}"
        },
        {
            "Type": "languages",
            "Name": "all",
            "Conditions": "",
            "Trans": "{\"en\": \"All\", \"ru\": \"Все\"}"
        },
        {
            "Type": "languages",
            "Name": "amount",
            "Conditions": "",
            "Trans": "{\"en\": \"Amount\", \"ru\": \"Сумма\"}"
        },
        {
            "Type": "languages",
            "Name": "apply",
            "Conditions": "",
            "Trans": "{\"en\": \"Apply\", \"ru\": \"Подать\"}"
        },
        {
            "Type": "languages",
            "Name": "appointed",
            "Conditions": "",
            "Trans": "{\"en\": \"Appointed\", \"ru\": \"Назначен\"}"
        },
        {
            "Type": "languages",
            "Name": "appointment_impossible",
            "Conditions": "",
            "Trans": "{\"ru\":\"*Эта роль не является назначаемой. Назначение членов невозможно\",\"en\":\"*This role is not assignable. The appointment of members is impossible\"}"
        },
        {
            "Type": "languages",
            "Name": "arguments",
            "Conditions": "",
            "Trans": "{\"en\": \"Arguments\", \"ru\": \"Аргументы\"}"
        },
        {
            "Type": "languages",
            "Name": "assign",
            "Conditions": "",
            "Trans": "{\"en\": \"Assign\", \"ru\": \"Назначить\"}"
        },
        {
            "Type": "languages",
            "Name": "assigned",
            "Conditions": "",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначен\"}"
        },
        {
            "Type": "languages",
            "Name": "assigned_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначаемая\"}"
        },
        {
            "Type": "languages",
            "Name": "at",
            "Conditions": "",
            "Trans": "{\"en\": \"at\", \"ru\": \"в\"}"
        },
        {
            "Type": "languages",
            "Name": "attention",
            "Conditions": "",
            "Trans": "{\"en\": \"ATTENTION! The page has not received parameters and is unavailable for viewing.\", \"ru\": \"ВНИМАНИЕ! Страница не получила параметров и не доступна для просмотра.\"}"
        },
        {
            "Type": "languages",
            "Name": "available",
            "Conditions": "",
            "Trans": "{\"en\":\"Available\",\"ru\":\"Доступно\"}"
        },
        {
            "Type": "languages",
            "Name": "avatar",
            "Conditions": "",
            "Trans": "{\"en\": \"Avatar\", \"ru\": \"Фото\"}"
        },
        {
            "Type": "languages",
            "Name": "back",
            "Conditions": "",
            "Trans": "{\"en\":\"Back\",\"ar\":\"قب\"}"
        },
        {
            "Type": "languages",
            "Name": "balance",
            "Conditions": "",
            "Trans": "{\"en\": \"Balance\", \"ru\": \"Баланс\"}"
        },
        {
            "Type": "languages",
            "Name": "begin",
            "Conditions": "",
            "Trans": "{\"en\": \"Begin\", \"ru\": \"Начать\"}"
        },
        {
            "Type": "languages",
            "Name": "birthdate",
            "Conditions": "",
            "Trans": "{\"en\": \"Birthdate\", \"ru\": \"Дата рождения\"}"
        },
        {
            "Type": "languages",
            "Name": "blocked_at",
            "Conditions": "",
            "Trans": "{\"en\": \"Date of lock\", \"ru\": \"Дата блокировки\"}"
        },
        {
            "Type": "languages",
            "Name": "body_text",
            "Conditions": "",
            "Trans": "{\"en\":\"Text\",\"ru\":\"Текст\"}"
        },
        {
            "Type": "languages",
            "Name": "business",
            "Conditions": "",
            "Trans": "{\"en\":\"Business\",\"ru\":\"Бизнес\"}"
        },
        {
            "Type": "languages",
            "Name": "can_apply_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"You can apply for voting\", \"ru\": \"Вы можете подать заявку на голосование\"}"
        },
        {
            "Type": "languages",
            "Name": "candidates",
            "Conditions": "",
            "Trans": "{\"en\": \"Candidates\", \"ru\": \"Кандидаты\"}"
        },
        {
            "Type": "languages",
            "Name": "candidates_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Candidates role\", \"ru\": \"Роль кандидатов\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems",
            "Conditions": "",
            "Trans": "{\"en\":\"Catalog of ecosystems\",\"ru\":\"Каталог экосистем\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems_conditions",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem conditions and procedure for accession\",\"ru\":\"Условия и порядок присоединения к экосистеме\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems_contact_email",
            "Conditions": "",
            "Trans": "{\"en\":\"Contact e-mail\",\"ru\":\"Почта для контактов\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems_contact_phone",
            "Conditions": "",
            "Trans": "{\"en\":\"Contact phone\",\"ru\":\"Контактный телефон\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems_contact_vde_page",
            "Conditions": "",
            "Trans": "{\"en\":\"Web site\",\"ru\":\"Веб сайт\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems_description",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem hardware description\",\"ru\":\"Описание оборудования экосистемы\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems_form",
            "Conditions": "",
            "Trans": "{\"en\":\"Add ecosystem to Catalog\",\"ru\":\"Добавить экосистему в каталог\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems_freetype",
            "Conditions": "",
            "Trans": "{\"en\":\"Availability of own funds for entry\",\"ru\":\"Наличие собственных средств для вступления\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems_logo",
            "Conditions": "",
            "Trans": "{\"en\":\"Logotype image\",\"ru\":\"Изображение логотипа\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems_name",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem name in the Catalog\",\"ru\":\"Имя экосистемы в Каталоге\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems_number",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem\",\"ru\":\"Экосистема\"}"
        },
        {
            "Type": "languages",
            "Name": "catalog_ecosystems_type",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem type\",\"ru\":\"Тип экосистемы\"}"
        },
        {
            "Type": "languages",
            "Name": "change",
            "Conditions": "",
            "Trans": "{\"en\": \"Change\", \"ru\": \"Изменить\"}"
        },
        {
            "Type": "languages",
            "Name": "check_expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"Check expiration\", \"ru\": \"Проверить истечение\"}"
        },
        {
            "Type": "languages",
            "Name": "close",
            "Conditions": "",
            "Trans": "{\"en\": \"Close\", \"ru\": \"Закрыть\"}"
        },
        {
            "Type": "languages",
            "Name": "closure_type",
            "Conditions": "",
            "Trans": "{\"en\": \"Closure type\", \"ru\": \"Тип закрытия\"}"
        },
        {
            "Type": "languages",
            "Name": "column_name",
            "Conditions": "",
            "Trans": "{\"en\": \"Column name\", \"ru\": \"Название столбца\"}"
        },
        {
            "Type": "languages",
            "Name": "column_name_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Column name to which the value will be written (Example: onhold)\", \"ru\": \"Название столбца, в который будет записано значение (Пример: onhold)\"}"
        },
        {
            "Type": "languages",
            "Name": "comment",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Comment\",\n    \"ru\": \"Комментарий\"\n}"
        },
        {
            "Type": "languages",
            "Name": "commission_address",
            "Conditions": "",
            "Trans": "{\"en\":\"Account address\",\"ru\":\"Адрес аккаунта\"}"
        },
        {
            "Type": "languages",
            "Name": "commission_pub",
            "Conditions": "",
            "Trans": "{\"en\":\"Account public key\",\"ru\":\"Публичный ключ аккаунта\"}"
        },
        {
            "Type": "languages",
            "Name": "companies",
            "Conditions": "",
            "Trans": "{\"en\":\"Companies\",\"ru\":\"Компании\"}"
        },
        {
            "Type": "languages",
            "Name": "company",
            "Conditions": "",
            "Trans": "{\"en\": \"Company\", \"ru\": \"Компания\"}"
        },
        {
            "Type": "languages",
            "Name": "company_add",
            "Conditions": "",
            "Trans": "{\"en\":\"Add company\",\"ru\":\"Добавить компанию\"}"
        },
        {
            "Type": "languages",
            "Name": "company_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Company role\",\"ru\":\"Роль компании\"}"
        },
        {
            "Type": "languages",
            "Name": "confirmation",
            "Conditions": "",
            "Trans": "{\"en\":\"Confirmation\",\"ru\":\"Подтверждение\"}"
        },
        {
            "Type": "languages",
            "Name": "contract",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract\", \"ru\": \"Контракт\"}"
        },
        {
            "Type": "languages",
            "Name": "contract_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract of accept\", \"ru\": \"Контракт при принятии\"}"
        },
        {
            "Type": "languages",
            "Name": "contract_accept_des",
            "Conditions": "",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is accepted\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет одобрено\"}"
        },
        {
            "Type": "languages",
            "Name": "contract_accepted",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract accept\", \"ru\": \"Контракт принят\"}"
        },
        {
            "Type": "languages",
            "Name": "contract_params_des",
            "Conditions": "",
            "Trans": "{\"ru\":\"Строка в формате JSON\",\"en\":\"String in JSON format\"}"
        },
        {
            "Type": "languages",
            "Name": "contract_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract of reject\", \"ru\": \"Контракт при отклонении\"}"
        },
        {
            "Type": "languages",
            "Name": "contract_reject_des",
            "Conditions": "",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is rejected\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет отклонено\"}"
        },
        {
            "Type": "languages",
            "Name": "contract_rejected",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract reject\", \"ru\": \"Контракт отклонен\"}"
        },
        {
            "Type": "languages",
            "Name": "contracts",
            "Conditions": "",
            "Trans": "{\"en\": \"Contracts\", \"ru\": \"Контракты\"}"
        },
        {
            "Type": "languages",
            "Name": "copy",
            "Conditions": "",
            "Trans": "{\"en\": \"Copy\", \"ru\": \"Копировать\"}"
        },
        {
            "Type": "languages",
            "Name": "create",
            "Conditions": "",
            "Trans": "{\"en\": \"Create\", \"ru\": \"Создать\"}"
        },
        {
            "Type": "languages",
            "Name": "create_account",
            "Conditions": "",
            "Trans": "{\"en\": \"Create account\", \"ru\": \"Создать счет\"}"
        },
        {
            "Type": "languages",
            "Name": "created",
            "Conditions": "",
            "Trans": "{\"en\": \"Created\", \"ru\": \"Создан\"}"
        },
        {
            "Type": "languages",
            "Name": "creator",
            "Conditions": "",
            "Trans": "{\"en\": \"Creator\", \"ru\": \"Кто создал\"}"
        },
        {
            "Type": "languages",
            "Name": "dashboard",
            "Conditions": "",
            "Trans": "{\"en\": \"Dashboard\", \"ru\": \"Приборная панель\"}"
        },
        {
            "Type": "languages",
            "Name": "date_created",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Date created\",\n    \"ru\": \"Дата создания\"\n}"
        },
        {
            "Type": "languages",
            "Name": "date_end",
            "Conditions": "",
            "Trans": "{\"en\": \"Date end\", \"ru\": \"Дата окончания\"}"
        },
        {
            "Type": "languages",
            "Name": "date_start",
            "Conditions": "",
            "Trans": "{\"en\": \"Date start\", \"ru\": \"Дата начала\"}"
        },
        {
            "Type": "languages",
            "Name": "decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision\", \"ru\": \"Решение\"}"
        },
        {
            "Type": "languages",
            "Name": "decision_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision accept\", \"ru\": \"Решение одобрено\"}"
        },
        {
            "Type": "languages",
            "Name": "decision_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision reject\", \"ru\": \"Решение отклонено\"}"
        },
        {
            "Type": "languages",
            "Name": "delete_node",
            "Conditions": "",
            "Trans": "{\"en\": \"Delete node\", \"ru\": \"Удалить узел\"}"
        },
        {
            "Type": "languages",
            "Name": "delete_node_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"The owner of the validating node can remove it from the list without a vote. Your key_id were found in the list of node owners and you can delete your entry at any time\", \"ru\": \"Владелец валидирующего узла может удалить его из списка без голосования. Ваш key_id был найден в списке владельцев узлов и вы можете удалить свою запись в любое время\"}"
        },
        {
            "Type": "languages",
            "Name": "deleted",
            "Conditions": "",
            "Trans": "{\"en\": \"Deleted\", \"ru\": \"Удалено\"}"
        },
        {
            "Type": "languages",
            "Name": "description",
            "Conditions": "",
            "Trans": "{\"en\": \"Description\", \"ru\": \"Описание\"}"
        },
        {
            "Type": "languages",
            "Name": "description_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Text description of the subject of voting\", \"ru\": \"Текстовое описание предмета голосования\"}"
        },
        {
            "Type": "languages",
            "Name": "description_equipment",
            "Conditions": "",
            "Trans": "{\"en\":\"Description equipment\",\"ru\":\"Описание оборудования\"}"
        },
        {
            "Type": "languages",
            "Name": "did_not_vote",
            "Conditions": "",
            "Trans": "{\"en\": \"Did not vote\", \"ru\": \"Не голосовал\"}"
        },
        {
            "Type": "languages",
            "Name": "document_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Document accept\", \"ru\": \"Документ одобрен\"}"
        },
        {
            "Type": "languages",
            "Name": "document_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Document reject\", \"ru\": \"Документ отклонен\"}"
        },
        {
            "Type": "languages",
            "Name": "ecosystem_number",
            "Conditions": "",
            "Trans": "{\"en\":\"Number\",\"ru\":\"Номер\"}"
        },
        {
            "Type": "languages",
            "Name": "edit",
            "Conditions": "",
            "Trans": "{\"en\":\"Edit\",\"ru\":\"Редактировать\"}"
        },
        {
            "Type": "languages",
            "Name": "editing_profile",
            "Conditions": "",
            "Trans": "{\"en\": \"Editing profile\", \"ru\": \"Редактирование профиля\"}"
        },
        {
            "Type": "languages",
            "Name": "elective",
            "Conditions": "",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выбран\"}"
        },
        {
            "Type": "languages",
            "Name": "elective_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выборная\"}"
        },
        {
            "Type": "languages",
            "Name": "email",
            "Conditions": "",
            "Trans": "{\"en\": \"Email\", \"ru\": \"Почта\"}"
        },
        {
            "Type": "languages",
            "Name": "emission",
            "Conditions": "",
            "Trans": "{\"en\": \"Emission\", \"ru\": \"Эмиссия\"}"
        },
        {
            "Type": "languages",
            "Name": "emission_account_not_found",
            "Conditions": "",
            "Trans": "{\"en\":\"System emission account is not found\",\"ru\":\"Системный эмиссионный счет не найден\"}"
        },
        {
            "Type": "languages",
            "Name": "empty",
            "Conditions": "",
            "Trans": "{\"en\": \"[no]\", \"ru\": \"[нет]\"}"
        },
        {
            "Type": "languages",
            "Name": "execute",
            "Conditions": "",
            "Trans": "{\"en\": \"Execute\", \"ru\": \"Выполнить\"}"
        },
        {
            "Type": "languages",
            "Name": "expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"Expiration\", \"ru\": \"Окончание\"}"
        },
        {
            "Type": "languages",
            "Name": "expiration_only_visitor",
            "Conditions": "",
            "Trans": "{\"en\": \"Expiration only for visitor\", \"ru\": \"Окончание только для посетителя\"}"
        },
        {
            "Type": "languages",
            "Name": "expired",
            "Conditions": "",
            "Trans": "{\"en\": \"Expired\", \"ru\": \"Истекло\"}"
        },
        {
            "Type": "languages",
            "Name": "female",
            "Conditions": "",
            "Trans": "{\"en\": \"Female\", \"ru\": \"Женский\"}"
        },
        {
            "Type": "languages",
            "Name": "filled",
            "Conditions": "",
            "Trans": "{\"en\": \"Filled\", \"ru\": \"Заполнено\"}"
        },
        {
            "Type": "languages",
            "Name": "finance",
            "Conditions": "",
            "Trans": "{\"en\":\"Finance\",\"ru\":\"Финансы\"}"
        },
        {
            "Type": "languages",
            "Name": "finished",
            "Conditions": "",
            "Trans": "{\"en\": \"Finished\", \"ru\": \"Завершено\"}"
        },
        {
            "Type": "languages",
            "Name": "freetype",
            "Conditions": "",
            "Trans": "{\"en\":\"Pay type\",\"ru\":\"Тип оплаты\"}"
        },
        {
            "Type": "languages",
            "Name": "gender",
            "Conditions": "",
            "Trans": "{\"en\": \"Gender\", \"ru\": \"Пол\"}"
        },
        {
            "Type": "languages",
            "Name": "group_person",
            "Conditions": "",
            "Trans": "{\"en\":\"Group of person\",\"ru\":\"Группа персон\"}"
        },
        {
            "Type": "languages",
            "Name": "header",
            "Conditions": "",
            "Trans": "{\"en\": \"Header\", \"ru\": \"Заголовок\"}"
        },
        {
            "Type": "languages",
            "Name": "host_ip",
            "Conditions": "",
            "Trans": "{\"en\":\"IP\",\"ru\":\"IP\"}"
        },
        {
            "Type": "languages",
            "Name": "icon",
            "Conditions": "",
            "Trans": "{\"en\": \"Icon\", \"ru\": \"Иконка\"}"
        },
        {
            "Type": "languages",
            "Name": "id",
            "Conditions": "",
            "Trans": "{\"en\": \"ID\", \"ru\": \"ID\"}"
        },
        {
            "Type": "languages",
            "Name": "image",
            "Conditions": "",
            "Trans": "{\"ru\":\"Изображение\",\"en\":\"Image\"}"
        },
        {
            "Type": "languages",
            "Name": "impossible",
            "Conditions": "",
            "Trans": "{\"en\": \"Impossible\", \"ru\": \"Не возможно\"}"
        },
        {
            "Type": "languages",
            "Name": "include_in_role",
            "Conditions": "",
            "Trans": "{\"en\":\"YES - Include a member in the role\",\"ru\":\"ДА - Включить члена в роль\"}"
        },
        {
            "Type": "languages",
            "Name": "information",
            "Conditions": "",
            "Trans": "{\"en\":\"Information\",\"ru\":\"Информация\"}"
        },
        {
            "Type": "languages",
            "Name": "init_condition",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Initiate process condition\",\n    \"ru\": \"Условие для начала процесса\"\n}"
        },
        {
            "Type": "languages",
            "Name": "init_contract",
            "Conditions": "",
            "Trans": "{\"en\": \"The initial contract\", \"ru\": \"Инициализирующий контракт\"}"
        },
        {
            "Type": "languages",
            "Name": "institution",
            "Conditions": "",
            "Trans": "{\"en\":\"Institution\",\"ru\":\"Учреждение\"}"
        },
        {
            "Type": "languages",
            "Name": "limited",
            "Conditions": "",
            "Trans": "{\"en\": \"Limited\", \"ru\": \"Ограничены\"}"
        },
        {
            "Type": "languages",
            "Name": "lists_of_roles",
            "Conditions": "",
            "Trans": "{\"en\": \"Lists of roles and\", \"ru\": \"Список ролей и\"}"
        },
        {
            "Type": "languages",
            "Name": "logo",
            "Conditions": "",
            "Trans": "{\"en\":\"Logo\",\"ru\":\"Лого\"}"
        },
        {
            "Type": "languages",
            "Name": "male",
            "Conditions": "",
            "Trans": "{\"en\": \"Male\", \"ru\": \"Мужской\"}"
        },
        {
            "Type": "languages",
            "Name": "member",
            "Conditions": "",
            "Trans": "{\"en\": \"Member\", \"ru\": \"Член\"}"
        },
        {
            "Type": "languages",
            "Name": "member_id",
            "Conditions": "",
            "Trans": "{\"en\": \"Member ID\", \"ru\": \"ID члена\"}"
        },
        {
            "Type": "languages",
            "Name": "member_image",
            "Conditions": "",
            "Trans": "{\"en\":\"Avatar\",\"ru\":\"Фото\"}"
        },
        {
            "Type": "languages",
            "Name": "member_name",
            "Conditions": "",
            "Trans": "{\"en\":\"Member name\",\"ru\":\"Никнейм\"}"
        },
        {
            "Type": "languages",
            "Name": "members",
            "Conditions": "",
            "Trans": "{\"en\": \"Members\", \"ru\": \"Члены\"}"
        },
        {
            "Type": "languages",
            "Name": "membership",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership\", \"ru\": \"Членство\"}"
        },
        {
            "Type": "languages",
            "Name": "membership_management",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership management and\", \"ru\": \"Управление членами и\"}"
        },
        {
            "Type": "languages",
            "Name": "membership_request_accept",
            "Conditions": "",
            "Trans": "{\"ru\":\"Вы хотите принять этот запрос?\",\"en\":\"Do you want to accept this request?\"}"
        },
        {
            "Type": "languages",
            "Name": "membership_request_reject",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to reject this request?\",\"ru\":\"Вы хотите отклонить этот запрос?\"}"
        },
        {
            "Type": "languages",
            "Name": "membership_requests",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership requests\", \"ru\": \"Запросы на членство\"}"
        },
        {
            "Type": "languages",
            "Name": "membership_roles_notifications",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership, roles, notifications\", \"ru\": \"Членство, роли, уведомления\"}"
        },
        {
            "Type": "languages",
            "Name": "multiple",
            "Conditions": "",
            "Trans": "{\"en\": \"Multiple\", \"ru\": \"Множественные\"}"
        },
        {
            "Type": "languages",
            "Name": "my_account",
            "Conditions": "",
            "Trans": "{\"en\": \"My account\", \"ru\": \"Мой счет\"}"
        },
        {
            "Type": "languages",
            "Name": "name",
            "Conditions": "",
            "Trans": "{\"en\": \"Name\", \"ru\": \"Название\"}"
        },
        {
            "Type": "languages",
            "Name": "name_first",
            "Conditions": "",
            "Trans": "{\"en\": \"First name\", \"ru\": \"Имя\"}"
        },
        {
            "Type": "languages",
            "Name": "name_last",
            "Conditions": "",
            "Trans": "{\"en\": \"Last name\", \"ru\": \"Фамилия\"}"
        },
        {
            "Type": "languages",
            "Name": "name_middle",
            "Conditions": "",
            "Trans": "{\"en\": \"Middle name\", \"ru\": \"Отчество\"}"
        },
        {
            "Type": "languages",
            "Name": "need_fuel",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Need APL\",\n    \"ru\": \"Нужно APL\"\n}"
        },
        {
            "Type": "languages",
            "Name": "new_ecosystem",
            "Conditions": "",
            "Trans": "{\"en\":\"New ecosystem\",\"ru\":\"Создать экосистему\"}"
        },
        {
            "Type": "languages",
            "Name": "new_role",
            "Conditions": "",
            "Trans": "{\"en\": \"New role\", \"ru\": \"Новая роль\"}"
        },
        {
            "Type": "languages",
            "Name": "new_template",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"New template\",\n    \"ru\": \"Новый шаблон\"\n}"
        },
        {
            "Type": "languages",
            "Name": "new_value",
            "Conditions": "",
            "Trans": "{\"en\": \"New value\", \"ru\": \"Новое значение\"}"
        },
        {
            "Type": "languages",
            "Name": "new_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"New voting\", \"ru\": \"Новое голосование\"}"
        },
        {
            "Type": "languages",
            "Name": "next",
            "Conditions": "",
            "Trans": "{\"en\":\"Next\",\"ar\":\"يل\"}"
        },
        {
            "Type": "languages",
            "Name": "no",
            "Conditions": "",
            "Trans": "{\"en\":\"No\",\"ru\":\"Нет\"}"
        },
        {
            "Type": "languages",
            "Name": "no_expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"No expiration\", \"ru\": \"Без окончания\"}"
        },
        {
            "Type": "languages",
            "Name": "no_include_in_role",
            "Conditions": "",
            "Trans": "{\"en\":\"NO - Do not include a member in the role\",\"ru\":\"НЕТ - Не включать члена в роль\"}"
        },
        {
            "Type": "languages",
            "Name": "not_enough_votes",
            "Conditions": "",
            "Trans": "{\"en\": \"Not enough votes\", \"ru\": \"Недостаточно голосов\"}"
        },
        {
            "Type": "languages",
            "Name": "not_need_fuel",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Not need APL\",\n    \"ru\": \"Не нужно APL\"\n}"
        },
        {
            "Type": "languages",
            "Name": "not_started",
            "Conditions": "",
            "Trans": "{\"ru\":\"Не начата\",\"en\":\"Not started\"}"
        },
        {
            "Type": "languages",
            "Name": "notification_sender_member",
            "Conditions": "",
            "Trans": "{\"en\":\"Send from member\",\"ru\":\"Отправить от члена\"}"
        },
        {
            "Type": "languages",
            "Name": "notification_sender_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Send from role\",\"ru\":\"Отправить от роли\"}"
        },
        {
            "Type": "languages",
            "Name": "notifications",
            "Conditions": "",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}"
        },
        {
            "Type": "languages",
            "Name": "notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}"
        },
        {
            "Type": "languages",
            "Name": "num_members",
            "Conditions": "",
            "Trans": "{\"en\": \"Number of members\", \"ru\": \"Количество членов\"}"
        },
        {
            "Type": "languages",
            "Name": "onhold",
            "Conditions": "",
            "Trans": "{\"en\": \"onHold\", \"ru\": \"Закрыт\"}"
        },
        {
            "Type": "languages",
            "Name": "only_if_role_type",
            "Conditions": "",
            "Trans": "{\"en\":\"Only if role type -> Company role. For all other types is not used\",\"ru\":\"Только если тип роли - Роль компании. Для всех других типов не используется\"}"
        },
        {
            "Type": "languages",
            "Name": "optional",
            "Conditions": "",
            "Trans": "{\"en\": \"[Optional]\", \"ru\": \"[Необязательный]\"}"
        },
        {
            "Type": "languages",
            "Name": "organization",
            "Conditions": "",
            "Trans": "{\"en\":\"Organization\",\"ru\":\"Организация\"}"
        },
        {
            "Type": "languages",
            "Name": "page",
            "Conditions": "",
            "Trans": "{\"en\":\"Page\",\"ru\":\"Страница\"}"
        },
        {
            "Type": "languages",
            "Name": "page_name",
            "Conditions": "",
            "Trans": "{\"en\":\"Page\",\"ru\":\"Страница\"}"
        },
        {
            "Type": "languages",
            "Name": "params",
            "Conditions": "",
            "Trans": "{\"en\":\"Parameters\",\"ru\":\"Параметры\"}"
        },
        {
            "Type": "languages",
            "Name": "participants",
            "Conditions": "",
            "Trans": "{\"en\": \"Participants\", \"ru\": \"Участники\"}"
        },
        {
            "Type": "languages",
            "Name": "participants_add",
            "Conditions": "",
            "Trans": "{\"en\": \"Add participants\", \"ru\": \"Добавить участников\"}"
        },
        {
            "Type": "languages",
            "Name": "pending_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Pending notifications\", \"ru\": \"Ожидающие уведомления\"}"
        },
        {
            "Type": "languages",
            "Name": "person",
            "Conditions": "",
            "Trans": "{\"en\": \"Person\", \"ru\": \"Персональный\"}"
        },
        {
            "Type": "languages",
            "Name": "phone",
            "Conditions": "",
            "Trans": "{\"en\": \"Phone\", \"ru\": \"Телефон\"}"
        },
        {
            "Type": "languages",
            "Name": "possible",
            "Conditions": "",
            "Trans": "{\"en\": \"Possible\", \"ru\": \"Возможно\"}"
        },
        {
            "Type": "languages",
            "Name": "processing",
            "Conditions": "",
            "Trans": "{\"en\": \"Processing\", \"ru\": \"Обработка\"}"
        },
        {
            "Type": "languages",
            "Name": "profile",
            "Conditions": "",
            "Trans": "{\"en\": \"Profile\", \"ru\": \"Профиль\"}"
        },
        {
            "Type": "languages",
            "Name": "progress",
            "Conditions": "",
            "Trans": "{\"en\": \"Progress\", \"ru\": \"Прогресс\"}"
        },
        {
            "Type": "languages",
            "Name": "pub_key",
            "Conditions": "",
            "Trans": "{\"en\":\"Public key\",\"ru\":\"Публичный ключ\"}"
        },
        {
            "Type": "languages",
            "Name": "public_org",
            "Conditions": "",
            "Trans": "{\"en\":\"Public organization\",\"ru\":\"Публичная организация\"}"
        },
        {
            "Type": "languages",
            "Name": "quorum",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Quorum\",\n    \"ru\": \"Кворум\"\n}"
        },
        {
            "Type": "languages",
            "Name": "recipient",
            "Conditions": "",
            "Trans": "{\"en\": \"Recipient\", \"ru\": \"Получатель\"}"
        },
        {
            "Type": "languages",
            "Name": "recipient_account",
            "Conditions": "",
            "Trans": "{\"en\": \"Recipient account\", \"ru\": \"Счет получателя\"}"
        },
        {
            "Type": "languages",
            "Name": "reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Reject\", \"ru\": \"Отклонить\"}"
        },
        {
            "Type": "languages",
            "Name": "rejected",
            "Conditions": "",
            "Trans": "{\"en\": \"Rejected\", \"ru\": \"Отклонено\"}"
        },
        {
            "Type": "languages",
            "Name": "request",
            "Conditions": "",
            "Trans": "{\"en\": \"Request\", \"ru\": \"Запрос\"}"
        },
        {
            "Type": "languages",
            "Name": "request_accepted",
            "Conditions": "",
            "Trans": "{\"en\":\"Request was approved\",\"ru\":\"Запрос был одобрен\"}"
        },
        {
            "Type": "languages",
            "Name": "request_info",
            "Conditions": "",
            "Trans": "{\"en\":\"Request info\",\"ru\":\"Информация о запросе\"}"
        },
        {
            "Type": "languages",
            "Name": "request_membership",
            "Conditions": "",
            "Trans": "{\"ru\":\"Запрос членства\",\"en\":\"Request for membership\"}"
        },
        {
            "Type": "languages",
            "Name": "request_not_sent",
            "Conditions": "",
            "Trans": "{\"ru\":\"Запрос не отправлялся\",\"en\":\"Request not sent\"}"
        },
        {
            "Type": "languages",
            "Name": "request_refund",
            "Conditions": "",
            "Trans": "{\"en\": \"To request a refund\", \"ru\": \"Запросить возврат средств\"}"
        },
        {
            "Type": "languages",
            "Name": "request_rejected",
            "Conditions": "",
            "Trans": "{\"en\":\"Request was rejected\",\"ru\":\"Запрос был отклонен\"}"
        },
        {
            "Type": "languages",
            "Name": "request_wating",
            "Conditions": "",
            "Trans": "{\"en\":\"Request has been sent. Wait for administrator's decision\",\"ru\":\"Запрос отправлен. Ожидайте решение\"}"
        },
        {
            "Type": "languages",
            "Name": "required_logo",
            "Conditions": "",
            "Trans": "{\"en\":\"Required logo\",\"ru\":\"Требуется логотип\"}"
        },
        {
            "Type": "languages",
            "Name": "resign",
            "Conditions": "",
            "Trans": "{\"en\": \"Resign\", \"ru\": \"В отставку\"}"
        },
        {
            "Type": "languages",
            "Name": "result",
            "Conditions": "",
            "Trans": "{\"en\": \"Result\", \"ru\": \"Результат\"}"
        },
        {
            "Type": "languages",
            "Name": "right_sign",
            "Conditions": "",
            "Trans": "{\"en\":\"Signature right\",\"ru\":\"Право подписи\"}"
        },
        {
            "Type": "languages",
            "Name": "right_sign_no",
            "Conditions": "",
            "Trans": "{\"en\":\"No signature right\",\"ru\":\"Нет права подписи\"}"
        },
        {
            "Type": "languages",
            "Name": "right_sign_yes",
            "Conditions": "",
            "Trans": "{\"en\":\"Have signature rights\",\"ru\":\"Имеет право подписи\"}"
        },
        {
            "Type": "languages",
            "Name": "role",
            "Conditions": "",
            "Trans": "{\"en\": \"Role\", \"ru\": \"Роль\"}"
        },
        {
            "Type": "languages",
            "Name": "role_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Role notifications\", \"ru\": \"Ролевые уведомления\"}"
        },
        {
            "Type": "languages",
            "Name": "roles",
            "Conditions": "",
            "Trans": "{\"en\": \"Roles\", \"ru\": \"Роли\"}"
        },
        {
            "Type": "languages",
            "Name": "rollback",
            "Conditions": "",
            "Trans": "{\"en\": \"Rollback\", \"ru\": \"Откат\"}"
        },
        {
            "Type": "languages",
            "Name": "row_id",
            "Conditions": "",
            "Trans": "{\"en\": \"Row ID\", \"ru\": \"ID строки\"}"
        },
        {
            "Type": "languages",
            "Name": "row_id_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Row ID to which the value will be written (Example: 14)\", \"ru\": \"ID строки, в которую будет записано значение (Пример: 14)\"}"
        },
        {
            "Type": "languages",
            "Name": "save",
            "Conditions": "",
            "Trans": "{\"en\": \"Save\", \"ru\": \"Сохранить\"}"
        },
        {
            "Type": "languages",
            "Name": "select_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Select a member to add\", \"ru\": \"Укажите члена, чтобы добавить\"}"
        },
        {
            "Type": "languages",
            "Name": "select_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Select a role to add all members of this role\", \"ru\": \"Выберите роль, чтобы добавить всех участников этой роли\"}"
        },
        {
            "Type": "languages",
            "Name": "select_role_if_include",
            "Conditions": "",
            "Trans": "{\"ru\":\"Выберите роль, если вы хотите включить члена в роль\",\"en\":\"Select a role if you want to include a member in the role\"}"
        },
        {
            "Type": "languages",
            "Name": "send",
            "Conditions": "",
            "Trans": "{\"en\": \"Send\", \"ru\": \"Отправить\"}"
        },
        {
            "Type": "languages",
            "Name": "sender",
            "Conditions": "",
            "Trans": "{\"en\": \"Sender\", \"ru\": \"Отправитель\"}"
        },
        {
            "Type": "languages",
            "Name": "sender_account",
            "Conditions": "",
            "Trans": "{\"en\":\"Sender account\",\"ru\":\"Счет отправителя\"}"
        },
        {
            "Type": "languages",
            "Name": "sent",
            "Conditions": "",
            "Trans": "{\"ru\":\"Отправлено\",\"en\":\"Sent\"}"
        },
        {
            "Type": "languages",
            "Name": "single",
            "Conditions": "",
            "Trans": "{\"en\": \"Single\", \"ru\": \"Одиночные\"}"
        },
        {
            "Type": "languages",
            "Name": "single_and_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Single and Role\", \"ru\": \"Одиночные и ролевые\"}"
        },
        {
            "Type": "languages",
            "Name": "single_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Single notifications\", \"ru\": \"Одиночные уведомления\"}"
        },
        {
            "Type": "languages",
            "Name": "start",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Start\",\n    \"ru\": \"Начать\"\n}"
        },
        {
            "Type": "languages",
            "Name": "start_refund",
            "Conditions": "",
            "Trans": "{\"en\": \"To start the refund\", \"ru\": \"Начать возврат средств\"}"
        },
        {
            "Type": "languages",
            "Name": "started",
            "Conditions": "",
            "Trans": "{\"en\": \"Started\", \"ru\": \"Начато\"}"
        },
        {
            "Type": "languages",
            "Name": "status",
            "Conditions": "",
            "Trans": "{\"en\": \"Status\", \"ru\": \"Статус\"}"
        },
        {
            "Type": "languages",
            "Name": "subject_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"Subject of voting\", \"ru\": \"Предмет голосования\"}"
        },
        {
            "Type": "languages",
            "Name": "subject_voting_edit",
            "Conditions": "",
            "Trans": "{\"en\": \"Edit subject of voting\", \"ru\": \"Редактировать предмет голосования\"}"
        },
        {
            "Type": "languages",
            "Name": "success",
            "Conditions": "",
            "Trans": "{\"en\": \"Success\", \"ru\": \"Успешно\"}"
        },
        {
            "Type": "languages",
            "Name": "sure_want_delete",
            "Conditions": "",
            "Trans": "{\"ru\":\"Вы уверены что хотите удалить?\",\"en\":\"Are you sure you want to delete?\"}"
        },
        {
            "Type": "languages",
            "Name": "sys_emission",
            "Conditions": "",
            "Trans": "{\"en\":\"sys-emission\",\"ru\":\"Эмиссия (системный)\"}"
        },
        {
            "Type": "languages",
            "Name": "sys_trash",
            "Conditions": "",
            "Trans": "{\"en\":\"sys-trash\",\"ru\":\"Корзина (системный)\"}"
        },
        {
            "Type": "languages",
            "Name": "sysparams_candidate_validators_form",
            "Conditions": "",
            "Trans": "{\"en\":\"Request form of candidate for validators\",\"ru\":\"Форма запроса кандидата в валидаторы\"}"
        },
        {
            "Type": "languages",
            "Name": "sysparams_candidates",
            "Conditions": "",
            "Trans": "{\"en\":\"Candidate for validators\",\"ru\":\"Кандидаты в валидаторы\"}"
        },
        {
            "Type": "languages",
            "Name": "sysparams_candidates_list",
            "Conditions": "",
            "Trans": "{\"en\":\"Candidate for validators list\",\"ru\":\"Список кандидатов в валидаторы\"}"
        },
        {
            "Type": "languages",
            "Name": "sysparams_ecos",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystems list\",\"ru\":\"Список экосистем\"}"
        },
        {
            "Type": "languages",
            "Name": "sysparams_list",
            "Conditions": "",
            "Trans": "{\"en\":\"System parameters list\",\"ru\":\"Список системных параметров\"}"
        },
        {
            "Type": "languages",
            "Name": "system_params",
            "Conditions": "",
            "Trans": "{\"en\":\"System parameters\",\"ru\":\"Системные параметры\"}"
        },
        {
            "Type": "languages",
            "Name": "system_role",
            "Conditions": "",
            "Trans": "{\"en\":\"System\",\"ru\":\"Системная\"}"
        },
        {
            "Type": "languages",
            "Name": "system_tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"System of tokens\", \"ru\": \"Система токенов\"}"
        },
        {
            "Type": "languages",
            "Name": "table_to_written",
            "Conditions": "",
            "Trans": "{\"en\": \"Table name\", \"ru\": \"Название таблицы\"}"
        },
        {
            "Type": "languages",
            "Name": "table_to_written_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Table to which the value will be written (Example: accounts)\", \"ru\": \"Таблица, в которую будет записано значение (Пример: accounts)\"}"
        },
        {
            "Type": "languages",
            "Name": "template_create",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Creating template\",\"ru\": \"Создание шаблона\"}"
        },
        {
            "Type": "languages",
            "Name": "test_page",
            "Conditions": "",
            "Trans": "{\"en\": \"Test page\", \"ru\": \"Тестовая страница\"}"
        },
        {
            "Type": "languages",
            "Name": "text_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Text of the document\", \"ru\": \"Текст документа\"}"
        },
        {
            "Type": "languages",
            "Name": "their_members",
            "Conditions": "",
            "Trans": "{\"en\": \"their members\", \"ru\": \"их члены\"}"
        },
        {
            "Type": "languages",
            "Name": "title",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Title\",\n    \"ru\": \"Название\"\n}"
        },
        {
            "Type": "languages",
            "Name": "tokenrefund_attacker",
            "Conditions": "",
            "Trans": "{\"en\": \"Attacker\", \"ru\": \"Злоумышленник\"}"
        },
        {
            "Type": "languages",
            "Name": "tokenrefund_list",
            "Conditions": "",
            "Trans": "{\"en\": \"Tokens refund list\", \"ru\": \"Список возврата токенов\"}"
        },
        {
            "Type": "languages",
            "Name": "tokenrefund_note_header",
            "Conditions": "",
            "Trans": "{\"en\": \"Token refund\", \"ru\": \"Возврат средств\"}"
        },
        {
            "Type": "languages",
            "Name": "tokenrefund_result0",
            "Conditions": "",
            "Trans": "{\"en\": \"Discussion and voting\", \"ru\": \"Oбсуждение и голосование\"}"
        },
        {
            "Type": "languages",
            "Name": "tokenrefund_result1",
            "Conditions": "",
            "Trans": "{\"en\": \"Return cancelled\", \"ru\": \"Возврат отменен\"}"
        },
        {
            "Type": "languages",
            "Name": "tokenrefund_result2",
            "Conditions": "",
            "Trans": "{\"en\": \"The tokens returned\", \"ru\": \"Токены возвращены\"}"
        },
        {
            "Type": "menu",
            "Name": "default_menu",
            "Value": "Div(ajnav){\r\n    If(#role_id# == 0){\r\n        MenuItem(Title:Registration, Page: ajman_user_registration, Icon:\"fa icon-user\")\r\n    }.ElseIf(Or(#role_id# == 16,#role_id# == 18)){\r\n\t\tDiv(col text-center){\r\n\t\t\tDiv(col-md-12){\r\n\t\t\t\tDBFind(\"members\").Columns(\"id,member_name\").WhereId(#key_id#).Vars(pre)\r\n\t\t\t\tImage(Binary().ById(20), Class: img-thumbnail img-circle img-responsive thumb96)\r\n\t\t\t\tDiv(col-md-12 ajman-color-h1){\r\n\t\t\t\t\tSpan(Body:#pre_member_name#)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(col pd-top-50){\r\n                Div(ajnav){\r\n                    MenuGroup(Title: \"Contracts\", Icon: \"icon-folder\"){\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"All Contracts\", Page:ajman_contract_list, Icon:\"icon-layers\", Params: \"mode=all\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"My Contracts\", Page:ajman_contract_list, Icon:\"icon-layers\", Params: \"mode=my\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"Signed contracts\", Page:ajman_contract_list, Icon:\"icon-layers\", Params: \"mode=signed\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(ajnav){\r\n                    MenuGroup(Title: \"Property & Units\", Icon: \"icon-folder\"){\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"Properties list\", Page:property_list, Icon:\"icon-folder\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"Units list\", Page:units_list, Icon:\"icon-folder\")\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t}\r\n\t\t}.Style(height: 100vh; background-color: #323639)\r\n    }.ElseIf(Or(#role_id# == 14,#role_id# == 15)){\r\n\t\tDiv(col text-center pd-top-50){\r\n\t\t\tDiv(col-md-12){\r\n\t\t\t\tDBFind(\"members\").Columns(\"id,member_name\").WhereId(#key_id#).Vars(pre)\r\n\t\t\t\tImage(Binary().ById(20), Class: img-thumbnail img-circle img-responsive thumb96)\r\n\t\t\t\tDiv(col-md-12 ajman-color-h1){\r\n\t\t\t\t\tSpan(Body:#pre_member_name#)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(col pd-top-50){\r\n                Div(ajnav){\r\n                    MenuGroup(Title: \"Contracts\", Icon: \"icon-folder\"){\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"All Contracts\", Page:ajman_contract_list, Icon:\"icon-layers\", Params: \"mode=all\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"My Contracts\", Page:ajman_contract_list, Icon:\"icon-layers\", Params: \"mode=my\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"Signed contracts\", Page:ajman_contract_list, Icon:\"icon-layers\", Params: \"mode=signed\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(ajnav){\r\n                    MenuGroup(Title: \"Property & Units\", Icon: \"icon-folder\"){\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"Properties list\", Page:property_list, Icon:\"icon-folder\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"Units list\", Page:units_list, Icon:\"icon-folder\")\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t}\r\n\t\t}.Style(height: 100vh; background-color: #323639)\r\n    }.ElseIf(Or(#role_id# == 19,#role_id# == 21)){\r\n\t\tDiv(col text-center pd-top-50){\r\n\t\t\tDiv(col-md-12){\r\n\t\t\t\tDBFind(\"members\").Columns(\"id,member_name\").WhereId(#key_id#).Vars(pre)\r\n\t\t\t\tImage(Binary().ById(20), Class: img-thumbnail img-circle img-responsive thumb96)\r\n\t\t\t\tDiv(col-md-12 ajman-color-h1){\r\n\t\t\t\t\tSpan(Body:#pre_member_name#)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(col pd-top-50){\r\n                Div(ajnav){\r\n                    MenuGroup(Title: \"Contracts\", Icon: \"icon-folder\"){\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"All Contracts\", Page:ajman_contract_list, Icon:\"icon-layers\", Params: \"mode=all\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"Signed contracts\", Page:ajman_contract_list, Icon:\"icon-layers\", Params: \"mode=signed\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(ajnav){\r\n                    MenuGroup(Title: \"Property & Units\", Icon: \"icon-folder\"){\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"Properties list\", Page:property_list, Icon:\"icon-folder\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:\"Units list\", Page:units_list, Icon:\"icon-folder\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(ajnav){\r\n                    MenuGroup(Title: \"Managment control\", Icon: \"icon-folder\"){\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$profile$, Page:profile_view, Icon:\"fa icon-user\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$membership$, Page:members_list, Icon:\"fa icon-people\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuGroup(Title:$notifications$, Icon:\"fa fa-bell-o\"){\r\n                                Div(ajnav){\r\n                                    MenuItem(Title:$single_notifics$, Page:notifications_single, Icon:\"fa fa-bell-o\")\r\n                                }\r\n                                Div(ajnav){\r\n                                    MenuItem(Title:$role_notifics$, Page:notifications_roles, Icon:\"fa fa-bullhorn\")\r\n                                }\r\n                                Div(ajnav){\r\n                                    MenuItem(Title:$test_page$, Page:notifications_testpage, Icon:\"icon-settings\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$roles$, Page:roles_list, Icon:\"fa fa-list-ul\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title: $catalog_ecosystems$, Page: catalog_ecosystems, Icon:\"fa fa-book\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuGroup(Title:$admin$, Icon:\"fa icon-settings\"){\r\n                                Div(ajnav){\r\n                                    MenuItem(Title:$tokens_transfer$, Page:money_transfer, Icon:\"icon-energy\")\r\n                                }\r\n                                Div(ajnav){\r\n                                    MenuItem(Title:$new_ecosystem$, Page:ecosystem_new, Icon:\"icon-globe\")\r\n                                }\r\n                                Div(ajnav){\r\n                                    MenuItem(Title: $sysparams_list$,Page:sysparams_list, Icon:\"fa icon-settings\")\r\n                                }\r\n                                Div(ajnav){\r\n                                    MenuItem(Title:$sysparams_candidates$, Page:sysparams_candidates, Icon:\"icon-list\")\r\n                                }\r\n                                Div(ajnav){\r\n                                    MenuItem(Title:$sysparams_ecos$, Page:sysparams_ecos, Icon:\"icon-list\")\r\n                                }\r\n                                Div(ajnav){\r\n                                    MenuItem(Title:$tokenrefund_list$, Page:tokenrefund_list, Icon:\"icon-list\")\r\n                                }\r\n                                Div(ajnav){\r\n                                    MenuItem(Title:$tokens_transfer$, Page:tokens_transfer, Icon:\"icon-credit-card\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuGroup(Title:$voting$, Icon:\"fa fa-edit\"){\r\n                                Div(ajnav){\r\n                                    MenuItem(Title:$voting$, Page:voting_list, Icon:\"fa fa-edit\")\r\n                                }\r\n                                Div(ajnav){\r\n                                    MenuItem(Title:$voting_templates$, Page:voting_templates, Icon:\"fa icon-pin\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t}\r\n\t\t}.Style(height: 100vh; background-color: #323639)\r\n\t}.ElseIf(#role_id# == 22){\r\n    }.Else{\r\n        Div(ajnav){\r\n            MenuGroup(Title: \"Basic\", Icon: \"icon-folder\"){\r\n                Div(ajnav){\r\n                    MenuItem(Title:$profile$, Page:profile_view, Icon:\"fa icon-user\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:$membership$, Page:members_list, Icon:\"fa icon-people\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuGroup(Title:$notifications$, Icon:\"fa fa-bell-o\"){\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$single_notifics$, Page:notifications_single, Icon:\"fa fa-bell-o\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$role_notifics$, Page:notifications_roles, Icon:\"fa fa-bullhorn\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$test_page$, Page:notifications_testpage, Icon:\"icon-settings\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:$roles$, Page:roles_list, Icon:\"fa fa-list-ul\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title: $catalog_ecosystems$, Page: catalog_ecosystems, Icon:\"fa fa-book\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuGroup(Title:$admin$, Icon:\"fa icon-settings\"){\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$tokens_transfer$, Page:money_transfer, Icon:\"icon-energy\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$new_ecosystem$, Page:ecosystem_new, Icon:\"icon-globe\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title: $sysparams_list$,Page:sysparams_list, Icon:\"fa icon-settings\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$sysparams_candidates$, Page:sysparams_candidates, Icon:\"icon-list\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$sysparams_ecos$, Page:sysparams_ecos, Icon:\"icon-list\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$tokenrefund_list$, Page:tokenrefund_list, Icon:\"icon-list\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$tokens_transfer$, Page:tokens_transfer, Icon:\"icon-credit-card\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(ajnav){\r\n                    MenuGroup(Title:$voting$, Icon:\"fa fa-edit\"){\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$voting$, Page:voting_list, Icon:\"fa fa-edit\")\r\n                        }\r\n                        Div(ajnav){\r\n                            MenuItem(Title:$voting_templates$, Page:voting_templates, Icon:\"fa icon-pin\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(ajnav){\r\n            MenuGroup(Title: \"Договоры\", Icon: \"icon-folder\"){\r\n                Div(ajnav){\r\n                    MenuItem(Title:\"Все договоры\", Page:ajman_contract_list, Icon:\"icon-layers\", Params: \"mode=all\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:\"Мои договоры\", Page:ajman_contract_list, Icon:\"icon-layers\", Params: \"mode=my\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:\"Подписанные договоры\", Page:ajman_contract_list, Icon:\"icon-layers\", Params: \"mode=signed\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:\"Арендовать Property\", Page:ajman_contract_add, Icon:\"fa fa-edit\", Params: \"property_id=2,unit_id=0,owner_id=7207124132448258015\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:\"Арендовать Unit\", Page:ajman_contract_add, Icon:\"fa fa-edit\", Params: \"property_id=2,unit_id=1,owner_id=7207124132448258015\")\r\n                }\r\n            }\r\n        }\r\n        Div(ajnav){\r\n            MenuItem(Title:$business_manager$, Page:business_manager, Icon:\"fa fa-edit\")\r\n        }\r\n        Div(ajnav){\r\n            MenuItem(Title:$business_process$, Page:business_process, Icon:\"fa fa-edit\")\r\n        }\r\n        Div(ajnav){\r\n            MenuItem(Title:$ajman_user_registration$, Page:ajman_user_registration, Icon:\"fa fa-edit\")\r\n        }\r\n        Div(ajnav){\r\n            MenuItem(Title:\"Ajman_companies\", Page:Ajman_companies, Icon:\"icon-layers\")\r\n        }\r\n        Div(ajnav){\r\n            MenuItem(Title:\"Ajman_persones\", Page:Ajman_persones, Icon:\"icon-layers\")\r\n        }\r\n        Div(ajnav){\r\n            MenuItem(Title:\"Ajman Roles\", Page:ajamal_enter_user_role, Icon:\"fa fa-edit\")\r\n        }\r\n        Div(ajnav){\r\n            MenuGroup(Title: \"Property & Units\", Icon: \"icon-folder\"){\r\n                Div(ajnav){\r\n                    MenuItem(Title:\"Add Property\", Page:property_add, Icon:\"icon-folder\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:\"Properties list\", Page:property_list, Icon:\"icon-folder\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:\"Add Unit\", Page:units_add, Icon:\"icon-folder\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:\"Units list\", Page:units_list, Icon:\"icon-folder\")\r\n                }\r\n            }\r\n        }\r\n        Div(ajnav){\r\n            MenuGroup(Title: \"Layout\", Icon: \"icon-layers\"){\r\n                Div(ajnav){\r\n                    MenuItem(Title:aj_1, Page:aj_1, Icon:\"fa fa-edit\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:aj_2, Page:aj_2, Icon:\"fa fa-edit\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:aj_3, Page:aj_3, Icon:\"fa fa-edit\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:aj_4, Page:aj_4, Icon:\"fa fa-edit\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:aj_5, Page:aj_5, Icon:\"fa fa-edit\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:aj_new, Page:aj_new, Icon:\"fa fa-edit\")\r\n                }\r\n                Div(ajnav){\r\n                    MenuItem(Title:Table_Bled Page:Table_blead, Icon:\"fa fa-edit\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Title": "default",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        },
        {
            "Type": "pages",
            "Name": "roles_list",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    SetTitle($roles$)\r\n    AddToolButton(Title: $create$, Page: roles_create, Icon: icon-plus)\r\n\r\n    If(GetVar(isSearch) == 1){\r\n        SetVar(Name: v_Where, Value: \"role_name='#v_Search#'\")\r\n    }.Else{\r\n        SetVar(Name: v_Where, Value: \"id>0\")\r\n        SetVar(Name: v_Search, Value: \"\")\r\n    }\r\n\r\n    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name,role_type,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted\").Custom(custom_id){\r\n        If(#deleted# == 0){\r\n            SetVar(Name: style_text, Value: \"text-normal\")\r\n            SetVar(Name: style_link, Value: \"text-primary\")\r\n        }.Else{\r\n            SetVar(Name: style_text, Value: \"text-muted\")\r\n            SetVar(Name: style_link, Value: \"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_creator){\r\n        If(#role_type#==3){\r\n        }.Else{\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\r\n                Span(Body: #creator.member_name#)\r\n            }\r\n        }\r\n    }.Custom(custom_name){\r\n        SetVar(Name: img_id, Value: 0)\r\n        DBFind(Name: binaries, Source: src_binaries).Columns(\"id,data\").Where(\"id=#image_id#\").Vars(img)\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#id#\"){\r\n            If(#img_id#>0){\r\n                Image(Src: \"#img_data#\").Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n                Span(#role_name#)\r\n            }.Else{\r\n                Div(){\r\n                    Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\r\n                    Span(#role_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(custom_date){\r\n        Div(#style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        Div(#style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    }.Custom(custom_type){\r\n        Span(Class: #style_text#, Body: AppParam(App:#app_id#, Name: roles_types, Index: #role_type#))\r\n    }.Custom(custom_status){\r\n        If(#deleted# == 0){\r\n            Span(Class: #style_text#, Body: LangRes(active))\r\n        }.Else{\r\n            Span(Class: #style_text#, Body: LangRes(deleted))\r\n        }\r\n    }.Custom(actions){\r\n        Div(pull-right){\r\n            If(And(#deleted#==0,#role_type#!=3)){\r\n                Button(Class: fa fa-trash btn btn-warning, Contract: Roles_Del, Params: \"rid=#id#\", Page: roles_list).Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n            }.ElseIf(#deleted#==1){\r\n                Button(Class: fa fa-recycle btn btn-default, Contract: Roles_Restore, Params: \"rid=#id#\", Page: roles_list)\r\n            }\r\n        }\r\n    }.Where(#v_Where#).Order(\"deleted ASC, id ASC\")\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-1 mt-sm text-right){\r\n                    Label(For: Search){\r\n                        Span(Body: LangRes(name))\r\n                    }\r\n                }\r\n                Div(col-md-11){\r\n                    Div(input-group){\r\n                        Input(Name: Search, Value: #v_Search#)\r\n                        Div(input-group-btn){\r\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: roles_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_roles, Columns: \"$id$=custom_id,$name$=custom_name,$type$=custom_type,$creator$=custom_creator,$created$ / $deleted$=custom_date,$status$=custom_status,=actions\")\r\n                }\r\n            }\r\n            If(GetVar(isSearch) == 1){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: roles_list, PageParams: \"isSearch=0\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "catalog_ecosystems",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetTitle($catalog_ecosystems$)\n    AddToolButton(Title: $add$, Page: catalog_ecosystems_add, Icon: icon-plus)\n\n    If(#param_flag_free#==0){\n        SetVar(Name: v_where, Value: \"deleted=0\")\n    }.ElseIf(#param_flag_free#==1){\n        SetVar(Name: v_where, Value: \"deleted=0 and flag_free=1\")\n    }.ElseIf(#param_flag_free#==2){\n        SetVar(Name: v_where, Value: \"deleted=0 and flag_free=2\")\n    }.Else{\n        SetVar(Name: v_where, Value: \"deleted=0\")\n        SetVar(Name: param_flag_free, Value: 0)\n    }\n\n    Div(row){\n        Div(col-md-12 text-left){\n            Div(btn-group){\n                If(#param_flag_free#==0){\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems, PageParams: \"param_flag_free=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems, PageParams: \"param_flag_free=0\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#param_flag_free#==1){\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=1\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#param_flag_free#==2){\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=2\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=2\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n            }\n        }\n    }\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_number,ecosystem_name,ecosystem_type,image_id,flag_free\").Where(#v_where#).Custom(custom_logo){\n                DBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#image_id#\").Vars(img)\n                Image(Src: \"#img_data#\").Style(width:100px;)\n            }.Custom(custom_name){\n                LinkPage(Page: catalog_ecosystems_view, PageParams: \"v_id=#id#\"){\n                    Span(Class: h5 text-bold, Body: platform ecosystem)\n                }\n            }.Custom(custom_type){\n                Span(AppParam(App:#app_id#, Name: catalog_ecosystems_type, Index: #ecosystem_type#))\n            }.Custom(custom_free){\n                Span(AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Index: #flag_free#))\n            }.Custom(custom_ecosystem){\n                Span(Class: h5, Body: #ecosystem_number#)\n            }.Order(\"ecosystem_number\")\n\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_catalog, Columns:\"$ecosystem_number$=custom_ecosystem,$logo$=custom_logo,$name$=custom_name,$type$=custom_type,$freetype$=custom_free\")\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "catalog_ecosystems_add",
            "Value": "Div(content-wrapper){\n    DBFind(Name: ecosystems, Source: src_num)\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    AppParam(App:#app_id#, Name: catalog_ecosystems_type, Source: src_type)\n    AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Source: src_freetype)\n    Data(section1, \"name,type,res,req,src\"){\n        Ecosystem_number,select_validate,ecosystem,*,src_num\n        Logo,image,catalog_ecosystems_logo,*,\n        Ecosystem_name,input,catalog_ecosystems_name,*,\n        Ecosystem_type,select,catalog_ecosystems_type,*,src_type\n    }\n    Data(section2, \"name,type,res,req,src\"){\n        Flag_free,radio,catalog_ecosystems_freetype,*,src_freetype\n    }\n    Data(section3, \"name,type,res,req,src\"){\n        Description,textarea,catalog_ecosystems_description,*,\n        Conditions,textarea,catalog_ecosystems_conditions,*,\n    }\n    Data(section4, \"name,type,res,req,src\"){\n        Vde_page,input,vde_page,,\n        Vde_form_address,input,vde_form_desc,,\n    }\n    Data(section5, \"name,type,res,req,src\"){\n        Web_page,input,web_page,,\n        Web_form_address,input,web_form_desc,,\n    }\n    Data(section6, \"name,type,res,req,src\"){\n        Email,input,catalog_ecosystems_contact_email,,\n        Phone,input,catalog_ecosystems_contact_phone,,\n    }\n    Data(sections, \"section_name\"){\n        section1\n        section2\n        section3\n        section4\n        section5\n        section6\n    }\n\n    SetTitle($catalog_ecosystems_form$)\n    Div(breadcrumb){\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $catalog_ecosystems_form$)\n    }\n\n    Div(row){\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    ForList(sections){\n                        Div(list-group-item){\n                            ForList(#section_name#){\n                                Div(row){\n                                    Div(col-md-5 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(#res#))\n                                            If(#req#==*){\n                                                Span(Class: text-danger, Body:*)\n                                            }\n                                        }\n                                    }\n                                    Div(col-md-7 mb-sm text-left){\n                                        If(#type#==select_validate){\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id).Validate(required)\n                                            InputErr(Name: #name#, required: need)\n                                        }\n                                        If(#type#==select){\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\n                                        }\n                                        If(#type#==image){\n                                            ImageInput(Name: #name#, Width: 300, Ratio: 2/1)\n                                        }\n                                        If(#type#==input){\n                                            Input(Name: #name#)\n                                        }\n                                        If(#type#==textarea){\n                                            Input(Name: #name#, Type:textarea)\n                                        }\n                                        If(#type#==radio){\n                                            RadioGroup(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems)\n                    Button(Contract: catalog_ecosystems_Add, Class: btn btn-primary, Page: catalog_ecosystems, Body: $send$)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "catalog_ecosystems_request",
            "Value": "Div(content-wrapper){\n    DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"ecosystem_name,ecosystem_number\").Where(\"id=#v_id#\").Vars(prefix)\n    \n    SetTitle($request_membership$)\n    Div(breadcrumb){\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        LinkPage(#prefix_ecosystem_name#, catalog_ecosystems_view,, \"v_id=#v_id#\")\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $request_membership$)\n    }\n    \n    Div(row){\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(request_membership)}\n                Form(panel-body){\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: pub_key){\n                                    Span(Body: LangRes(pub_key))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 text-left){\n                                Input(Class: form-control, Type: text, Name: pub_key)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: comment){\n                                    Span(Body: LangRes(comment))\n                                }\n                            }\n                            Div(col-md-9 text-left){\n                                Input(Name: comment, Class: form-control, Type: textarea, Value: no)\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems_view, PageParams: \"v_id=#v_id#\")\n                        Button(Body: LangRes(send), Class: btn btn-primary, Contract: catalog_ecosystems_Request, Params: \"ecosystem_num=#prefix_ecosystem_number#\", Page: catalog_ecosystems_view, PageParams: \"v_id=#v_id#\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "catalog_ecosystems_view",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_name,ecosystem_type,ecosystem_number,image_id,flag_free,ecosystem_info->email,ecosystem_info->phone,ecosystem_info->description,ecosystem_info->conditions,url_address->vde_form_address,url_address->web_page,url_address->vde_page,url_address->web_form_address\").Where(\"id=#v_id#\").Vars(prefix)\n    \n    SetTitle($catalog_ecosystems_number$: #prefix_ecosystem_name#)\n    Div(breadcrumb){\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #prefix_ecosystem_name#)\n    }\n    \n    Div(row){\n        Div(col-md-10 col-md-offset-1){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    Span(Class: text-bold h3, Body: #prefix_ecosystem_name# (##prefix_ecosystem_number#))\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-12 mt-sm text-center){\n                                If(#prefix_image_id# > 0){\n                                    DBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#prefix_image_id#\").Vars(img)\n                                    Image(Src: \"#img_data#\").Style(width: 300px;)\n                                }\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(type)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_type, Index: #prefix_ecosystem_type#))\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(catalog_ecosystems_description)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_description#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(catalog_ecosystems_freetype)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Index: #prefix_flag_free#))\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(catalog_ecosystems_conditions)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_conditions#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_form_desc))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_form_address#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_page))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_page#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(web_form_desc))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_form_address#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(web_page))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_page#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_email))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_email#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_phone))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_phone#)\n                            }\n                        }\n                    }\n                }\n                DBFind(Name: keys, Source: src_keys).Where(\"id = -5170274876521810367\").Vars(key)\n                If(#key_amount# > 0){\n                    DBFind(Name: membership_requests, Source: src_membership).Ecosystem(\"#prefix_ecosystem_number#\").Where(\"member_id = -5170274876521810367\").Vars(request)\n                    If(#request_id#>0){\n                        Div(row form-group){\n                            Div(col-md-12 mt-sm text-center){\n                                If(#request_status# == 0){\n                                    Em(Class: fa fa-question-circle fa-5x text-warning)\n                                    Div(text-center h4 text-bold text-warning, Body: LangRes(request_wating))\n                                }\n                                If(#request_status# == 1){\n                                    Em(Class: fa fa-check-circle fa-5x text-success)\n                                    Div(text-center h4 text-bold text-success, Body: LangRes(request_accepted))\n                                }\n                                If(#request_status# == -1){\n                                    Em(Class: fa fa-minus-circle fa-5x text-danger)\n                                    Div(text-center h4 text-bold text-danger, Body: LangRes(request_rejected))\n                                }\n                            }\n                        }\n                        \n                    }.Else{\n                        Div(row form-group){\n                            Div(col-md-12 mt-sm text-center){\n                                Em(Class: fa fa-exclamation-circle fa-5x text-primary)\n                                Div(text-center h4 text-bold text-primary, Body: LangRes(request_not_sent))\n                            }\n                        }\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(send), Class: btn btn-primary, Page: catalog_ecosystems_request, PageParams: \"v_id=#v_id#\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "money_transfer",
            "Value": "SetTitle(Money transfer)\nDiv(content-wrapper){\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: Money transfer)\n    }\n    Div(row){\n        Div(col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: Money transfer)\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(Recipient)\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: Recipient, Placeholder: \"xxxx-xxxx-xxxx-xxxx\")\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(Pub)\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: Pub)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(Amount)\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: Amount, Placeholder: \"0\", Value: \"50000000000000000000000\")\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Contract: \"@1MoneyTransfer\", Body: Send, Class: btn btn-primary)\n                }\n            }\n        }\n        DBFind(Name: keys, Source: src_key)\n        Div(col-md-12){\n            Div(table-responsive){\n                Table(Source: src_key)\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "notifications_roles",
            "Value": "Div(content-wrapper){\n    SetTitle($role_notifics$)\n    AddToolButton(Title: $send$, Page: notifications_roles_send, Icon: icon-plus)\n    \n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"notification->type='2' and recipient->role_name='#v_Search#'\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"notification->type='2'\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n    \n    DBFind(Name: notifications, Source: src_notifications).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(custom_id){\n        If(#closed# == 0){\n            SetVar(Name: style_text, Value: \"text-normal\")\n            SetVar(Name: style_link, Value: \"text-primary\")\n        }.Else{\n            SetVar(Name: style_text, Value: \"text-muted\")\n            SetVar(Name: style_link, Value: \"text-muted\")\n        }\n        Span(Class: #style_text#, Body: #id#)\n    }.Custom(custom_recipient){\n        SetVar(Name: img_id, Value: 0)\n        DBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#recipient.image_id#\").Vars(img)\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\n            If(#img_id#>0){\n                Image(Src: \"#img_data#\").Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(#recipient.role_name#)\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\n                    Span(#recipient.role_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Custom(custom_sender){\n        If(#sender.type#==1){\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\n                Span(Body: #sender.member_name#)\n            }\n        }\n        If(#sender.type#==2){\n            LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\n                Span(Body: #sender.role_name#)\n            }\n        }\n    }.Custom(custom_icon){\n        Em(Class: fa #notification.icon# fa-2x #style_text#)\n    }.Custom(custom_page){\n        LinkPage(Class: #style_link# h5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\n            Span(Body: #page_name#)\n        }\n    }.Custom(custom_date){\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\n    }.Custom(custom_processing){\n        If(#date_start_processing# == NULL){\n            P(Class: #style_text# h6 m0, Body: $not_started$)\n        }.Else{\n            P(Class: #style_text# h6 m0, Body: $started$ #processing_info.member_name# $at$)\n            P(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n    }.Custom(custom_status){\n        If(#closed# == 0){\n            If(#date_start_processing# == NULL){\n                Span(Class: #style_text#, Body: LangRes(active))\n            }.Else{\n                Span(Class: #style_text#, Body: LangRes(processing))\n            }\n        }.Else{\n            Span(Class: #style_text#, Body: LangRes(сlosed))\n        }\n    }.Custom(actions){\n        Div(text-right){\n            If(#closed# == 0){\n                If(#date_start_processing# == NULL){\n                    Button(Body: Em(Class: fa fa-recycle), Class: btn btn-default, Contract: Notifications_Roles_Processing, Params: \"notific_id=#id#\", Page: notifications_roles).Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }.Else{\n                    Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Notifications_Roles_Close, Params: \"notific_id=#id#\", Page: notifications_roles).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }\n    }.Where(#v_Where#).Order(\"closed ASC, id ASC\")\n    \n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-1 mt-sm text-right){\n                    Label(For: Search){\n                        Span(Body: LangRes(recipient))\n                    }\n                }\n                Div(col-md-11){\n                    Div(input-group){\n                        Input(Name: Search, Value: #v_Search#)\n                        Div(input-group-btn){\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: notifications_roles, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_notifications, Columns: \"$id$=custom_id,$icon$=custom_icon,$recipient$=custom_recipient,$page_name$=custom_page,$sender$=custom_sender,$processing$=custom_processing,$sent$/$сlosed$=custom_date,$status$=custom_status,=actions\")\n                }\n            }\n            If(GetVar(isSearch) == 1){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_roles, PageParams: \"isSearch=0\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "notifications_roles_send",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n\n    SetTitle($role_notifics$)\n    Div(breadcrumb){\n        LinkPage($role_notifics$, notifications_roles)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $send$)\n    }\n\n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(role_notifics)}\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(recipient))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                DBFind(Name: roles, Source: source_roles).Columns(\"id,role_name\").Where(\"deleted=0\")\n                                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(closure_type))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_closure, Source: src_closure_type)\n                                Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(sender))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_sender, Source: src_sender)\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(icon))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_icon, Source: src_icon)\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(header))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(body_text))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: text_body, Value: \"Body text\")\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(page_name))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: page_name, Value: \"notifications_testpage\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: params_val, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_roles)\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_roles, Contract: Notifications_Roles_Send_str)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "notifications_single_send",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n\n    SetTitle($single_notifics$)\n    Div(breadcrumb){\n        LinkPage($single_notifics$, notifications_single)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $send$)\n    }\n\n    Div(row){\n        Div(col-md-6 col-md-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(single_notifics)}\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(recipient)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                DBFind(Name: members, Source: source_members).Columns(\"id,member_name\")\n                                Select(Name: member_id, Source: source_members, NameColumn: member_name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(sender)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_sender, Source: src_sender)\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(icon)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_icon, Source: src_icon)\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(header)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(body_text))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: text_body, Value: \"Body text\")\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(page_name)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: page_name, Value: \"notifications_testpage\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: params_val, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_single)\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_single, Contract: Notifications_Single_Send_str)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "notifications_testpage",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetTitle($test_page$)\n\n    If(#notific_id# > 0){\n        DBFind(Name: notifications, Source: src_notifications).Columns(\"id,notification->type,notification->header,page_params->param_int,page_params->param_str,date_start_processing,closed\").Where(\"id=#notific_id#\").Vars(prefix)\n        SetVar(Name: notific_type, Value: #prefix_notification_type#)\n        SetVar(Name: notific_header, Value: #prefix_notification_header#)\n        SetVar(Name: notific_val_int, Value: #prefix_page_params_param_int#)\n        SetVar(Name: notific_val_str, Value: #prefix_page_params_param_str#)\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n        SetVar(Name: notific_id, Value: \"0\")\n        SetVar(Name: notific_type, Value: \"0\")\n        SetVar(Name: notific_header, Value: \"null\")\n        SetVar(Name: notific_val_int, Value: \"null\")\n        SetVar(Name: notific_val_str, Value: \"null\")\n    }\n\n    Div(row){\n        Div(col-md-6 col-md-offset-3){\n            Form(panel panel-default){\n                Div(panel-body){\n                    Div(list-group-item text-center){\n                        Span(Class: h3, Body: #notific_header#)\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(id))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_id#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(type))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#notific_type# > 0){\n                                    Span(Class: h4, Body: AppParam(App:#app_id#, Name: notification_type, Index: #notific_type#))\n                                }.Else{\n                                    Span(Class: h4, Body: #notific_type#)\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(value_number))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_val_int#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(value_string))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_val_str#)\n                            }\n                        }\n                    }\n                }\n                If(#notific_type# == 1){\n                    If(#prefix_closed# == 0){\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(close), Class: btn btn-primary, Contract: Notifications_Single_Close, Params: \"notific_id=#notific_id#\", Page: notifications_single).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                        }\n                    }\n                }\n                If(#notific_type# == 2){\n                    If(#prefix_closed# == 0){\n                        Div(panel-footer text-right){\n                            If(#prefix_date_start_processing# == \"\"){\n                                Button(Body: LangRes(begin), Class: btn btn-primary, Contract: Notifications_Roles_Processing, Params: \"notific_id=#notific_id#\", Page: notifications_roles).Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }.Else{\n                                Button(Body: LangRes(close), Class: btn btn-primary, Contract: Notifications_Roles_Close, Params: \"notific_id=#notific_id#\", Page: notifications_roles).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "roles_assign",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n\r\n    If(#v_role_id# > 0){\r\n        DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name,role_type\").Where(\"id=#v_role_id#\").Vars(prefix)\r\n\r\n        SetTitle($assign$)\r\n        Div(breadcrumb){\r\n            LinkPage($roles$, roles_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#prefix_role_name#, roles_view,, \"v_role_id=#v_role_id#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $assign$)\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading){LangRes(assign)}\r\n                    Div(panel-body){\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(role))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Type: hidden, Name: rid, Value: #prefix_id#)\r\n                                    SetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\r\n                                    Input(Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: true)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(type)).(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    SetVar(Name: var_prefix_role_type, Value: AppParam(App:#app_id#, Name: roles_types, Index: #prefix_role_type#))\r\n                                    Input(Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: true)\r\n                                    If(#prefix_role_type# != 1){\r\n                                        P(Class: m0 text-danger h6, Body: LangRes(appointment_impossible))\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#prefix_role_type# == 1){\r\n                                Div(row){\r\n                                    Div(col-md-3 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(member)).(Class: text-danger, Body:*)\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-9 text-left){\r\n                                        DBFind(Name: members, Source: source_members).Columns(\"id,member_name\").Custom(custom_username){\r\n                                            #member_name# (Address(#id#) )\r\n                                        }\r\n                                        Select(Name: member_id, Source: source_members, NameColumn: custom_username, ValueColumn: id)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\")\r\n                        If(#prefix_role_type# == 1){\r\n                            Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: Roles_Assign, Params: \"member_id=Val(member_id)\").Alert(Text: $want_assign_member_to_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "roles_create",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n\r\n    SetTitle($new_role$)\r\n    Div(breadcrumb){\r\n        LinkPage($roles$, roles_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $new_role$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: LangRes(new_role))\r\n                Div(panel-body){\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(name)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: role_name).Validate(minLength:3, maxLength:30)\r\n                                InputErr(Name: role_name, minLength: $validate_role_name$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(type)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                AppParam(App:#app_id#, Name: role_types, Source: src_roles)\r\n                                Select(Name: role_type, Source: src_roles, NameColumn: name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#image_upload_worked#==1){\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(icon))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    ImageInput(Name: icon, Width: 100, Ratio: 1/1)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\r\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_list, Contract: Roles_Create).Alert(Text: $want_create_new_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_create",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n\n    SetTitle($new_voting$)\n    Div(breadcrumb){\n        LinkPage($voting$, voting_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $new_voting$)\n    }\n\n    Div(row){\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(new_voting)}\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(name))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: voting_name, Value: New voting)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(decision)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                AppParam(App:#app_id#, Name: type_voting_decisions, Source: type_voting_decisions)\n                                Select(Name: type_decision, Source: type_voting_decisions, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(participants)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#app_id#, Name: type_voting_participants, Source: type_voting_participants)\n                                Select(Name: type_participants, Source: type_voting_participants, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(voting_volume)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: volume, Type: number, Value: 75)\n                                P(Class: m0 text-muted, Body: $voting_volume_desc$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(voting_quorum)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: quorum, Type: number, Value: 50)\n                                P(Class: m0 text-muted, Body: $voting_quorum_desc$)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(date_start)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-5 mb-sm text-left){\n                                Input(Name: start_date, Type: date, Value: Now(\"YYYY-MM-DD\", 3 days))\n                            }\n                            Div(col-md-4 mb-sm text-left){\n                                Input(Name: start_time, Type: time, Value: Now(\"HH:MI\"))\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(date_end)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-5 mc-sm text-left){\n                                Input(Name: end_date, Type: date, Value: Now(\"YYYY-MM-DD\", 21 days))\n                            }\n                            Div(col-md-4 mc-sm text-left){\n                                Input(Name: end_time, Type: time, Value: Now(\"HH:MI\"))\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-lg text-right){\n                                Label(){\n                                    Span(Body: LangRes(description))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: description, Type: textarea)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Input(Name: now_date, Type: hidden, Value: Now(\"YYYY-MM-DD HH:MI\"))\n                    Input(Name: voting_type, Type: hidden, Value: 1)\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: voting_list)\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_list, Contract: voting_CreateNew)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_decision_candidates",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\n        \n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(row mt-sm){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(row mt-sm){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(candidates))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 text-left){\n                                Div(input-group){\n                                    Input(Name: can_apply_voting, Disabled: 1, Value: \"$can_apply_voting$\")\n                                    Div(input-group-btn){\n                                        Button(Body: LangRes(apply), Class: btn btn-primary, Page: voting_decision_candidates, PageParams: \"vID=#vID#\", Contract: voting_SubjectCandidates)\n                                    }\n                                }\n                            }\n                        }\n                        Div(row mt-sm){\n                            Div(col-lg-8 col-lg-offset-3){\n                                DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\n                                    Address(#subject.member_id#)\n                                }.Custom(custom_member){\n                                    LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\n                                        Span(Body: #subject.member_name#)\n                                    }\n                                }\n                                Table(src_voting_subject, \"$candidates$=custom_member,$address$=custom_address\")\n                            }\n                        }\n                        Div(form-group){\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(role))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"role_type=2 and deleted=0\")\n                                    Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                                }\n                            }\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(vacancies))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: vacancies, Type: Number, Value: #instance_optional_role_vacancies#)\n                                }\n                            }\n                        }\n                        Div(form-group){\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row mt-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: memberID, Type: hidden, Value: 0)\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_decision_contract",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name\").Where(\"id=#vID#\").Vars(instance)\n        DBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Where(\"voting_id=#vID#\").Vars(prefix)\n        \n        If(2>0){\n        }.Else{\n            SetVar(Name: prefix_subject_contract_accept, Value: \"\")\n            SetVar(Name: prefix_subject_contract_accept_params, Value: \"\")\n            SetVar(Name: prefix_subject_contract_reject, Value: \"\")\n            SetVar(Name: prefix_subject_contract_reject_params, Value: \"\")\n        }\n        \n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(contract_accept)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: contract_accept, Value: #prefix_subject_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: contract_accept_params, Value: #prefix_subject_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                            }\n                        }\n                        \n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_reject, Value: #prefix_subject_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #prefix_subject_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectContract)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_decision_document",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\n        DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->text\").Where(\"voting_id=#vID#\").Vars(prefix)\n        \n        If(2>0){\n        }.Else{\n            SetVar(Name: prefix_subject_text, Value: \"\")\n        }\n        \n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-12 mt-sm){\n                                    Label(){\n                                        Span(Body: LangRes(text_document))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                    Input(Name: text_document, Type: textarea, Value: #prefix_subject_text#)\n                                }\n                            }\n                        }\n                        Div(form-group){\n                            Div(row mb-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row mb-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                            Div(row mb-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        \n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectDocument)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_decision_election",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\n        \n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(candidates)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Div(input-group){\n                                        DBFind(Name: members, Source: src_members).Columns(\"id,member_name\").Custom(custom_username){\n                                            #member_name# (Address(#id#) )\n                                        }\n                                        Select(Name: memberID, Source: src_members, NameColumn: custom_username, ValueColumn: id)\n                                        Div(input-group-btn){\n                                            Button(Body: LangRes(add), Class: btn btn-primary, Page: voting_decision_election, PageParams: \"vID=#vID#\", Contract: voting_SubjectCandidates)\n                                        }\n                                    }\n                                }\n                            }\n                            Div(row df){\n                                Div(col-lg-8 col-lg-offset-3){\n                                    DBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\n                                        Address(#subject.member_id#)\n                                    }.Custom(custom_member){\n                                        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\n                                            Span(Body: #subject.member_name#)\n                                        }\n                                    }\n                                    Table(src_subject, \"$candidates$=custom_member,$address$=custom_address\")\n                                }\n                            }\n                        }\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(role)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"role_type=2 and deleted=0\")\n                                    Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                                }\n                            }\n                            \n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(vacancies)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\n                                }\n                            }\n                        }\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_decision_formal",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\n        DBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->column,subject->column_value,subject->table_id,subject->table,subject->description\").Where(\"voting_id=#vID#\").Vars(prefix)\n        \n        If(2>0){\n        }.Else{\n            SetVar(Name: prefix_subject_description, Value: \"\")\n            SetVar(Name: prefix_subject_table, Value: \"\")\n            SetVar(Name: prefix_subject_table_id, Value: \"\")\n            SetVar(Name: prefix_subject_column, Value: \"\")\n            SetVar(Name: prefix_subject_column_value, Value: \"\")\n        }\n        \n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(table_to_written))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: table_to_written, Value: #prefix_subject_table#, Placeholder: \"$table_to_written_desc$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(row_id))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: row_id, Class: form-control, Type: number, Value: #prefix_subject_table_id#, Placeholder: \"$row_id_desc$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(column_name))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: column_name, Value: #prefix_subject_column#, Placeholder: \"$column_name_desc$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(written_value))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: written_value, Value: #prefix_subject_column_value#, Placeholder: \"$written_value_desc$\")\n                                }\n                            }\n                        }\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-lg text-right){\n                                    Label(){\n                                        Span(Body: LangRes(description))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: description, Class: form-control, Type: textarea, Value: #prefix_subject_description#)\n                                }\n                            }\n                        }\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectFormal)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_invite",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,voting->type_participants\").Where(\"id=#vID#\").Vars(instance)\n        \n        SetTitle($participants$)\n        Div(breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $participants$)\n        }\n        \n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(participants)}\n                    Div(panel-body){\n                        Div(form-group){\n                            If(#instance_voting_type_participants# == 1){\n                                Div(row){\n                                    Div(col-md-12){\n                                        Input(Name: voting_all_members, Disabled: 1, Value: \"$voting_all_members$\")\n                                    }\n                                }\n                            }\n                            If(#instance_voting_type_participants# == 2){\n                                Div(row){\n                                    Div(col-md-12){\n                                        Label(){\n                                            Span(Body: LangRes(select_member))\n                                            Span(Class: text-danger, Body:*)\n                                        }\n                                        DBFind(Name: members, Source: src_members).Columns(\"id,member_name\").Custom(custom_username){\n                                            #member_name# (Address(#id#) )\n                                        }\n                                        Select(Name: var_id, Source: src_members, NameColumn: custom_username, ValueColumn: id)\n                                    }\n                                }\n                            }\n                            If(#instance_voting_type_participants# == 3){\n                                Div(row){\n                                    Div(col-md-12){\n                                        Label(){\n                                            Span(Body: LangRes(select_role))\n                                            Span(Class: text-danger, Body:*)\n                                        }\n                                        DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"deleted=0\")\n                                        Select(Name: var_id, Source: src_roles, NameColumn: role_name, ValueColumn: id)\n                                    }\n                                }\n                            }\n                        }\n                        DBFind(Name: votings_participants, Source: src_participants).Columns(\"id\").Where(\"voting_id=#vID#\").Vars(participant)\n                        If(#participant_id#>0){\n                            Div(form-group){\n                                Div(row){\n                                    Div(col-md-12){\n                                        DBFind(Name: votings_participants, Source: src_participants).Columns(\"id,member->member_id,member->member_name\").Where(\"voting_id=#vID#\").Custom(custom_id){\n                                            Span(Body: #id#)\n                                        }.Custom(custom_member){\n                                            LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\n                                                Span(Body: #member.member_name#)\n                                            }\n                                        }\n                                        Table(src_participants, \"$id$=custom_id,$member_name$=custom_member\")\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                        If(#instance_voting_type_participants# == 2){\n                            Button(Body: LangRes(add_member), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\n                        }\n                        If(#instance_voting_type_participants# == 3){\n                            Button(Body: LangRes(add_role), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_list",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetTitle($voting$)\n    AddToolButton(Title: $create$, Page: voting_create, Icon: icon-plus)\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"voting->name='#v_Search#' and deleted=0\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"deleted=0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n\n    DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,voting->type,voting->type_decision,voting->type_participants,flags->notifics,flags->success,flags->decision,progress->percent_success,creator->member_id,creator->member_name,date_started,date_ended,deleted\").Custom(custom_id){\n        Span(Class: h5, Body: #id#)\n        SetVar(Name: vDateNow, Value: Now(\"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vStartDate, Value: DateTime(DateTime: #date_started#, Format: \"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vEndDate, Value: DateTime(#date_ended#, \"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vCmpStartDate, Value: CmpTime(#vStartDate#,#vDateNow#))\n        SetVar(Name: vCmpEndDate, Value: CmpTime(#vEndDate#,#vDateNow#))\n    }.Custom(custom_name){\n        LinkPage(Page: voting_view, PageParams: \"vID=#id#\"){\n            Span(Class: h5 text-bold, Body: #voting.name#)\n        }\n    }.Custom(custom_subject){\n        If(Or(#vCmpStartDate#<=0,#voting.type#==2)){\n            Span(Class: h6, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n        }.Else{\n            If(#voting.type_decision# == 1){\n                LinkPage(Page: voting_decision_candidates, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n                }\n            }\n            If(#voting.type_decision# == 2){\n                LinkPage(Page: voting_decision_election, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n                }\n            }\n            If(#voting.type_decision# == 3){\n                LinkPage(Page: voting_decision_document, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n                }\n            }\n            If(#voting.type_decision# == 4){\n                LinkPage(Page: voting_decision_formal, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n                }\n            }\n            If(#voting.type_decision# == 5){\n                LinkPage(Page: voting_decision_contract, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n                }\n            }\n        }\n    }.Custom(custom_participants){\n        If(Or(#vCmpStartDate#<=0,#voting.type#==2)){\n            Span(Class: h6, Body: AppParam(App:#app_id#, Name: type_voting_participants, Index: #voting.type_participants#))\n        }.Else{\n            LinkPage(Page: voting_invite, PageParams: \"vID=#id#\"){\n                Span(Class: h6 text-bold, Body: AppParam(App:#app_id#, Name: type_voting_participants, Index: #voting.type_participants#))\n            }\n        }\n    }.Custom(custom_notifics){\n        If(#flags.notifics# == 1){\n            Div(Class: text-center text-bold, Body: LangRes(yes))\n        }.Else{\n            If(And(#flags.success#!=1,#vCmpEndDate#>0,#vCmpStartDate#<0,#creator.member_id#==-5170274876521810367)){\n                Div(Class: text-center, Body: Button(Body: LangRes(send), Class: btn btn-primary, Contract: voting_SendNotifics, Params: \"votingID=#id#\", Page: voting_list))\n            }.Else{\n                Div(Class: text-center text-bold, Body: LangRes(no))\n            }\n        }\n    }.Custom(custom_creator){\n        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\n            Span(Body: #creator.member_name#)\n        }\n    }.Custom(custom_date){\n        If(#vCmpStartDate# < 0){\n            Div(Class: text-muted, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: text-bold, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n        If(#vCmpEndDate# < 0){\n            Div(Class: text-muted, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: text-bold, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n    }.Custom(custom_type){\n        Span(Class: h6, Body: AppParam(App:#app_id#, Name: type_voting, Index: #voting.type#))\n    }.Custom(custom_progress){\n        Div(Class: text-center h5 text-bold, Body: #progress.percent_success# %)\n    }.Custom(custom_decision){\n        If(#flags.decision# == 0){\n            If(And(#vCmpEndDate#<0,#creator.member_id#==-5170274876521810367)){\n                Div(Class: text-center, Body: Button(Body: LangRes(decision), Class: btn btn-primary, Contract: voting_CheckDecision, Params: \"votingID=#id#\", Page: voting_list))\n            }.Else{\n                Div(Class: text-muted text-center, Body: LangRes(no))\n            }\n        }\n        If(#flags.decision# == -2){\n            Div(Class: text-muted text-center, Body: LangRes(not_enough_votes))\n        }\n        If(#flags.decision# == 1){\n            Div(Class: text-success text-center, Body: LangRes(accepted))\n        }\n        If(#flags.decision# == -1){\n            Div(Class: text-danger text-center, Body: LangRes(rejected))\n        }\n    }.Custom(custom_status){\n        If(#flags.success# == 1){\n            Div(Class: text-success text-center, Body: LangRes(success))\n        }.Else{\n            If(#vCmpEndDate# < 0){\n                Div(Class: text-muted text-center, Body: LangRes(finished))\n            }.Else{\n                If(#vCmpStartDate# < 0){\n                    Div(text-center){\n                        Button(Class: btn btn-link, Page: voting_view, PageParams: \"vID=#id#\"){\n                            Span(Class: h4, Body: Em(Class: fa icon-eye))\n                        }\n                    }\n                }.Else{\n                    Div(Class: text-warning text-center, Body: LangRes(waiting))\n                }\n            }\n        }\n    }.Custom(actions){\n        Div(text-right){\n            If(#vCmpStartDate# > 0){\n                Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: voting_Delete, Params: \"votingID=#id#\", Page: voting_list).Alert(Text: $want_delete_voting$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n            }\n        }\n    }.Where(#v_Where#).Order(id desc)\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-1 mt-sm text-right){\n                    Label(For: Search){\n                        Span(Body: LangRes(name))\n                    }\n                }\n                Div(col-md-11){\n                    Div(input-group){\n                        Input(Name: Search, Value: #v_Search#)\n                        Div(input-group-btn){\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: voting_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(src_voting, \"$id$=custom_id,$name$=custom_name,$type$=custom_type,$subject_voting$=custom_subject,$participants$=custom_participants,$date_start$/$date_end$=custom_date,$creator$=custom_creator,$notifications$=custom_notifics,$progress$=custom_progress,$decision$=custom_decision,$status$=custom_status,=actions\")\n                }\n            }\n            If(GetVar(isSearch) == 1){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-default, Page: voting_list, PageParams: \"isSearch=0\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_view",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    If(#notific_id#>0){\r\n        DBFind(Name: notifications, Source: src_notifications).Where(\"id=#notific_id#\").Columns(\"page_params->voting_id\").Vars(notific)\r\n        SetVar(Name: vID, Value: #notific_page_params_voting_id#)\r\n    }\r\n\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,voting->volume,voting->quorum,voting->type,voting->type_decision,voting->description,optional->role_id,optional->role_vacancies,optional->number_candidates,optional->contract_accept,optional->contract_reject,progress->number_participants,progress->number_voters,progress->percent_success,progress->percent_voters,flags->success,flags->full_data,flags->decision,flags->notifics,date_started,date_ended\").Where(\"id=#vID#\").Vars(instance)\r\n\r\n        SetTitle(#instance_voting_name#)\r\n        Div(breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: #instance_voting_name#)\r\n        }\r\n\r\n        SetVar(Name: vDateNow, Value: Now(\"YYYY-MM-DD HH:MI\"))\r\n        SetVar(Name: vStartDate, Value: DateTime(DateTime: #instance_date_started#, Format: \"YYYY-MM-DD HH:MI\"))\r\n        SetVar(Name: vEndDate, Value: DateTime(#instance_date_ended#, \"YYYY-MM-DD HH:MI\"))\r\n        SetVar(Name: vCmpStartDate, Value: CmpTime(#vStartDate#,#vDateNow#))\r\n        SetVar(Name: vCmpEndDate, Value: CmpTime(#vEndDate#,#vDateNow#))\r\n\r\n        DBFind(Name: votings_participants, Source: src_check).Columns(\"id\").Where(\"voting_id=#vID# and member->member_id='#key_id#' and decision=0\").Vars(participant)\r\n        If(And(#vCmpStartDate#<0,#vCmpEndDate#>0,#instance_flags_full_data#==1,#instance_flags_decision#==0,#participant_id#>0)){\r\n            SetVar(Name: vOpportunityVote, Value: 1)\r\n        }.Else{\r\n            SetVar(Name: vOpportunityVote, Value: 0)\r\n        }\r\n\r\n        Div(row){\r\n            Div(col-lg-10 col-lg-offset-1){\r\n                Form(panel panel-default){\r\n                    Input(Type: hidden, Name: votingID, Value: #vID#)\r\n\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h3 text-bold m0, Body: #instance_voting_name#)\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm){\r\n                                P(Class: h5 text-muted m0, Body: AppParam(App:#app_id#, Name: type_voting_decisions, Index: #instance_voting_type_decision#))\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                P(Class: h5 text-muted m0, Body: LangRes(description))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                P(Class: h5 text-muted m0, Body: #instance_voting_description#)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center){\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                P(Class: h4 text-normal m0, Body: LangRes(type))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                P(Class: h4 text-normal m0, Body: AppParam(App:#app_id#, Name: type_voting, Index: #instance_voting_type#))\r\n                            }\r\n                        }\r\n                        If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2,#instance_voting_type_decision#==3,#instance_voting_type_decision#==4)){\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    P(Class: h4 text-normal m0, Body: LangRes(contract_accept))\r\n                                }\r\n                                Div(col-md-6 mt-sm text-left){\r\n                                    If(#instance_optional_contract_accept# == \"\"){\r\n                                        P(Class: h4 text-muted m0, Body: LangRes(optional))\r\n                                    }.Else{\r\n                                        P(Class: h4 text-normal m0, Body: #instance_optional_contract_accept#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    P(Class: h4 text-normal m0, Body: LangRes(contract_reject))\r\n                                }\r\n                                Div(col-md-6 mt-sm text-left){\r\n                                    If(#instance_optional_contract_reject# == \"\"){\r\n                                        P(Class: h4 text-muted m0, Body: LangRes(optional))\r\n                                    }.Else{\r\n                                        P(Class: h4 text-normal m0, Body: #instance_optional_contract_reject#)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                P(Class: h4 text-normal m0, Body: LangRes(filled))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                If(#instance_flags_full_data# == 1){\r\n                                    P(Class: h4 text-success m0, Body: LangRes(yes))\r\n                                }.Else{\r\n                                    P(Class: h4 text-danger m0, Body: LangRes(no))\r\n                                }\r\n                            }\r\n                        }\r\n                        If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    P(Class: h5 text-normal m0){\r\n                                        Span(Body: LangRes(role))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-6 mt-sm text-left){\r\n                                    If(#instance_optional_role_id# > 0){\r\n                                        DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"id=#instance_optional_role_id#\").Vars(prefix)\r\n                                        P(Class: h5 text-normal m0, Body: #prefix_role_name# (LangRes(id): #prefix_id#))\r\n                                    }.Else{\r\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    P(Class: h5 text-normal m0){\r\n                                        Span(Body: LangRes(vacancies))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-6 mt-sm text-left){\r\n                                    If(#instance_optional_role_vacancies# > 0){\r\n                                        P(Class: h5 text-normal m0, Body: #instance_optional_role_vacancies#)\r\n                                    }.Else{\r\n                                        P(Class: h5 text-danger m0, Body: #instance_optional_role_vacancies#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    P(Class: h5 text-normal m0){\r\n                                        Span(Body: LangRes(candidates))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-6 mt-sm text-left){\r\n                                    If(#instance_optional_number_candidates# > 0){\r\n                                        P(Class: h5 text-normal m0, Body: #instance_optional_number_candidates#)\r\n                                    }.Else{\r\n                                        P(Class: h5 text-danger m0, Body: #instance_optional_number_candidates#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\r\n                                        Span(Class: h6, Body: Address(#subject.member_id#))\r\n                                    }.Custom(custom_member){\r\n                                        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\r\n                                            Span(Body: #subject.member_name#)\r\n                                        }\r\n                                    }.Custom(custom_voting){\r\n                                        If(#vOpportunityVote#==1){\r\n                                            Button(Body: LangRes(vote), Class: btn btn-success, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_AcceptCandidates, Params: \"candidateID=#subject.member_id#\")\r\n                                        }\r\n                                    }.Order(\"id\")\r\n                                    Table(src_voting_subject, \"=custom_member,=custom_address,=custom_voting\")\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-12 mt-sm){\r\n                                    If(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\r\n                                        If(#instance_voting_type_decision#==1){\r\n                                            Button(Class: btn btn-link, Page: voting_decision_candidates, PageParams: \"vID=#vID#\"){\r\n                                                Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\r\n                                            }\r\n                                        }\r\n                                        If(#instance_voting_type_decision#==2){\r\n                                            Button(Class: btn btn-link, Page: voting_decision_election, PageParams: \"vID=#vID#\"){\r\n                                                Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==3){\r\n                            DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->text,subject->hash\").Where(\"voting_id=#vID#\").Vars(subject)\r\n                            Div(row){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2 mt-lg){\r\n                                    Div(list-group-item){\r\n                                        If(#subject_id# > 0){\r\n                                            P(Class: h5 text-normal m0, Body: #subject_subject_text#)\r\n                                        }.Else{\r\n                                            P(Class: h5 text-danger m0, Body: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                    Div(list-group-item){\r\n                                        If(#subject_id# > 0){\r\n                                            P(Class: h6 text-muted m0, Body: Hash: #subject_subject_hash#)\r\n                                        }.Else{\r\n                                            P(Class: h6 text-muted m0, Body: Hash: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-12 mt-sm){\r\n                                    If(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: voting_decision_document, PageParams: \"vID=#vID#\"){\r\n                                            Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#vOpportunityVote#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==4){\r\n                            DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->description,subject->table,subject->table_id,subject->column,subject->column_value\").Where(\"voting_id=#vID#\").Vars(subject)\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    P(Class: h5 text-normal m0){\r\n                                        Span(Body: LangRes(table_to_written))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-6 mt-sm text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        P(Class: h5 text-normal m0, Body: #subject_subject_table#)\r\n                                    }.Else{\r\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#instance_voting_type#==1){\r\n                                Div(row){\r\n                                    Div(col-md-6 mt-sm text-right){\r\n                                        P(Class: h5 text-normal m0){\r\n                                            Span(Body: LangRes(row_id))\r\n                                            Span(Class: text-danger, Body:*)\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-6 mt-sm text-left){\r\n                                        If(#subject_id# > 0){\r\n                                            P(Class: h5 text-normal m0, Body: #subject_subject_table_id#)\r\n                                        }.Else{\r\n                                            P(Class: h5 text-danger m0, Body: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    P(Class: h5 text-normal m0){\r\n                                        If(#instance_voting_type#==1){\r\n                                            Span(Body: LangRes(column_name))\r\n                                        }.Else{\r\n                                            Span(Body: LangRes(parameter_name))\r\n                                        }\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-6 mt-sm text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        P(Class: h5 text-normal m0, Body: #subject_subject_column#)\r\n                                    }.Else{\r\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    P(Class: h5 text-normal m0){\r\n                                        Span(Body: LangRes(written_value))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-6 mt-sm text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        P(Class: h5 text-normal m0, Body: #subject_subject_column_value#)\r\n                                    }.Else{\r\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    P(Class: h5 text-normal m0){\r\n                                        Span(Body: LangRes(description))\r\n                                    }\r\n                                }\r\n                                Div(col-md-6 mt-sm text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        If(#subject_subject_description# == \"\"){\r\n                                            P(Class: h5 text-muted m0, Body: LangRes(optional))\r\n                                        }.Else{\r\n                                            P(Class: h5 text-normal m0, Body: #subject_subject_description#)\r\n                                        }\r\n                                    }.Else{\r\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-12 mt-sm){\r\n                                    If(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: voting_decision_formal, PageParams: \"vID=#vID#\"){\r\n                                            Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#vOpportunityVote#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==5){\r\n                            DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->contract_accept,subject->contract_reject\").Where(\"voting_id=#vID#\").Vars(subject)\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    P(Class: h5 text-normal m0){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-6 mt-sm text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        P(Class: h5 text-normal m0, Body: #subject_subject_contract_accept#)\r\n                                    }.Else{\r\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    P(Class: h5 text-normal m0){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-6 mt-sm text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        P(Class: h5 text-normal m0, Body: #subject_subject_contract_reject#)\r\n                                    }.Else{\r\n                                        P(Class: h5 text-danger m0, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-12 mt-sm){\r\n                                    If(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: voting_decision_contract, PageParams: \"vID=#vID#\"){\r\n                                            Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#vOpportunityVote#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center){\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(status))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                If(#instance_flags_success#==1){\r\n                                    P(Class: h5 text-success m0, Body: LangRes(success))\r\n                                }.Else{\r\n                                    If(#vCmpEndDate#<0){\r\n                                        P(Class: h5 text-muted m0, Body: LangRes(finished))\r\n                                    }.Else{\r\n                                        If(#vCmpStartDate#<0){\r\n                                            P(Class: h5 text-success m0, Body: LangRes(started))\r\n                                        }.Else{\r\n                                            P(Class: h5 text-warning m0, Body: LangRes(waiting))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(notifications))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                If(#instance_flags_notifics#==1){\r\n                                    P(Class: h5 text-normal m0, Body: LangRes(yes))\r\n                                }.Else{\r\n                                    P(Class: h5 text-normal m0, Body: LangRes(no))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(decision))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                If(#instance_flags_decision#==-2){\r\n                                    P(Class: h5 text-normal m0, Body: LangRes(not_enough_votes))\r\n                                }\r\n                                If(#instance_flags_decision#==-1){\r\n                                    P(Class: h5 text-danger m0, Body: LangRes(rejected))\r\n                                }\r\n                                If(#instance_flags_decision#==0){\r\n                                    P(Class: h5 text-normal m0, Body: LangRes(no))\r\n                                }\r\n                                If(#instance_flags_decision#==1){\r\n                                    P(Class: h5 text-success m0, Body: LangRes(accepted))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(date_start))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                If(#vCmpStartDate#<0){\r\n                                    P(Class: h5 text-muted m0, Body: DateTime(DateTime: #instance_date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                }.Else{\r\n                                    P(Class: h5 text-normal m0, Body: DateTime(DateTime: #instance_date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(date_end))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                If(#vCmpEndDate#<0){\r\n                                    P(Class: h5 text-muted m0, Body: DateTime(DateTime: #instance_date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                }.Else{\r\n                                    P(Class: h5 text-normal m0, Body: DateTime(DateTime: #instance_date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(voting_volume))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #instance_voting_volume#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(voting_quorum))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #instance_voting_quorum#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(participants))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                If(#instance_progress_number_participants# > 0){\r\n                                    P(Class: h5 text-normal m0, Body: #instance_progress_number_participants#)\r\n                                }.Else{\r\n                                    P(Class: h5 text-danger m0, Body: #instance_progress_number_participants#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                DBFind(Name: votings_participants, Source: src_voting_participants).Columns(\"id,member->member_id,member->member_name,decision_date,decision\").Where(\"voting_id=#vID#\").Custom(custom_address){\r\n                                    P(Class: h6 m0, Body: Address(#member.member_id#))\r\n                                }.Custom(custom_member){\r\n                                    LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\r\n                                        Span(Body: #member.member_name#)\r\n                                    }\r\n                                }.Custom(custom_decision){\r\n\r\n                                    If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){\r\n                                        If(#decision#==0){\r\n                                            P(Class: h6 m0, Body: LangRes(did_not_vote))\r\n                                        }.Else{\r\n                                            P(Class: text-success text-center h6 m0, Body: $vote_for_candidate$:)\r\n                                            P(Class: text-success text-center h6 m0, Body: Address(#decision#) )\r\n                                            P(Class: text-success text-center h6 m0, Body: $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==3){\r\n                                        If(#decision#==0){\r\n                                            P(Class: h6 m0, Body: LangRes(did_not_vote))\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            P(Class: text-success h6 m0, Body: $document_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            P(Class: text-danger h6 m0, Body: $document_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==4){\r\n                                        If(#decision#==0){\r\n                                            P(Class: h6 m0, Body: LangRes(did_not_vote))\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            P(Class: text-success h6 m0, Body: $decision_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            P(Class: text-danger h6 m0, Body: $decision_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==5){\r\n                                        If(#decision#==0){\r\n                                            P(Class: h6 m0, Body: LangRes(did_not_vote))\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            P(Class: text-success h6 m0, Body: $contract_accepted$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            P(Class: text-danger h6 m0, Body: $contract_rejected$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                    }\r\n                                }.Order(\"id\")\r\n                                Table(src_voting_participants, \"=custom_member,=custom_decision\")\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm){\r\n                                If(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\r\n                                    Button(Class: btn btn-link, Page: voting_invite, PageParams: \"vID=#vID#\"){\r\n                                        Span(Class: h5 text-bold, Body: LangRes(participants_add))\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center){\r\n                        Div(row){\r\n                            Div(col-md-1 mt-sm)\r\n                            Div(col-md-5 mt-sm text-center){\r\n                                P(Class: h4 text-normal m0, Body: LangRes(voted))\r\n                            }\r\n                            Div(col-md-5 mt-sm text-center){\r\n                                P(Class: h4 text-normal m0, Body: LangRes(progress))\r\n                            }\r\n                            Div(col-md-1 mt-sm)\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-1 mt-sm)\r\n                            Div(col-md-5 mt-sm text-center){\r\n                                P(Class: h6 text-muted m0, Body: LangRes(voting_graph_voted))\r\n                            }\r\n                            Div(col-md-5 mt-sm text-center){\r\n                                P(Class: h6 text-muted m0, Body: LangRes(voting_graph_progress))\r\n                            }\r\n                            Div(col-md-1 mt-sm)\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-1 mt-sm)\r\n                            Div(col-md-5 mt-sm text-center){\r\n                                P(Class: h3 text-normal m0, Body: #instance_progress_number_voters# / #instance_progress_percent_voters#)\r\n                            }\r\n                            Div(col-md-5 mt-sm text-center){\r\n                                P(Class: h3 text-normal m0, Body: #instance_progress_percent_success# / 100)\r\n                            }\r\n                            Div(col-md-1 mt-sm)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "sysparams_candidate_validators_form",
            "Value": "Div(content-wrapper){\n    \n    SetTitle($sysparams_candidate_validators_form$)\n    Div(Class: breadcrumb){\n        LinkPage($sysparams_candidates$, sysparams_candidates)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $sysparams_candidate_validators_form$)\n    }\n    \n    Div(row){\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group) {\n                        Label(LangRes(host_ip)*)\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\n                        InputErr(Name: HostIp, minLength: Value is too short, maxLength: Value is too long)\n                    }\n                    If(){\n                        Div(form-group) {\n                            Label(LangRes(commission_pub)*)\n                            Input(Name: CommissionPub, Type: text).Validate(minLength:128)\n                            InputErr(Name: CommissionPub, minLength: Invalid pub-key)\n                        }\n                    }\n                    Div(form-group) {\n                        Label(LangRes(commission_address)*)\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\n                        InputErr(Name: CommissionAddress, minLength: Invalid address, maxLength: Invalid address)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(description_equipment))\n                        Input(Name: Description, Type: textarea)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(comment))\n                        Input(Name: Comment, Type: textarea)\n                    }\n                }\n\t\t\t\tDiv(panel-footer clearfix){\n\t\t\t\t\tDiv(pull-right){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_candidates)\n                    \tButton(Contract: sysparams_CandidateValidatorRequest, Class: btn btn-primary, Page: sysparams_candidates, Body: $send$)\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "sysparams_candidates",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetVar(template_id, AppParam(App:#app_id#, Name: voting_validators_template_id))\n    SetTitle($sysparams_candidates$)\n\n    DBFind(Name:sysparams_candidate, Source: src_candidates).Where(\"deleted=0\").Custom(_actions){\n        If(#template_id#>0){\n            Div(btn-group){\n                Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\n                Input(Name:TemplateId, Type: hidden, Value: #template_id#)\n                Button(Body: $voting_start$, Contract: voting_TemplateRun, Page: voting_list, Class: btn btn-success)\n            }\n        }.Else{\n            Button(Class: btn btn-warning icon-question, Page: sysparams_candidates).Alert(Text: $voting_template_not_found$, ConfirmButton: $yes$, CancelButton: $no$, Icon: info)\n        }\n\n    }.Custom(_date){\n        DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\n    }\n\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $sysparams_candidates$)\n    }\n\n    Div(row){\n        Div(col-md-12){\n            Div(panel panel-primary){\n                Form(table-responsive){\n                    Input(Name:Start, Type: hidden, Value: Now(\"YYYY-MM-DD\", +1 days))\n                    Input(Name:StartTime, Type: hidden, Value: Now(\"HH:MI\"))\n                    Input(Name:End, Type: hidden, Value: Now(\"YYYY-MM-DD\", +14 days))\n                    Input(Name:EndTime, Type: hidden, Value: Now(\"HH:MI\"))\n                    Table(Source: src_candidates, Columns: \"$id$=id,$host_ip$=host_ip,$commission_address$=commission_address,$description_equipment$=description,$comment$=comment,$date_created$=_date,=_actions\")\n                }\n                Div(panel-footer text-right){\n                    Button(Body: $add$, Class: btn btn-primary, Page: sysparams_candidate_validators_form)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "sysparams_ecos",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetVar(template_id, AppParam(App:#app_id#, Name: voting_ves_template_id))\n\n    SetTitle($sysparams_ecos$)\n    DBFind(Name: ecosystems, Source:ecos).Order(id).Custom(_actions){\n        If(#template_id#>0){\n            If(#is_valued#==0){\n                Input(Name: RowId, Type: hidden, Value: #id#)\n                Input(Name: NewValue, Type: hidden, Value: 1)\n                Button(Body: $start_voting_ves$, Class: btn btn-block btn-primary, Page: sysparams_ecos, Contract: voting_TemplateRun)\n            }\n        }.Else{\n            Span(voting id template not found in parameters, text-muted)\n        }\n    }.Custom(_valued){\n        If(#is_valued#==1){\n            is valued\n        }\n    }\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Form(table-responsive){\n                        Input(Name: TableWritten, Type: hidden, Value: ecosystems)\n                        Input(Name: ColumnName, Type: hidden, Value: is_valued)\n                        Input(Name: Start, Type: hidden, Value: Now(\"YYYY-MM-DD\"))\n                        Input(Name: End, Type: hidden, Value: Now(\"YYYY-MM-DD\", 3 days))\n                        Input(Name: StartTime, Type: hidden, Value: Now(\"HH:MI\", +5 minute))\n                        Input(Name: EndTime, Type: hidden, Value: Now(\"HH:MI\", +5 minute))\n                        Input(Name: TemplateId, Type: hidden, Value: #template_id#)\n                        Table(ecos, \"$name$=name,=_valued,=_actions\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "sysparams_list",
            "Value": "SetTitle($system_params$)\nJsonToSource(nodes){SysParam(full_nodes)}\nForList(nodes){\n    Div(-5170274876521810367)\n}\nDiv(content-wrapper){\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $system_params$)\n    }\n    Div(row){\n        Div(col-sm-12 col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-sm-4 text-center){Strong($name$)}\n                            Div(col-sm-6 text-center){Strong($value$)}\n                        }\n                    }\n                    Data(Source: src_parameters, Columns: name){\n                        gap_between_blocks\n                        default_ecosystem_page\n                        full_nodes\n                        ecosystem_price\n                        blockchain_url\n                        max_block_size\n                    }\n                    ForList(Source: src_parameters, Index: index){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-sm-4){\n                                    #name#\n                                }\n                                Div(col-sm-6){\n                                    SysParam(#name#)\n                                }.Style(overflow:hidden;)\n                                Div(col-sm-2){\n                                    Button(Body: $edit$, Class: btn btn-block btn-primary, Page: sysparams_voting, PageParams: \"param_index=#index#,param_name=#name#\", Contract: sysparams_UpdateFullNodesKeysList, Params: \"Param=#name#\")\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    DBFind(Name: roles_participants, Source: roles).Columns(\"id,member->member_id,role->id,role->name,deleted\").Where(\"member->member_id='-5170274876521810367' and role->id='3' and role->name='Validator' and deleted=0\").Vars(validator)\n    If(#validator_id#>0){\n        Div(row){\n            Div(col-md-6 col-md-offset-3){\n                Div(panel panel-primary text-center){\n                    Div(panel-heading){$validator_removing$}\n                    Div(panel-body text-center){$validator_removing_desc$}\n                    Div(panel-footer text-right){\n                        Button(Body: $resign$, Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_ValidatorResign).Alert(Text: $want_resign$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                    }\n                }\n            }\n        }\n    }\n}\nIf(){\n    default_ecosystem_menu\n    default_ecosystem_contract\n    rb_blocks_1\n    new_version_url\n    number_of_nodes\n    contract_price\n    column_price\n    table_price\n    menu_price\n    page_price\n    max_tx_size\n    max_tx_count\n    max_columns\n    max_indexes\n    max_block_user_tx\n    max_fuel_tx\n    max_fuel_block\n    commission_size\n    commission_wallet\n    fuel_rate\n    extend_cost_address_to_id\n    extend_cost_id_to_address\n    extend_cost_new_state\n    extend_cost_sha256\n    extend_cost_pub_to_id\n    extend_cost_ecosys_param\n    extend_cost_sys_param_string\n    extend_cost_sys_param_int\n    extend_cost_sys_fuel\n    extend_cost_validate_condition\n    extend_cost_eval_condition\n    extend_cost_has_prefix\n    extend_cost_contains\n    extend_cost_replace\n    extend_cost_join\n    extend_cost_update_lang\n    extend_cost_size\n    extend_cost_substr\n    extend_cost_contracts_list\n    extend_cost_is_object\n    extend_cost_compile_contract\n    extend_cost_flush_contract\n    extend_cost_eval\n    extend_cost_len\n    extend_cost_activate\n    extend_cost_deactivate\n    extend_cost_create_ecosystem\n    extend_cost_table_conditions\n    extend_cost_create_table\n    extend_cost_perm_table\n    extend_cost_column_condition\n    extend_cost_create_column\n    extend_cost_perm_column\n    extend_cost_json_to_map\n    max_block_generation_time\n    block_reward\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "sysparams_voting",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetVar(template_id, AppParam(App:#app_id#, Name: voting_sysparams_template_id))\n    SetTitle($voting$)\n\n    Div(breadcrumb){\n        LinkPage($system_params$, sysparams_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $voting$)\n    }\n\n    If(And(#template_id#>0,#param_index#>0,#param_name#!=\"\")){\n        Div(row){\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                If(#param_name#==\"full_nodes\"){\n                    Form(panel panel-primary){\n                        Input(Name: Start, Type: hidden, Value: Now(\"YYYY-MM-DD\"))\n                        Input(Name: End, Type: hidden, Value: Now(\"YYYY-MM-DD\", 21 days))\n                        Input(Name: StartTime, Type: hidden, Value: Now(\"HH:MI\", +5 minute))\n                        Input(Name: EndTime, Type: hidden, Value: Now(\"HH:MI\", +5 minute))\n                        Input(Name: TemplateId, Type: hidden, Value: #template_id#)\n                        Div(panel-heading text-center h3){\n                            Span(#param_name#).Style(text-transform:uppercase;): Span($add$ $new_value$).Style(text-transform:lowercase;)\n                        }\n                        Data(new_node_form, \"name,type,placeholder,value\"){\n                            TcpAddress,text,tcp_address,\"\"\n                            ApiAddress,text,api_address,\"\"\n                            KeyId,number,key_id,-5170274876521810367\n                            PubKey,text,public_key,\"\"\n                        }\n                        Div(panel-body){\n                            ForList(new_node_form){\n                                Div(row form-group){\n                                    Div(col-md-3 text-right){\n                                        Label(For: #name#){LangRes(#name#)}\n                                    }\n                                    Div(col-md-9 text-left){\n                                        Input(Name: #name#, Placeholder: #placeholder#, Type: #type#, Value: #value#)\n                                    }\n                                }\n                            }\n                        }\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\n                            Button(Body: LangRes(voting), Class: btn btn-primary, Contract: sysparams_StartNodeAdd, Page: voting_list)\n                        }\n                    }\n                    AppParam(App:#app_id#, Name:full_nodes_keys, Source:src_keys)\n                    ForList(Source:src_catalog){\n                        If(#name#==\"key_id\"){\n                            SetVar(node_owner, 1)\n                        }\n                    }\n\n                    If(#node_owner#==1){\n                        Form(panel panel-primary){\n                            Div(panel-heading text-center h3){$delete_node$}\n                            Div(panel-body text-center){$delete_node_desc$}\n                            Div(panel-footer text-right){\n                                Button(Body: LangRes(delete), Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_RemoveNode)\n                            }\n                        }\n                    }\n                    If(\"\" != SysParam(full_nodes)){\n                        Div(panel panel-primary){\n                            Div(panel-heading text-center h3){full_nodes}\n                            Div(panel-body text-center){\n                                Div(col-sm-12 text-center){\n                                    SysParam(full_nodes)\n                                }.Style(overflow-x:hidden)\n                            }\n                        }\n                    }\n                }.Else{\n                    Form(panel panel-primary){\n                        Input(Name: Start, Type: hidden, Value: Now(\"YYYY-MM-DD\"))\n                        Input(Name: End, Type: hidden, Value: Now(\"YYYY-MM-DD\", 21 days))\n                        Input(Name: StartTime, Type: hidden, Value: Now(\"HH:MI\", +2 minute))\n                        Input(Name: EndTime, Type: hidden, Value: Now(\"HH:MI\", +2 minute))\n                        Input(Name: TemplateId, Type: hidden, Value: #template_id#)\n                        Div(panel-heading text-center h3){#param_name#}\n                        Div(panel-body){\n                            Div(form-group){\n                                Div(row){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Label(For: NewValue){LangRes(new_value)}\n                                    }\n                                    Div(col-md-9 mc-sm text-left){\n                                        Input(Name: NewValue, Value: \"SysParam(#param_name#)\", Type: textarea)\n                                    }\n                                }\n                            }\n                        }\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\n                            Button(Body: LangRes(voting), Class: btn btn-primary, Contract: voting_TemplateRun, Params: \"ColumnName=#param_name#\", Page: voting_list)\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        If(#param_index#>0){}.Else{\n            Div(col-md-12 alert alert-danger text-center){\n                Div(){LangRes(attention)}\n            }\n        }\n        If(#template_id#>0){}.Else{\n            Div(col-md-12 alert alert-danger text-center){\n                Div(){LangRes(voting_template_not_found)}\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "tokenrefund_list",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\n    SetTitle($tokenrefund_list$)\r\n\r\n    DBFind(Name: tokenrefund, Source: src).Order(id desc).Custom(_status){\r\n        If(#status#>0){\r\n            SetVar(sta,AppParam(App:#application_id#, Name: tokenrefund_status, Index: #status#))\r\n            LangRes(#sta#)\r\n        }.Else{\r\n            $tokenrefund_status0$\r\n        }\r\n    }.Custom(_result){\r\n        If(#result#>0){\r\n            SetVar(res,AppParam(App:#application_id#, Name: tokenrefund_result, Index: #result#))\r\n            LangRes(#res#)\r\n        }.Else{\r\n            $tokenrefund_result0$\r\n        }\r\n    }.Custom(_blocked){\r\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\r\n    }.Custom(_closed){\r\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\r\n    }.Custom(_accounts){\r\n        Div(){$tokenrefund_victim$: #victim_key_id#}\r\n        Div(){$tokenrefund_attacker$: #attacker_key_id#}\r\n    }.Custom(_voting){\r\n        LinkPage(Page: voting_view, PageParams: \"vID=#voting_id#\"){##voting_id#}\r\n    }\r\n\r\n    Div(panel panel-primary){\r\n        Div(table-responsive){\r\n            Table(Source: src, Columns: \"$accounts$=_accounts,$amount$=amount,$description$=note,$validator_id$=validator_id,$blocked_at$=_blocked,$voting$=_voting,$result$=_result,$status$=_status,$closed$=_closed\")\r\n        }\r\n\r\n        Form(panel-footer text-right){\r\n            Button(Body: $request_refund$, Class: btn btn-primary, Page: tokenrefund_start)\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "tokenrefund_start",
            "Value": "Data(Source: inputs, Columns:\"name,type,res,placeholder\"){\r\n    Amount,number,amount,\"\"\r\n    VictimAccount,text,tokenrefund_victim,\"Key ID or Wallet\"\r\n    SuspectAccount,text,tokenrefund_attacker,\"Key ID or Wallet\"\r\n    Note,textarea,description,\"\"\r\n}\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: $tokenrefund_start$)\r\n                Div(panel-body){\r\n                    ForList(Source: inputs){\r\n                        Div(row form-group){\r\n                            Div(col-sm-4){LangRes(#res#)}\r\n                            Div(col-sm-8){\r\n                                Input(Name: #name#, Type: #type#, Placeholder: #placeholder#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Input(Name: DateStart, Type: hidden, Value: Now(\"YYYY-MM-DD\"))\r\n                    Input(Name: DateEnd, Type: hidden, Value: Now(\"YYYY-MM-DD\", +2 day))\r\n                    Input(Name: DateNow, Type: hidden, Value: Now(\"YYYY-MM-DD HH:MI\"))\r\n                    Input(Name: TimeNow, Type: hidden, Value: Now(\"HH:MI\", +5 minute))\r\n                    Button(Body: $start_refund$, Contract: tokenrefund_Start, Page: tokenrefund_list, Class: btn btn-primary)\r\n                       Div(pull-left){\r\n                        Button(Class: icon-arrow-left btn btn-default, Page: tokenrefund_list)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "tokens_transfer",
            "Value": "SetTitle($tokens_transfer$)\r\nData(inputs, \"name,res\"){\r\n    RecipientId,recipient\r\n    Amount,amount\r\n}\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: LangRes(tokens_transfer))\r\n                Div(panel-body){\r\n                    ForList(inputs){\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 text-right){Label(LangRes(#res#))}\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: #name#, Value: \"\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Input(Name:SenderId, Value: #key_id#, Type:hidden)\r\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: tokens_transfer, Contract: TokensTransfer).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    DBFind(keys, src).Order(id).Custom(_address){\r\n        If(#id#==#key_id#){\r\n            Div(text-success){\r\n                Address(#id#)\r\n            }\r\n        }.Else{\r\n            Address(#id#)\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Table(src, \"=_address,Amount=amount\")\r\n        }\r\n    }\r\n    \r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_template_create",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetTitle($template_create$)\n\n    If(#TemplateId#>0){\n        DBFind(Name:voting_templates, Source: templates).Where(id=#TemplateId#).Vars(template)\n        SetVar(title, #template_title#)\n        SetVar(typevoting, #template_type_voting#)\n        SetVar(volume, #template_volume#)\n        SetVar(subj, #template_subject#)\n        SetVar(quorum, #template_quorum#)\n        SetVar(voters, #template_voters#)\n        SetVar(candidates, #template_voters#)\n        SetVar(vacancies, #template_vacancies#)\n        SetVar(contract_init, #template_init_contract#)\n        SetVar(contract_accept, #template_contract_accept#)\n        SetVar(accept_params, #template_accept_params#)\n        SetVar(contract_reject, #template_contract_reject#)\n        SetVar(reject_params, #template_reject_params#)\n\n    }.Else{\n        SetVar(template_id, 0)\n        SetVar(title, New voting)\n        SetVar(typevoting, 0)\n        SetVar(volume, 50)\n        SetVar(quorum, 50)\n        SetVar(subj, \"\")\n        SetVar(voters, \"\")\n        SetVar(candidates, \"\")\n        SetVar(vacancies, 1)\n        SetVar(contract_init, \"\")\n        SetVar(contract_accept, \"\")\n        SetVar(accept_params, \"\")\n        SetVar(contract_reject, \"\")\n        SetVar(reject_params, \"\")\n\n    }\n    If(#TypeDecision#>0){\n        SetVar(typedec, #TypeDecision#)\n    }.Else{\n        SetVar(typedec, 0)\n    }\n    If(#TypeParticipants#>0){\n        SetVar(typepart, #TypeParticipants#)\n    }.Else{\n        SetVar(typepart, 0)\n    }\n    AppParam(App:#app_id#, Name: type_voting_participants, Source: src_typepart)\n    AppParam(App:#app_id#, Name: type_voting, Source: src_typevoting)\n    AppParam(App:#app_id#, Name: type_voting_decisions, Source: src_typedec)\n    DBFind(Name: roles, Source: src_roles).Where(\"deleted=0\").Order(id).Custom(name){\n        #role_name#\n    }\n\n    If(#typedec#>0){\n        Data(data_inputs, Columns: \"data\"){\n            commons_req\n            decisions\n            participants\n            commons\n        }\n        Data(commons_req, Columns: \"name,type,res,star,value,control,src,desc\"){\n            Title,text,name,*,#title#,input,\"\",\"\"\n            TypeParticipants,text,participants,*,#typepart#,disabled,\"AppParam(App:#app_id#, Name: type_voting_participants, Index: #typepart#)\",\"\"\n            TypeDecision,text,decision,*,#typedec#,disabled,\"AppParam(App:#app_id#, Name: type_voting_decisions, Index: #typedec#)\",\"\"\n            TypeVoting,text,voting_type,*,#typevoting#,select,src_typevoting,\"\"\n            Volume,number,voting_volume,*,#volume#,validate,\"\",$voting_volume_desc$\n            Quorum,number,voting_quorum,*,#quorum#,validate,\"\",$voting_quorum_desc$\n            Subject,text,voting_subject,*,#subj#,input,\"\",\"\"\n        }\n        Data(commons, Columns: \"name,type,res,star,value,control,src,desc\"){\n            InitContract,text,voting_init_contract,\"\",#contract_init#,input,\"\",$voting_init_contract_desc$\n            ContractAccept,text,voting_contract_accept,\"\",#contract_accept#,contract,ParamsAccept,#accept_params#\n            ContractReject,text,voting_contract_reject,\"\",#contract_reject#,contract,ParamsReject,#reject_params#\n        }\n        If(Or(#typedec#==1,#typedec#==2)){\n            Data(decisions, Columns: \"name,type,res,star,value,control,src,desc\"){\n                Vacancies,number,vacancies,\"*\",#vacancies#,input,\"\",\"\"\n                Candidates,text,candidates_role,\"*\",#voters#,select,src_roles,\"\"\n            }\n        }.Else{\n            Data(decisions, Columns: \"name,type,res,star,value,control,src,desc\"){}\n        }\n        If(#typepart#==3){\n            Data(participants, Columns: \"name,type,res,star,value,control,src,desc\"){\n                Voters,text,voters_role,\"*\",#voters#,select,src_roles,\"\"\n            }\n        }.Else{\n            Data(participants, Columns: \"name,type,res,star,value,control,src,desc\"){}\n        }\n    }.Else{\n        Data(data_inputs, Columns: \"data\"){\n            commons\n        }\n        Data(commons, Columns: \"name,type,res,star,value,control,src,desc\"){\n            TypeDecision,text,decision,*,#typedec#,radio,src_typedec,\"\"\n            TypeParticipants,text,participants,*,#typepart#,select,src_typepart,\"\"\n        }\n    }\n    Div(breadcrumb){\n        LinkPage($voting_templates$, voting_templates)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $template_create$)\n    }\n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(voting_params)}\n                Div(panel-body){\n                    ForList(data_inputs){\n                        ForList(#data#){\n                            Div(row form-group){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: #name#){\n                                        LangRes(#res#)\n                                        If(#star#==\"*\"){\n                                            Span(Class: text-danger, Body:*)\n                                        }\n                                    }\n                                }\n                                Div(col-md-8 text-left){\n                                    If(#control#==\"select\"){\n                                        Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id, Value: #value#)\n                                    }\n                                    If(#control#==\"disabled\"){\n                                        #src#\n                                        Input(Name: #name#, Type: hidden, Value: #value#)\n                                    }\n                                    If(#control#==\"input\"){\n                                        Input(Name: #name#, Value: #value#, Type: #type#)\n                                    }\n                                    If(#control#==\"validate\"){\n                                        Input(Name: #name#, Type: #type#, Value: #value#).Validate(minLength: 1)\n                                        InputErr(Name: #name#, minLength: Please enter #name#)\n                                    }\n                                    If(#control#==\"contract\"){\n                                        Div(row){\n                                            Div(col-md-6){\n                                                Input(Name: #name#, Type: #type#, Placeholder: $contract$, Value: #value#)\n                                            }\n                                            Div(col-md-6){\n                                                Input(Name: #src#, Type: #type#, Placeholder: $arguments$, Value: #desc#)\n                                            }\n                                        }\n                                    }\n                                    If(#control#==\"radio\"){\n                                        RadioGroup(Name: #name#, Value: #value#, Source: #src#, ValueColumn: id, NameColumn: name)\n                                    }\n                                    If(And(#desc#!=\"\",#desc#!=\"NULL\")){\n                                        P(Class: m0 text-muted, Body: #desc#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                Div(panel-footer text-right){\n\n                    If(#typedec#>0){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\n                        Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_templates, Contract: voting_TemplateStore)\n                    }.Else{\n                        If(#TemplateId#>0){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_start, PageParams: \"TemplateId=#TemplateId#\")\n                        }.Else{\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\n                        }\n                        Button(Body: LangRes(next), Class: btn btn-primary, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#,TypeDecision=Val(TypeDecision),TypeParticipants=Val(TypeParticipants)\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_template_start",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetTitle($voting_start$)\n    If(#TemplateId#>0){\n        DBFind(Name:voting_templates, Source: templates).Where(id=#TemplateId#).Vars(template)\n        If(#template_voters#>0){\n            DBFind(Name:roles, Source: vid_roles).Columns(\"role_name\").Where(\"id=#template_voters#\").Vars(vid)\n            SetVar(v_role, \"#vid_role_name#\")\n        }.Else{\n            SetVar(v_role, \"\")\n        }\n\n        If(#template_candidates#>0){\n            DBFind(Name:roles, Source: cid_roles).Columns(\"role_name\").Where(\"id=#template_candidates#\").Vars(cid)\n            SetVar(c_role, \"#cid_role_name#\")\n        }.Else{\n            SetVar(c_role, \"\")\n        }\n        Data(inputs, \"res,value\"){\n            name,\"#template_title#\"\n            participants,\"AppParam(App:#app_id#, Name: type_voting_participants, Index: #template_type_participants#)\"\n            voting_type,\"AppParam(App:#app_id#, Name: type_voting, Index: #template_type_voting#)\"\n            decision,\"AppParam(App:#app_id#, Name: type_voting_decisions, Index: #template_type_decision#)\"\n            voting_volume,\"#template_volume#\"\n            voting_quorum,\"#template_quorum#\"\n            voting_subject,\"#template_subject#\"\n            voters,\"#v_role#\"\n            candidates,\"#c_role#\"\n            vacancies,\"#template_vacancies#\"\n            init_contract,\"#template_init_contract#\"\n            voting_contract_accept,\"#template_contract_accept#(#template_accept_params#)\"\n            voting_contract_reject,\"#template_contract_reject#(#template_reject_params#)\"\n            date_start,\"Input(Name:Start, Type: date)\"\n            date_end,\"Input(Name:End, Type: date)\"\n        }\n\n        If(#template_type_decision#==3){\n            Data(decision_inputs, Columns: \"name,type,res,star,value,control\"){\n                TextDocument,textarea,text_document,*,\"\",textarea\n            }\n        }.Else{\n            If(#template_type_decision#==4){\n                Data(decision_inputs, Columns: \"name,type,res,star,value,control\"){\n                    TableWritten,text,table_to_written,*,\"\",input\n                    RowId,number,row_id,*,\"\",input\n                    ColumnName,text,column_name,*,\"\",input\n                    NewValue,text,written_value,*,\"\",input\n                }\n            }.Else{\n                Data(decision_inputs, Columns: \"name,type,res,star,value,control\"){}\n            }\n        }\n    }\n    Div(breadcrumb){\n        LinkPage($voting_templates$, voting_templates)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $voting_start$)\n    }\n\n    If(#TemplateId#>0){\n        Div(row){\n            Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(voting_params)}\n                    Div(panel-body){\n                        ForList(inputs){\n                            Div(row form-group){\n                                Div(col-md-4 text-right){\n                                    Strong(LangRes(#res#))\n                                }\n                                Div(col-md-8 text-left){\n                                    If(\"#value#\"!=\"()\"){\n                                        #value#\n                                    }\n                                }\n                            }\n                        }\n                        ForList(decision_inputs){\n                            Div(row form-group){\n                                If(#control#!=\"textarea\"){\n                                    Div(col-md-4 mt-sm text-right){\n                                        Label(For: #name#){\n                                            LangRes(#res#)\n                                            If(#star#==\"*\"){\n                                                Span(Class: text-danger, Body:*)\n                                            }\n                                        }\n                                    }\n                                    Div(col-md-8 text-left){\n                                        If(#control#==\"input\"){\n                                            Input(Name: #name#, Value: #value#, Type: #type#)\n                                        }\n                                    }\n                                }\n                                If(#control#==\"textarea\"){\n                                    Div(col-md-12){\n                                        Label(For: #name#){LangRes(#res#)}\n                                        Input(Name: #name#, Type: textarea, Value: #value#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Input(Name:StartTime, Type: hidden, Value: Now(\"HH:MI\", 5 minutes))\n                    Div(panel-footer){\n                        Div(pull-left){\n                            Button(Class: fa fa-copy btn btn-default, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\n                        }\n                        Div(text-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\n                            Button(Body: LangRes(voting_start), Class: btn btn-primary, Page: voting_list, Contract: voting_TemplateRun, Params: \"TemplateId=#TemplateId#\")\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(col-md-12 alert alert-danger text-center){\n            LangRes(attention)\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "voting_templates",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetTitle($voting_templates$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $voting_templates$)\n    }\n    DBFind(Name:voting_templates, Source: templates).Order(id desc).Custom(_participants){\n        AppParam(App:#app_id#, Name:type_voting_participants, #type_participants#)\n    }.Custom(_decision){\n        AppParam(App:#app_id#, Name:type_voting_decisions, #type_decision#)\n    }.Custom(_type){\n        AppParam(App:#app_id#, Name:type_voting, #type_voting#)\n    }.Custom(_buttons){\n        Button(Class: btn btn-success, Page: voting_template_start, PageParams: \"TemplateId=#id#\", Body: $use$)\n    }.Custom(_contracts){\n        If(And(#init_contract#!=\"\",#init_contract#!=\"NULL\")){\n            Div(){#init_contract#}\n        }\n        If(And(#contract_accept#!=\"\",#contract_accept#!=\"NULL\")){\n            Div(){#contract_accept#}\n        }\n        If(And(#contract_reject#!=\"\",#contract_reject#!=\"NULL\")){\n            Div(){#contract_reject#}\n        }\n    }.Custom(_vq){\n        #volume#/#quorum#\n    }\n\n    Div(panel panel-primary){\n        Form(){\n            Div(table-responsive){\n                Table(Source: templates, Columns:\"id=id,$title$=title,$voting_subject$=subject,$volume$/$quorum$=_vq,$voting_type$=_type,$participants$=_participants,$decision$=_decision,$vacancies$=vacancies,$contracts$=_contracts,=_buttons\")\n            }\n            Div(panel-footer text-right){\n                Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_template_create)\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "tokenrefund_accept",
            "Value": "If(#notific_id#>0){\r\n    DBFind(notifications).WhereId(#notific_id#).Columns(\"page_params->tokenrefund_id\").Vars(note)\r\n    DBFind(tokenrefund).WhereId(#note_page_params_tokenrefund_id#).Vars(tr)\r\n\r\n    Data(inputs,\"Name,Type,Res,Value\"){\r\n        Amount,number,amount,#tr_amount#\r\n        VictimAccount,text,tokenrefund_victim,#tr_victim_key_id#\r\n        SuspectAccount,text,tokenrefund_attacker,#tr_attacker_key_id#\r\n        Note,textarea,description,#tr_note#\r\n    }\r\n    Div(content-wrapper){\r\n        Div(row){\r\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n                Div(panel panel-primary){\r\n                    Div(panel-heading, Body: $tokenrefund_start$)\r\n                    Div(panel-body){\r\n                        ForList(inputs){\r\n                            Div(row form-group){\r\n                                Div(col-sm-4){LangRes(#Res#)}\r\n                                Div(col-sm-8){\r\n                                    If(#Type#==textarea){\r\n                                        #Value#\r\n                                    }.Else{\r\n                                        Input(Name: #Name#, Type: #Type#, Value: #Value#, Class: disabled, Disabled: true)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: $approve$, Contract: tokenrefund_Accept, Params: \"Id=#tr_id#\", Page: tokenrefund_list, Class: btn btn-primary)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "true",
            "Menu": "default_menu"
        },
        {
            "Type": "app_params",
            "Name": "catalog_ecosystems_freetype",
            "Value": "APL_not_required,APL_required",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "catalog_ecosystems_type",
            "Value": "public_org,business,finance",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "notification_closure",
            "Value": "single,multiple",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "notification_icon",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "notification_sender",
            "Value": "notification_sender_member,notification_sender_role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "notification_type",
            "Value": "single,role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "type_voting",
            "Value": "type_voting_custom,type_voting_system",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "type_voting_decisions",
            "Value": "voting_decisions_candidate_requests,voting_decisions_candidate_manual,voting_decisions_document,voting_decisions_db,voting_decisions_contract",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "type_voting_participants",
            "Value": "voting_participants_everybody,voting_participants_manual,voting_participants_role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "role_types",
            "Value": "assigned_role,elective_role,system_role,company_role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "investors_number",
            "Value": "1",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "last_ecosystem_number",
            "Value": "0",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "tokenrefund_result",
            "Value": "tokenrefund_result1,tokenrefund_result2,tokenrefund_result3",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "tokenrefund_status",
            "Value": "tokenrefund_status1,tokenrefund_status2,tokenrefund_status3",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "voting_sysparams_template_id",
            "Value": "2",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "voting_tokenrefund_template_id",
            "Value": "5",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "voting_validators_template_id",
            "Value": "1",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "app_params",
            "Name": "voting_ves_template_id",
            "Value": "3",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "tables",
            "Name": "catalog_ecosystems",
            "Columns": "[{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"image_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"flag_free\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"url_address\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_info\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"ecosystem_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"ecosystem_number\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}"
        },
        {
            "Type": "tables",
            "Name": "votings",
            "Columns": "[{\"name\":\"flags\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"voting\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"creator\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"optional\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"progress\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"date_ended\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"date_started\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}"
        },
        {
            "Type": "tables",
            "Name": "votings_participants",
            "Columns": "[{\"name\":\"member\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"decision\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"decision_date\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}"
        },
        {
            "Type": "tables",
            "Name": "votings_subject",
            "Columns": "[{\"name\":\"subject\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"number_accept\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}"
        },
        {
            "Type": "tables",
            "Name": "laws",
            "Columns": "[{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"page\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"voting_template_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}"
        },
        {
            "Type": "tables",
            "Name": "sysparams_candidate",
            "Columns": "[{\"name\":\"comment\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"host_ip\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"description\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"date_created\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"commission_pub\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"candidate_key_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"commission_address\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}"
        },
        {
            "Type": "tables",
            "Name": "tokenrefund",
            "Columns": "[{\"name\":\"note\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"amount\",\"type\":\"money\",\"conditions\":\"true\"},{\"name\":\"result\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"closed_at\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"blocked_at\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"victim_key_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"attacker_key_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"validator_key_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}"
        },
        {
            "Type": "tables",
            "Name": "voting_templates",
            "Columns": "[{\"name\":\"type\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"title\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"quorum\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"volume\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"voters\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"subject\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"type_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"vacancies\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"candidates\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"type_voting\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"accept_params\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"init_contract\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"reject_params\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"type_decision\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"contract_accept\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"contract_reject\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"type_participants\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}"
        }
    ]
}