Div(container){
    SetVar("table", "tests")
    Div(panel){
        Div(panel-heading){
            Case №1 Simple DBFind
        }
        Div(panel-body){
            DBFind(#table#, src1)
            Table(Source: src1, Columns: "Name=name,Name1=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №2 Simple DBFind with Columns
        }
        Div(panel-body){
            DBFind(#table#, src2).Columns("name, value->name1")
            Table(Source: src2, Columns: "Name=name,Name1=value.name1")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №3 DBFind with Where
        }
        Div(panel-body){
            DBFind(#table#, src3).Columns("name, value->name1").Where(value->name1 = 'value1')
            Table(Source: src3, Columns: "Name=name,Name1=value.name1")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №4 DBFind with WhereId
        }
        Div(panel-body){
            DBFind(#table#, src4).Columns("name, value->name1").WhereId(0)
            Table(Source: src4, Columns: "Name=name,Name1=value.name1")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №5 DBFind with simple Order
        }
        Div(panel-body){
            DBFind(#table#, src5).Order("name desc")
            Table(Source: src5, Columns: "Name=name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №6 DBFind with Order by json field
        }
        Div(panel-body){
            DBFind(#table#, src6).Order("value->name1 desc")
            Table(Source: src6, Columns: "Name=name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №7 DBFind with limit and offset
        }
        Div(panel-body){
            DBFind(#table#, src7).Limit(5).Offset(3)
            Table(Source: src7, Columns: "Name=name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №8 DBFind with count
        }
        Div(panel-body){
            DBFind(#table#, src8).Count(count)
            If( #count# > 0 ){
                Div(text-success){ Count is #count# }
            }.Else{
                Div(text-danger){ Count is #count# }
            }
            Table(Source: src8, Columns: "Name=name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №9 DBFind with current ecosystem #ecosystem_id#
        }
        Div(panel-body){
            DBFind(#table#, src9).Ecosystem( #ecosystem_id# )
            Table(Source: src9, Columns: "Name=name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №10 DBFind with incorrect ecosystem id -1
        }
        Div(panel-body){
            DBFind(#table#, src10).Ecosystem( -1 )
            Table(Source: src10, Columns: "Name=name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №11 DBFind with custom fields
        }
        Div(panel-body){
            DBFind(#table#, src11).Custom(custom_name){
                Strong(Class: text-success, Body: Custom #name#)
            }
            Table(Source: src11, Columns: "Name=custom_name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №12 DBFind with custom fields and replace value in other fields
        }
        Div(panel-body){
            DBFind(#table#, src12).Custom(custom_name){
                Strong(Class: text-success, Body: Custom #name#)
                SetVar("value", "New Value")
            }
            Table(Source: src12, Columns: "Name=custom_name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №13 DBFind with use global vars in custom
        }
        Div(panel-body){
            SetVar(global_var, "Global Var")
            DBFind(#table#, src13).Custom(custom_name){
                Strong(Class: text-success, Body: Custom #name# with #global_var#)
            }
            Table(Source: src13, Columns: "Name=custom_name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №14 DBFind with prefixed vars
        }
        Div(panel-body){
            DBFind(#table#, src14).Vars(prefix)
            Prefixed "name" value is #prefix_name#. Prefixed "value" value is #prefix_value#
            Table(Source: src14, Columns: "Name=name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №15 DBFind with prefixed vars and custom field
        }
        Div(panel-body){
            DBFind(#table#, src15).Vars(prefix).Custom(custom_name){
                Strong(Class: text-success, Body: Custom #name#)
            }
            Prefixed "name" value is #prefix_name#. Prefixed "value" value is #prefix_value#. Prefixed custom column "custom_name" is #prefix_custom_name#
            Table(Source: src15, Columns: "Name=custom_name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №16 DBFind with prefixed vars json vars
        }
        Div(panel-body){
            DBFind(#table#, src16).Vars(prefix).Columns("name,value->name1")
            Prefixed "name" value is #prefix_name#. Prefixed "value.name1" value is #prefix_value_name1#
            Table(Source: src16, Columns: "Name=name,Value=value.name1")
        }
    }
    Div(panel){
        Div(panel-heading text-center text-success){
            Span(Body: Try to inject some sql with DBFind).Style(font-size:20px;font-weight:bold;)
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №17 DBFind with sql in columns, select from other table(get name of current user)
        }
        Div(panel-body){
            DBFind(#table#, src17).Columns(name, value, (select member_name from "1_members" where id = '#key_id#') as name).Limit(1)
            Table(Source: src17, Columns: "Name=name,Value=value")
        }
    }
    Div(panel){
        Div(panel-heading){
            Case №18 DBFind try to execute second query(need pq error)
        }
        Div(panel-body){
            DBFind(#table#, src18).Columns(name, value FROM "1_parameters" ; UPDATE "1_parameters" set name = name + 'n' -- )
            Table(Source: src18, Columns: "Name=name,Value=value")
        }
    }
}