contract voting_TemplateRun{
    data{
        KeyId int "optional"
        TemplateId int
        Start string "date"
        StartTime string "date,optional"
        End string "date"
        EndTime string "date,optional"
    }
    
    func conditions{
        $template = DBFind("voting_templates").WhereId($TemplateId).Row()
        if !$template{
            warning "Voting template not found"
        }
        if $KeyId != 0{
            $keyFind = DBFind("keys").Where("id=?", $KeyId).Row()
            if !$keyFind{
                warning "Keyid not found"
            }
        }
        if $StartTime == ""{
            $StartTime = "00:00"
        }
        if $EndTime == ""{
            $EndTime = "23:59"
        }
        
        $condition = $template["init_condition"]
        ContractConditions($condition)
        
        $candidateRoleName = $template["precondition"]
        $votersRoleName = $template["voters"]
        $votingName = $template["title"]
        $volume = Int($template["volume"])
        $quorum = Int($template["quorum"])
        $typeVoting = Int($template["type_voting"])
        $typeParticipants = Int($template["type_participants"])
        $typeDecision = Int($template["type_decision"])
        $vacancies = Int($template["vacancies"])
        
        $desc = Sprintf("%v [#%v]", $votingName, $TemplateId)

        $contractAccept = $template["contract_accept"]
        $acceptParams = $template["contract_accept_params"]
        $contractReject = $template["contract_reject"]
        $rejectParams = $template["contract_reject_params"]
        
        $isCreated = DBFind("voting_instances").Where("name=? and description=? and delete=0", $votingName, $desc).Row()
        if $isCreated{
            // info "Voting already created" // must uncomment on prod
        }
        
        // if not special then use default
        $defaultParams = Sprintf("VotingTemplateId->%v;KeyId->%v", $TemplateId, $KeyId)
        if Size($acceptParams) == 0{
            $acceptParams = $defaultParams
        }
        if Size($rejectParams) == 0{
            $rejectParams = $defaultParams
        }
    }
    
    func action{
        var roleId int
        roleId = DBFind("roles_list").Where("role_name=? and delete=0", $votersRoleName).One("id")
        
        $voting_id = 0 // will be set in voting_CreateNew
        voting_CreateNew("voting_name,type_voting,description,type_participants,type_decision,now_date,start_time,start_date,end_date,end_time,volume,quorum", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $Start, $StartTime, $Start, $End, $EndTime, $volume, $quorum)
        if $voting_id == 0 {
            $voting_id = DBFind("voting_instances").Where("voting_name=? and start_date=?", $votingName, $Start).One("id")
            $voting_id = Int($voting_id)
        }
        // after success voting set Validator Role to Candidate
        voting_SubjectCandidates("votingID,memberID", $voting_id, $KeyId)
        voting_SubjectSettings("votingID,roleID,vacancies,contract_reject,contract_accept,accept_params,reject_params", $voting_id, roleId, $vacancies, "", $contractAccept, $acceptParams, $rejectParams)
        $value = Sprintf("%v : %v", $voting_id, roleId)
        
        voting_Invite("votingID,var_id", $voting_id, roleId)
        
    }
}