contract voting_SubjectSettings {
    data {
        votingID int
        
        roleID int
        vacancies int
        
        contract_reject string "optional"
        contract_accept string "optional"
        accept_params string "optional"
        reject_params string "optional"
    }
    
    conditions {
        if($vacancies < 1){
            warning "Number of vacancies can not be less than 1"
        }
        
        $voting_map = DBFind("voting_instances").Where("id=? and startdate > now()", $votingID).Row()
        if($voting_map["id"] == nil){
            warning "Voting already started. Change settings not allowed"
        }
        if((Int($voting_map["flag_fulldata"]) == 1) &&(Int($voting_map["type_voting"]) == 2) ){
            warning "This vote is a system. Change settings not allowed"
        }
        
        $role_map = DBFind("roles_list").Where("id=? and delete=0", $roleID).Row()
        if($role_map["id"] == nil){
            warning "Specified role not found"
        }
        if(Int($role_map["role_type"]) != 2){
            warning "The chosen role is not elective or has been removed"
        }
    }
    
    action {
        DBUpdate(`voting_instances`, $votingID, `optional_role_id,optional_role_vacancies,optional_contract_accept,optional_contract_reject,contract_accept_params,contract_reject_params`,
        $roleID, $vacancies, $contract_accept, $contract_reject, $accept_params, $reject_params)
        
        voting_SubjectCheckFulldata("votingID", $votingID)
    }
}