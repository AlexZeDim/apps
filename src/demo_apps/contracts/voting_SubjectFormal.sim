contract voting_SubjectFormal {
    data {
        votingID int
        
        description string
        table_to_written string
        row_id string
        column_name string
        written_value string
        
        contract_reject string "optional"
        contract_accept string "optional"
    }

    conditions {
		$voting_map = DBFind("voting_instances").Where("id=? and startdate > now()", $votingID).Row()
		if ($voting_map["id"] == nil){
			warning "Voting already started. Can not edit document"
		}		
		if ( (Int($voting_map["flag_fulldata"]) == 1) && (Int($voting_map["type_voting"]) == 2) ){
			warning "This vote is a system. Change settings not allowed"
		}
    }

    action {
		$subject_id = DBFind("voting_subject").Where("voting_id = $", $votingID).One("id")
		if ($subject_id != nil){
			DBUpdate(`voting_subject`, Int($subject_id), `formal_decision_description,formal_decision_table,formal_decision_tableid,formal_decision_column,formal_decision_colvalue`, 
				$description, $table_to_written, $row_id, $column_name, $written_value)
		} else {
			DBInsert(`voting_subject`, `voting_id,formal_decision_description,formal_decision_table,formal_decision_tableid,formal_decision_column,formal_decision_colvalue`, 
				$votingID, $description, $table_to_written, $row_id, $column_name, $written_value)
		}

		DBUpdate(`voting_instances`, $votingID, `optional_contract_accept,optional_contract_reject`, $contract_accept, $contract_reject)
		voting_SubjectCheckFulldata("votingID", $votingID)
    }
}