contract voting_RejectDecision {
    data {
        votingID int
    }

    conditions {
		$voting_map = DBFind("voting_instances").Where("id=$", $votingID).Row()
		if ($voting_map["id"] == nil){
			warning "Voting is not found"
		}
		
		// check the participant of the voting
		$participant_id = DBFind(`voting_participants`).Where("voting_id=$ and member_id=$", $votingID, $key_id).One("id")
		if ($participant_id == nil){
			warning "You are not a participant in this voting"
		}
    }

    action {
		// if notifications have been sent, then close it
		if ( Int($voting_map["flag_notifics"]) == 1 ){
			var params string
			params = "notific_param=" + Str($votingID)	
			$notific_id = DBFind(`notifications`).Where("recipient_id=$ and page_name=$ and page_params=$ and closed=$", $key_id, "voting_view", params, 0).One("id")
			if ($notific_id != nil){
				Notifications_Single_Close("notific_id", Int($notific_id))
			}
		}

		// check the decision
		if ( Int($voting_map["flag_decision"]) == 1 ){
			warning "Decision was taken. Voting is now not possible"
		} 
		
		// check start-end of voting time
		$voting_start = DBFind(`voting_instances`).Where("id=$ and startdate < now()", $votingID).One("id")
		$voting_end   = DBFind(`voting_instances`).Where("id=$ and enddate   > now()", $votingID).One("id")
		if ($voting_start == nil){
			warning "Voting has not yet begun. Try again later, please"
		}
		if ($voting_end == nil){
			warning "Voting has expired. Voting is now not possible"
		}
		
		//-----------------------------------------------------------------------------------------------

		// write the result of the voting
		DBUpdate(`voting_participants`, Int($participant_id), `timestamp decision_date, decision`, $block_time, -1)

		voting_UpdateDataForGraphs("votingID", $votingID)
    }
}