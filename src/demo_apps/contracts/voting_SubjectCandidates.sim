contract voting_SubjectCandidates {
    data {
        votingID int
        memberID int
    }

    conditions {
		$voting_map = DBFind("voting_instances").Where("id=$ and startdate > now()", $votingID).Row()
		if ($voting_map["id"] == nil){
			warning "Voting already started. New candidate can not be added"
		}		

		if ( (Int($voting_map["flag_fulldata"]) == 1) && (Int($voting_map["type_voting"]) == 2) ){
			warning "This vote is a system. Change settings not allowed"
		}
		
        if($memberID == 0){
            $memberID = $key_id
        }
		
		$subject_id = DBFind("voting_subject").Where("voting_id=$ and member_id=$", $votingID, $memberID).One("id")
		if ($subject_id != nil){
			warning "This candidature for this role has already been added before"
		}
	
		$member_map = DBFind("members").Where("id = $", $memberID).Row()
		if ($member_map["id"] == nil){
			warning "Member not found"
		}
		
		$optional_number_cands = Int($voting_map["optional_number_cands"])
    }

    action {
		DBInsert(`voting_subject`, `member_id,member_name,member_avatar,voting_id`, $memberID, $member_map["member_name"], $member_map["avatar"], $votingID)
	
		$optional_number_cands = $optional_number_cands + 1
		DBUpdate(`voting_instances`, $votingID, `optional_number_cands`, $optional_number_cands)

		voting_SubjectCheckFulldata("votingID", $votingID)
    }
}