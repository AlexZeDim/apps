contract voting_CheckDecision {
    func stringToMap(s string) map{
        var arr, par array
        var i int
        var res map
        arr = Split(s, ";")
        while i < Len(arr){
            par = Split(arr[i], "->")
            if Len(par) == 2{
                res[par[0]] = par[1]
            }
            i=i+1
        }
        return res
    }
    data {
        votingID int
    }
    
    conditions {
        $voting_map = DBFind("voting_instances").Where("id=$ and enddate < now()", $votingID).Row()
        if !$voting_map["id"]{
            warning "Voting has not expired. Try again later, please"
        }
        if Int($voting_map["creator_id"]) != $key_id {
            warning "Only creator the voting can check decision"
        }
        
        $type_voting = Int($voting_map["type_voting"])	//system or custom
        $number_voters = Int($voting_map["number_voters"]) // number of participants who have already voted
        $optional_role_vacancies = Int($voting_map["optional_role_vacancies"]) // number of vacancies for the role
        $voting_name = $voting_map["name"]
        $quorum = Int($voting_map["quorum"])
        $optional_role_id = Int($voting_map["optional_role_id"])
        $contract_accept = $voting_map["optional_contract_accept"]
        $contract_reject = $voting_map["optional_contract_reject"]
        $param_accept = stringToMap($voting_map["contract_accept_params"])
        $param_reject = stringToMap($voting_map["contract_reject_params"])
        $flag_success = Int($voting_map["flag_success"])
        $typedecision = Int($voting_map["typedecision"])
        
        $subjectId = DBFind("voting_subject").Where("voting_id=$", $votingID).One("id")
        if $subjectId == nil {
            warning "Subject of voting is not found"
        }
    }
    
    action {
        // if notifications have been sent, then close it
        var params string
        params = "notific_param=" + Str($votingID)
        $ret_notifics = DBFind("notifications").Where("page_name=$ and page_params=$ and closed=0", "voting_view", params)
        var i int
        while(i < Len($ret_notifics)){
            $vals_notifics = $ret_notifics[i]
            Notifications_Single_Close("notific_id", Int($vals_notifics["id"]))
            i = i + 1
        }
        
        //if the flag of success = true(enough participants to make a decision)
        if($flag_success == 1){
            if(($typedecision == 1) ||($typedecision == 2) ){
                $number_inserts = 0 // number of candidates who have already been added(for comparison with the number of vacancies)
                $flag_decision = -1 // none of the candidates has been added yet
                
                $ret_subject = DBFind("voting_subject").Where("voting_id=$", $votingID).Order("number_accept DESC")
                i = 0
                while i < Len($ret_subject){
                    $vals_subject = $ret_subject[i]
                    
                    // if there are still vacancies
                    if $number_inserts < $optional_role_vacancies {
                        // calculate the percentage to compare it with the quorum
                        $v_percent = Int($vals_subject["number_accept"]) * 100 / $number_voters
                        // if percentage >= quorum values, then this candidate must be added to the role
                        if $v_percent >= $quorum {
                            // get role name
                            $role_name = DBFind(`roles_list`).Where("id=$", $optional_role_id).One("role_name")
                            if $role_name != nil {
                                // add a candidate to the role
                                DBInsert(`roles_assign`, `role_id,role_name,member_id,member_name,member_avatar,timestamp date_start,appointed_by_id,appointed_by_name`,$optional_role_id, string($role_name), Int($vals_subject["member_id"]), string($vals_subject["member_name"]), string($vals_subject["member_avatar"]), $block_time, $votingID, $voting_name)
                                
                                // increment of the counter of candidates
                                $number_inserts = $number_inserts + 1
                                // if at least one of the candidates was added to the role, then the voting decision is considered successful
                                $flag_decision = 1
                            }
                        }
                    }
                    i = i + 1
                }
                
                DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)
                
                // starting optional contract
                if($flag_decision == 1){
                    if($contract_accept != ""){
                        CallContract($contract_accept, $param_accept)
                    }
                }
                else{
                    if($contract_reject != ""){
                        CallContract($contract_reject, $param_reject)
                    }
                }
            }
            
            if($typedecision == 3){
                $number_accept = DBFind(`voting_subject`).Where("voting_id=$", $votingID).One("number_accept")
                if($number_accept != nil){
                    // calculate the percentage to compare it with the quorum
                    $v_percent = Int($number_accept) * 100 / $number_voters
                    
                    // if percentage >= quorum values, then this document will be approved
                    if($v_percent >= $quorum){
                        $flag_decision = 1
                    }
                    // otherwise the document will be rejected
                    else{
                        $flag_decision = -1
                    }
                    
                    DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)
                    
                    // starting optional contract
                    if($flag_decision == 1){
                        if($contract_accept != ""){
                            CallContract($contract_accept, $param_accept)
                        }
                    }
                    else{
                        if($contract_reject != ""){
                            CallContract($contract_reject, $param_reject)
                        }
                    }
                }
            }
            
            if($typedecision == 4){
                $subject_map = DBFind("voting_subject").Where("voting_id=$", $votingID).Row()
                if($subject_map["id"] != nil){
                    $number_accept = Int($subject_map["number_accept"])
                    
                    // calculate the percentage to compare it with the quorum
                    $v_percent = $number_accept * 100 / $number_voters
                    
                    // if percentage >= quorum values, then this document will be approved
                    if($v_percent >= $quorum){
                        $flag_decision = 1
                        
                        $decisionTable = $subject_map["formal_decision_table"]
                        $decisionId = Int($subject_map["formal_decision_tableid"])
                        $decisionColumn =$subject_map["formal_decision_column"]
                        $decisionValue = $subject_map["formal_decision_colvalue"]
                        
                        // type of voting - custom
                        if($type_voting == 1){
                            // ALWAYS CHECK THE PERMISSION
                            DBUpdate($decisionTable, $decisionId, $decisionColumn, $decisionValue)
                        }
                        
                        // type of voting - system
                        if($type_voting == 2){
                            DBUpdateSysParam($decisionColumn, $decisionValue, ``)
                        }
                    }
                    // otherwise the document will be rejected
                    else{
                        $flag_decision = -1
                    }
                    
                    DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)
                    
                    // starting optional contract
                    if($flag_decision == 1){
                        if($contract_accept != ""){
                            CallContract($contract_accept, $param_accept)
                        }
                    }
                    else{
                        if($contract_reject != ""){
                            CallContract($contract_reject, $param_reject)
                        }
                    }
                }
            }
            
            if($typedecision == 5){
                $subject_map = DBFind("voting_subject").Where("voting_id=$", $votingID).Row()
                if($subject_map["id"] != nil){
                    $number_accept = Int($subject_map["number_accept"])
                    
                    // calculate the percentage to compare it with the quorum
                    $v_percent = $number_accept * 100 / $number_voters
                    
                    $con_accept = $subject_map["contract_accept"]
                    $con_accept = $subject_map["contract_accept"]
                    $param_accept = stringToMap($subject_map["contract_accept_params"])
                    $param_reject = stringToMap($subject_map["contract_reject_params"])
                    
                    // if percentage >= quorum values, then this document will be approved
                    if($v_percent >= $quorum){
                        $flag_decision = 1
                        
                        CallContract($con_accept, $param_accept)
                    }
                    // otherwise the document will be rejected
                    else{
                        $flag_decision = -1
                        
                        CallContract($con_reject, $param_reject)
                    }
                }
                
                DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)
            }
        }
        // decision can not be made(not enough participants to make a decision)
        else {
            DBUpdate(`voting_instances`, $votingID, `flag_decision`, -2)
        }
    }
}