Div(Class: content-wrapper){

	SetTitle($tranche$)
	Div(Class: breadcrumb){
		Span(Class: text-muted, Body: LangRes(tranche))
	}

    Div(Class: row df f-valign){
        Div(Class: col-md-3)
        Div(Class: col-md-6){

            DBFind(Name: accounts, Source: source_sender).Where("onhold=0 and account_type=4").Vars(prefix)

            Div(Class: panel panel-primary){
                Div(Class: panel-heading, Body: LangRes(tranche))
                Form(){

                    Div(Class: list-group-item){
                        Div(Class: row df f-valign){
                            Div(Class: col-md-3 mt-sm text-right){
                                Label(Body: LangRes(sender_account))
                            }
                            Div(Class: col-md-9 mt-sm text-left){
                                If(#prefix_account_type# > 0){
                                    Span(Class: h5, Body: EcosysParam(Name: tokens_accounts_systype, Index: #prefix_account_type#))
                                }.Else{
                                    Span(Class: h5 text-danger, Body: $emission_account_not_found$)
                                }
                            } 
                        }

                        Div(Class: row df f-valign){
                            Div(Class: col-md-3 mt-sm text-right){
                                Label(Body: LangRes(available))
                            }
                            Div(Class: col-md-9 mt-sm text-left){
                                If(#prefix_amount# > 0){
                                    Span(Class: h5, Body: #prefix_amount#)
                                }.Else{
                                    Span(Class: h5, Body: 0)
                                }
                            } 
                        }
                    }

                    Div(Class: list-group-item){
                        Div(Class: row df f-valign){
                            Div(Class: col-md-3 mt-sm text-right){
                                Label(For: recipient_id){
                                    Span(Body: LangRes(recipient_account))
                                }
                            }
                            Div(Class: col-md-9 mb-sm text-left){
                                DBFind(Name: accounts, Source: source_recipient).Custom(custom_username){
                                    Span(Class: h4 text-bold, Body: id: #id# ( EcosysParam(Name: tokens_accounts_systype, Index: #account_type#) ) - #member_name# ( Address(#member_id#) ) ) 
                                }.Where("onhold=0 and account_type<>4 and account_type<>5")
                                Select(Name: recipient_id, Source: source_recipient, NameColumn: custom_username, ValueColumn: id)
                            } 
                        }

                        Div(Class: row df f-valign){
                            Div(Class: col-md-3 mt-sm text-right){
                                Label(For: amount){
                                    Span(Body: LangRes(amount))
                                }
                            }
                            Div(Class: col-md-9 mc-sm text-left){
                                Input(Class: form-control, Placeholder: 0, Type: Number, Name: amount)
                            } 
                        }
                    }

                    Div(Class: panel-footer clearfix){
                        Div(Class: pull-right){
                            Button(Body: LangRes(back), Class: btn btn-default, Page: tokens_accounts_list)
                            If(#prefix_amount# > 0){
                                Button(Body: LangRes(send), Class: btn btn-primary, Page: tokens_accounts_list, Contract: Tokens_Tranche).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)
                            }
                        }
                    }
                }

            }
        }

        Div(Class: col-md-3)
    }
}