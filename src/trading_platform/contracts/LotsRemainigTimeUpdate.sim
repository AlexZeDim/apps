contract LotsRemainigTimeUpdate {
    data {}
    conditions {
        MainCondition()
        $statusBegin = 2
        $statusEnd = 3
    }
    func getRemainingTime(lot map) map {
        var day dDiff hour hDiff minute mDiff diff end now int lotEnd string prettyDiff map
        minute = 60
        hour = 3600 //60 * minute
        day = 86400 //24 * hour
        lotEnd = lot["date_end"]
        lotEnd = Replace(lotEnd, "T", " ")
        lotEnd = Replace(lotEnd, "Z", "")
        end = UnixDateTime(lotEnd)
        now = $block_time
        diff = end - now
        if diff <= 0{
            return prettyDiff
        }
        dDiff = Int(diff / day)
        if dDiff > 0{
            prettyDiff["days"] = dDiff
        }
        hDiff = Int((diff - dDiff * day) / hour)
        if hDiff > 0{
            prettyDiff["hours"] = hDiff
        }
        mDiff = Int((diff - dDiff * day - hDiff * hour) / minute)
        if mDiff > 0{
            prettyDiff["minutes"] = mDiff
        }
        return prettyDiff
    }
    action {
        var lots array lot map lenLots i int
        lots = DBFind("lots").Where("deleted=0 and (status=? or status=?)", $statusBegin, $statusEnd).Columns("date_end,id")
        if lots {
            lenLots = Len(lots)
            while i < lenLots{
                lot = lots[i]
                DBUpdate("lots", Int(lot["id"]), "remaining_time_json", getRemainingTime(lot))
                i = i + 1
            }
        }
    }
}