contract RopeWorksCalculate {
    data {}
    func extend(a, b array)array{
        var i lena lenb int
        lena = Len(a)
        lenb = Len(b)
        while i<lenb{
            a[lena+i] = b[i]
            i=i+1
        }
        return a
    }
    func findAll(table, where string) array {
        var full parts array limit offset int
        limit = 250
        while true {
            parts = DBFind(table).Where(where).Offset(offset).Limit(limit)
            if Len(parts) > 0 {
                if Len(full) == 0 {
                    full = parts
                }else{
                    full = extend(full, parts)
                }
            }else{
                break
            }
            offset = offset+limit
        }
        return full
    }
    func getAbsFloat(n float) float{
        if n < 0{
            return -1 * n
        }
        return n
    }
    func safeFloat(num ...)float{
        var res float
        if Len(num) != 0{
            if num[0] {
                res = Float(num[0])
            }
        }
        return res
    }
    func getMapValues(m map, keys array) array {
        var values array i keysLen int key string
        keysLen = Len(keys)
        while i < keysLen {
            key = keys[i]
            values = Append(values, m[key])
            i=i+1
        }
        return values
    }
    conditions {
        RopeRolesCondition()
        $appId = Int(DBFind("applications").Columns("id").Where("name='Rope accounting'").One("id"))
        var userRoles map
        userRoles[AppParam($appId, "rope_manufacturer_role_id")] = "manufacturer"
        userRoles[AppParam($appId, "rope_servicer_role_id")] = "servicer"
        userRoles[AppParam($appId, "rope_producer_role_id")] = "producer"
        $userRoles = userRoles
        $errorRate = safeFloat(AppParam($appId, "rope_depth_error_rate"))
    }

    action {
        Println($this_contract)
        var works array cols op string i lenWorks int work workPrev coil drilling map
        works = findAll("rope_works", "id>0")
        lenWorks = Len(works)

        var w1 w2 d1 d2 cl bw pw float
        while i<lenWorks {
            if i > 0 {
                workPrev = work
            }
            work = works[i]
            if work["coil_id"] != coil["id"]{
                coil = DBFind("rope_coils").Where("id=?", work["coil_id"]).Row()
            }
            if work["drilling_id"] != drilling["id"]{
                drilling = DBFind("rope_drillings").Where("id=?", work["drilling_id"]).Row()
                cl = safeFloat(drilling["candle_length"])
                bw = safeFloat(drilling["block_weight"])
                pw = safeFloat(drilling["previous_workout"])
            }
            op = work["operation_type"]
            w1 = safeFloat(work["weight_started"])
            w2 = safeFloat(work["weight_final"])
            d1 = safeFloat(work["depth_started"])
            if d1 == -1{
                d1 = 0
            }
            d2 = safeFloat(work["depth_final"])
            if d2 == -1{
                d2 = 0
            }
            // "Наработка Lн, тк.м"
            work["work_started"] = (w1 * (d1 + cl) + (4 * d1 * bw))/1000.0

            // "Наработка Lк, т.км"
            work["work_final"] = (w2 * (d2 + cl) + (4 * d2 * bw))/1000.0

            // "Наработка за операцию, т.км"
            if op == "Подъем"{
                work["work_operation"] = getAbsFloat(work["work_final"] - work["work_started"])*0.5
            }elif op == "Спуск"{
                work["work_operation"] = getAbsFloat(work["work_final"] - work["work_started"])*0.5
            }elif op == "СПО"{
                work["work_operation"] = getAbsFloat(work["work_final"] - work["work_started"])
            }elif op == "Бурение"{
                work["work_operation"] = getAbsFloat(work["work_final"] - work["work_started"])*3
            }elif op == "Отбор керна"{
                work["work_operation"] = getAbsFloat(work["work_final"] - work["work_started"])*2
            }elif op == "Проработка"{
                work["work_operation"] = getAbsFloat(work["work_final"] - work["work_started"])*2
            }elif op == "Шаблонировка"{
                work["work_operation"] = getAbsFloat(work["work_final"] - work["work_started"])*2
            }elif op == "Спуск обсадной колонны"{
                work["work_operation"] = work["work_final"]*0.5
            }elif op == "Технологическое СПО" {
                work["work_operation"] = getAbsFloat(work["work_final"] - work["work_started"])
            }elif op == "Аварийные работы"{
                work["work_operation"] = work["work_final"]*2
            }else{
                work["work_operation"] = 0
            }


            // "Наработка нарастающая до перепуска"
            if work["operation"] == 1 {
                work["work_bypass"] = work["work_operation"]
            }elif work["work_operation"] == 0 {
                work["work_bypass"] = 0
            }else{
                work["work_bypass"] = work["work_operation"] + workPrev["work_bypass"]
            }
            // "Наработка нарастающая на бухту"
            if work["operation"] == 1 {
                work["work_coil"] = work["work_bypass"] + pw
            }else{
                work["work_coil"] = work["work_operation"] + safeFloat(workPrev["work_coil"])
            }

            var keys values array
            if work["operation_date"] == ""{
                work["operation_date"] = "NULL"
            }
            keys = GetMapKeys(work)
            values = getMapValues(work, keys)
            DBUpdate("rope_works", Int(work["id"]), Join(keys,","), values...)
            i=i+1
        }

    }
}