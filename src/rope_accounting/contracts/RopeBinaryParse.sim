contract RopeBinaryParse {
    data {
        Id string "optional"
    }

    func appendAll(a array, b ...)array{
        var i lena lenb int
        lena = Len(a)
        lenb = Len(b)
        while i<lenb{
            a = Append(a, b[i])
            i=i+1
        }
        return a
    }
    func findAll(table, where, columns string) array {
        var full parts array limit offset int
        limit = 250
        while true {
            parts = DBFind(table).Where(where).Columns(columns).Offset(offset).Limit(limit)
            if Len(parts) > 0 {
                if Len(full) == 0 {
                    full = parts
                }else{
                    full = appendAll(full, parts...)
                }
            }else{
                break
            }
            offset = offset+limit
        }
        return full
    }
    func parseIdx(cells array) map{
        var idx map i cellsLen int s string
        // default idx
        idx["operation_date"] = 3
        idx["operation"] = 4
        idx["operation_type"] = 5
        idx["depth_started"] = 6
        idx["depth_final"] = 7
        idx["weight_started"] = 9
        idx["weight_final"] = 10
        idx["bypass_bracing"] = 17
        cellsLen = Len(cells)
        while i < cellsLen{
            // correction idx
            s = ToLower(TrimSpace(cells[i]))
            if HasPrefix(s, "дата") && Contains(s,"операции"){
                idx["operation_date"] = i
            }elif HasPrefix(s, "№") && Contains(s,"операции"){
                idx["operation"] = i
            }elif HasPrefix(s, "вид") && Contains(s,"работ") && Contains(s,"рейса"){
                idx["operation_type"] = i
            }elif HasPrefix(s, "глубина") && Contains(s,"начала"){
                idx["depth_started"] = i
            }elif HasPrefix(s, "глубина") && Contains(s,"конце") {
                idx["depth_final"] = i
            }elif HasPrefix(s, "вес") && Contains(s,"крюке") && Contains(s,"начале"){
                idx["weight_started"] = i
            }elif HasPrefix(s, "вес") && Contains(s,"крюке") && Contains(s,"конце"){
                idx["weight_final"] = i
            }elif HasPrefix(s, "перепуск") && Contains(s,"перетяжка"){
                idx["bypass_bracing"] = i
            }elif s == "примечание" {
                break
            }
            i=i+1
        }
        return idx
    }
    func parseWorks(anchor string, rows array) array {
        var i lenRows lenRow c int row resultRows selectedRows array canCopy bool
        lenRows = Len(rows)
        lenRow = 18 //idx["bypass_bracing"] = 17
        while i < lenRows {
            var notEmptyCellCount int
            row = rows[i]
            c = 0
            while c < lenRow {
                if Size(row[c]) > 0{
                    notEmptyCellCount = notEmptyCellCount+1
                }
                if anchor == row[c] {
                    canCopy = true
                }
                c = c+1
            }
            if canCopy && notEmptyCellCount > 0 {
                selectedRows = Append(selectedRows, rows[i])
            }
            if canCopy && notEmptyCellCount == 0 {
                break
            }
            i = i+1
        }
        var idx map date string
        idx = parseIdx(selectedRows[0])
        lenRows = Len(selectedRows)
        i = 1
        while i < lenRows {
            var work map
            row = selectedRows[i]
            work["depth_final"] = Int(row[idx["depth_final"]])
            work["depth_started"] = Int(row[idx["depth_started"]])
            work["weight_final"] = Int(row[idx["weight_final"]])
            work["weight_started"] = Int(row[idx["weight_started"]])
            work["bypass_bracing"] = Int(row[idx["bypass_bracing"]])
            work["operation_type"] = row[idx["operation_type"]]
            date = row[idx["operation_date"]]
            if $asTimestamp {
                if Contains(date, "-"){
                    $asTimestamp = false
                }
            }
            if $asTimestamp{
                work["operation_date"] = Int(date)
                if work["operation_date"] != 0{
                    // https://stackoverflow.com/a/6154953
                    work["operation_date"] = (work["operation_date"] - 25569) * 86400
                }
            }else{
                if date != ""{
                    work["operation_date"] = date
                }else{
                    work["operation_date"] = "NULL"
                }
            }
            work["operation"] = Int(row[idx["operation"]])
            if work["operation"] {
                // stored data row only if has operation
                resultRows = Append(resultRows, work)
            }
            i=i+1
        }
        return resultRows
    }
    func parseCoil(rows array) map {
        var coil map i int row array
        i = 7 // start coil info
        while i < 9 { // end coil info
            row = rows[i]
            if i == 7 {
                coil["certificate"] = row[6]
                coil["diameter"] = Int(row[9])
            }elif i == 8 {
                coil["length_full"] = Int(row[6])
                coil["length_rigging"] = Int(row[7])
                coil["previous_workout"] = Int(row[17])
            }
            i = i+1
        }
        return coil
    }
    func parseDrilling(rows array) map {
        var drilling map i int row array
        i = 3 // start drilling info
        while i < 9 { // end drilling info
            row = rows[i]
            if i == 3 {
                drilling["filial"] = row[6]
            }elif i == 4 {
                drilling["expedition"] = row[6]
            }elif i == 5 {
                drilling["brigade"] = row[6]
            }elif i == 6 {
                drilling["master"] = row[6]
                drilling["block_weight"] = Int(row[17])
            }elif i == 7 {
                if row[17] == ""{
                    drilling["candle_length"] = 0.0
                }else{
                    drilling["candle_length"] = Float(row[17])
                }
            }
            i = i+1
        }
        return drilling
    }
    func getMapValues(m map, keys array) array {
        var values array i keysLen int key string
        keysLen = Len(keys)
        while i < keysLen {
            key = keys[i]
            if Contains(key, " "){
                var splittedKey array
                splittedKey = Split(key, " ")
                key = splittedKey[1]
            }
            values = Append(values, m[key])
            i=i+1
        }
        return values
    }
    func storeCoil(coil map) int {
        var id int
        id = Int(DBFind("rope_coils").Where("certificate=? and diameter=?", coil["certificate"], coil["diameter"]).One("id"))
        if id == 0{
            var keys values array
            keys = GetMapKeys(coil)
            values = getMapValues(coil, keys)
            id = DBInsert("rope_coils", Join(keys, ","), values...)
        }
        return id
    }
    func storeDrilling(drilling map) int {
        var id int
        id = Int(DBFind("rope_drillings").Where("filial=? and expedition=? and brigade=?", drilling["filial"], drilling["expedition"], drilling["brigade"]).One("id"))
        if id == 0{
            var keys values array
            keys = GetMapKeys(drilling)
            values = getMapValues(drilling, keys)
            id = DBInsert("rope_drillings", Join(keys, ","), values...)
        }
        return id
    }
    func storeWorksDepths(coilId, drillingId int, works array) {
        var i worksLen int workId depthId fieldsWork fieldsDepth depthWorkKeys fields string values array work map
        worksLen = Len(works)
        if $asTimestamp{
            fieldsWork = "operation_type,weight_final,weight_started,bypass_bracing,timestamp operation_date,operation"
        }else{
            fieldsWork = "operation_type,weight_final,weight_started,bypass_bracing,operation_date,operation"
        }

        fieldsDepth = Sprintf("%v,%v", $startedField, $finalField)
        while i < worksLen {
            work = works[i]
            workId = DBFind("rope_works").Columns("id").Where("coil_id=? and drilling_id=? and operation=?", coilId, drillingId, work["operation"]).One("id")
            if !workId {
                values = getMapValues(work, Split(fieldsWork, ","))
                values = appendAll(values,drillingId,coilId, -1, -1)
                fields = fieldsWork + ",drilling_id,coil_id,depth_started,depth_final"
                DBInsert("rope_works", fields, values...)
            }
            depthId = DBFind("rope_depths").Columns("id").Where("coil_id=? and drilling_id=? and operation=?", coilId, drillingId, work["operation"]).One("id")
            if !depthId {
                depthId = DBInsert("rope_depths", "coil_id,drilling_id,operation,manufacturer_final,manufacturer_started,producer_final,producer_started,servicer_final,servicer_started", coilId, drillingId, work["operation"],-1,-1,-1,-1,-1,-1)
            }

            values = getMapValues(work, Split("depth_started,depth_final", ","))
            DBUpdate("rope_depths", Int(depthId), fieldsDepth, values...)

            i=i+1
        }
    }
    func updateDepths(coilId, drillingId int) {
        var startedIds startedValues finalIds finalValues depths array i depthsLen int depth map columns string
        columns = Sprintf("id,%v,%v", $startedField, $finalField)
        depths = findAll("rope_depths", Sprintf("coil_id=%v and drilling_id=%v and operation>0", coilId, drillingId), columns)
        depthsLen = Len(depths)
        var buf array m map
        while i < depthsLen {
            depth = depths[i]
            startedIds = Append(startedIds, depth["id"])
            finalIds = Append(finalIds, depth["id"])
            startedValues = Append(startedValues, depth[$startedField])
            finalValues = Append(finalValues, depth[$finalField])
            i=i+1
        }
        m["StartedIds"] = JSONEncode(startedIds)
        m["StartedValues"] = JSONEncode(startedValues)
        m["FinalIds"] = JSONEncode(finalIds)
        m["FinalValues"] = JSONEncode(finalValues)
        buf = Append(buf, m)

        buffer_Manager("Action,Key,Val", "set", "rope_import", JSONEncode(buf))
        // RopeDepthsUpdate("StartedIds,StartedValues,FinalIds,FinalValues", startedIds, startedValues, finalIds, finalValues)
    }
    func updateUpload(coilId, drillingId int){
        var fields values array
        $inf["coil_id"] = coilId
        $inf["drilling_id"] = drillingId
        $inf["imported_at"] = $time
        fields = GetMapKeys($inf)
        values = getMapValues($inf, fields)
        DBUpdate("rope_uploads", Int($inf["id"]), Join(fields, ","), values...)
    }

    conditions {
        $Id = Int($Id)
        if $Id == 0 {
            $Id = Int(DBFind("buffer_data").Where("key='rope_upload' and member_id=?", $key_id).One("value"))
        }
        $inf = DBFind("rope_uploads").Where("id=?",$Id).Row()
        if !$inf {
            warning "Uploaded file not found"
        }
        $asTimestamp = true
        $binId = Int(DBFind("binaries").Where("id=?", $inf["binary_id"]).One("id"))
        if $binId == 0 {
            warning "Binary file not found"
        }
        RopeRolesCondition()
        var appId mid sid pid int
        appId = Int(DBFind("applications").Columns("id").Where("name='Rope accounting'").One("id"))
        mid = Int(AppParam(appId, "rope_manufacturer_role_id"))
        sid = Int(AppParam(appId, "rope_servicer_role_id"))
        pid = Int(AppParam(appId, "rope_producer_role_id"))

        if $role_id == mid {
            $startedField = "manufacturer_started"
            $finalField = "manufacturer_final"

        }elif $role_id == sid {
            $startedField = "servicer_started"
            $finalField = "servicer_final"

        }elif $role_id == pid {
            $startedField = "producer_started"
            $finalField = "producer_final"
        }
    }
    action {
        var line count sheet drillingId coilId int rows works array coil drilling map
        sheet = 1
        count = Int(Str(GetRowsCountXLSX($binId, sheet)))
        rows = GetDataFromXLSX($binId, line, count, sheet)

        coil = parseCoil(rows)
        drilling = parseDrilling(rows)
        works = parseWorks("Месторождение", rows)

        coilId = storeCoil(coil)
        drillingId = storeDrilling(drilling)

        storeWorksDepths(coilId, drillingId, works)
        updateDepths(coilId, drillingId)
        updateUpload(coilId, drillingId)
    }
}