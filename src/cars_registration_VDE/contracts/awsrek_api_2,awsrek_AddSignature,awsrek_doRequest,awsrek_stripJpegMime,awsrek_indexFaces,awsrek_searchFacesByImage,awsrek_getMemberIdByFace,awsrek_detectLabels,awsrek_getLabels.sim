contract awsrek_api_2 {
}

//Calculates signature and adds it to headers. Returns headers.
func awsrek_AddSignature(headers map, json_payload string, now_time int) map {
	var secret string
	secret = awsrek_getSecretKey()

	var kDate string
	kDate = HMac(secret, Date("20060102", now_time), true)

	var kRegion string
	kRegion = HMac(kDate, "us-east-1", true)

	var kService string
	kService = HMac(kRegion, "rekognition", true)
	
	var kReq string
	kReq = HMac(kService, "aws4_request", true)

	var sdt string
	sdt = Date("20060102", now_time)
	
	var scope string
	scope = Sprintf("%s/us-east-1/rekognition/aws4_request", sdt)

	var canon string
	canon = awsrek_createCanonicalRequest(headers, json_payload)

	var to_sign string
	to_sign = awsrek_createStringToSign(headers["x-amz-date"], scope, canon)

	var signature string
	signature = HMac(kReq, to_sign, false)

	var headers_keys array
	headers_keys = SortedKeys(headers)

	var signed_headers string
	signed_headers = Join(headers_keys, ";")

	var authorization string
	authorization = Sprintf("AWS4-HMAC-SHA256 Credential=%s/%s/us-east-1/rekognition/aws4_request, SignedHeaders=%s, Signature=%s", 
							awsrek_getKeyId(), sdt, signed_headers, signature)

	headers["authorization"] = authorization

	return headers
}

//Makes requests to AWS API specified method. Returns json string.
func awsrek_doRequest(aws_method string, json_payload string) string {
    var request_link string
    request_link = Sprintf("%s%s", awsrek_getBaseLink())

	var trimmed_payload string
	trimmed_payload = TrimSpace(json_payload)

	var content_length int
	content_length = Size(trimmed_payload)

	var now_time int
	now_time = $time - 36000
                                
	var headers map
	headers = awsrek_AddSignature(awsrek_buildHeaders(now_time, aws_method, content_length), trimmed_payload, now_time)

	var ret string
	ret = HTTPPostJSON(awsrek_getBaseLink(), headers, trimmed_payload)

    return ret
}

//Removes mime type from png and jpg. Returns base64 string.
func awsrek_stripJpegMime(image string) string {
	return Replace(Replace(image, "data:image/jpeg;base64,", ""), "data:image/png;base64,", "")
}

//Adding faces to collection in amazon aws
func awsrek_indexFaces(avatar string, id int) map {
    var json_payload string
	json_payload = Sprintf("{
		   \"CollectionId\": \"apla_rta_india_test\",
		   \"DetectionAttributes\": [ \"ALL\" ],
		   \"ExternalImageId\": \"%d\",
		   \"Image\": { 
			  \"Bytes\": \"%s\"
		   }
		}", id, awsrek_stripJpegMime(avatar))

	//DBInsert("debug", "data", json_payload)
	var resp map
	resp = JSONToMap(awsrek_doRequest("IndexFaces", json_payload))	
	return resp
}

//Searches face in AWS collection and returns json string.
func awsrek_searchFacesByImage(image string) string {
	var json_payload string
	json_payload = Sprintf("{
		   \"CollectionId\": \"apla_rta_india_test\",
		   \"Image\": { 
			  \"Bytes\": \"%s\"
		   },
		   \"MaxFaces\": 1
		}", awsrek_stripJpegMime(image))
	
	return awsrek_doRequest("SearchFacesByImage", json_payload)
}

//Searches face in AWS collection and returns member_id and recognition confidence in map
func awsrek_getMemberIdByFace(face_img string) map {
    var json string
    json = awsrek_searchFacesByImage(face_img)

    var resp map
	resp = JSONToMap(json)	

	var frecords array
	frecords = resp["FaceMatches"]

	var face map
	face = frecords[0]
	face = face["Face"]

	var result map
	result["id"] = face["ExternalImageId"]
	result["confidence"] = face["Confidence"]

	return result
}

//Detects objects on image and returns json string.
func awsrek_detectLabels(image string) string {
	var json_payload string
	json_payload = Sprintf("{
		   \"Image\": { 
			  \"Bytes\": \"%s\"
		   },
		   \"MinConfidence\": 70
		}", awsrek_stripJpegMime(image))
	
	return awsrek_doRequest("DetectLabels", json_payload)
}

//Detects objects on image and returns map of objects.
func awsrek_getLabels(img string) map {
    var json string
    json = awsrek_detectLabels(img)
    //DBInsert("debug", "data", json)
    var resp map
	resp = JSONToMap(json)

	var labels array
	labels = resp["Labels"]

	var i int
	var labels_len int
	labels_len = Len(labels)
	var results map
	while(i < labels_len) {
		var label map
		label = labels[i]
		results[label["Name"]] = Float(label["Confidence"])
		i = i + 1
	}
	return results
}